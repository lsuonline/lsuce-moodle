{"version":3,"file":"destcourse_source.min.js","sources":["../src/destcourse_source.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Reprocess All Tool\n * @copyright  Louisiana State University\n * @copyright  The guy who did stuff: David Lowe\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['jquery', 'core/ajax', 'block_ues_reprocess/notifications', 'block_ues_reprocess/ues_lib'],\n    function($, Ajax, Noti, XELib) {\n    'use strict';\n    return {\n        /**\n         * Make an ajax call to the destination server and get groups.\n         * This is currently not being used but may in the future?\n         *\n         * @param {int} v course id\n         * @return {Promise}\n         */\n         getGroups: function (v) {\n            var params = {\n                'type': 'GET',\n                'url': sessionStorage.getItem(\"currentUrl\") + '/webservice/rest/server.php',\n                'data': {\n                    'wstoken': sessionStorage.getItem(\"currentToken\"),\n                    'wsfunction': 'core_group_get_course_user_groups',\n                    'courseid': v,\n                    'moodlewsrestformat': 'json'\n                }\n            };\n            return XELib.jaxyRemotePromise(params);\n        },\n\n        processSelected: function (params) {\n            var course_shortname = \"\",\n                course_value = \"\";\n\n            // Handle multiple select results\n            if (params.selector.length > 1) {\n                // TODO: process multiple selects.\n                return;\n            } else if (params.selector.length == 1) {\n                course_shortname = params.selector[0].label;\n                course_value = (params.selector[0].value).split(\"__\")[0];\n                this.getGroups(course_shortname, course_value);\n                // Here a function can be called to make whatever changes AFTER something\n                // has been selected.\n            } else {\n                // Nothing selected.\n                return;\n            }\n        },\n\n        /**\n         * This is a mod that worked but not used. If to be used in the future then\n         * in lib/amd/src/form-autocomplete.js approx ln. 743 need to inject a call to onSelected\n         * when either mouse is clicked or enter key is hit (ln 870)\n         * See the file for details.\n         * lib/amd/src/form-cohort-selector.js also needs to add the onSelected method.\n         * See the file for details.\n         *\n         * This is currently not being used but may in the future?\n         *\n         * @param {string} selector - the selector name\n         * @param {Object} data - the data for the selector\n         * @return {Promise}\n         */\n        onSelected: function (selector, data) {\n            this.processSelected({'selector': selector, 'data': data});\n        },\n\n        /**\n         * Make an ajax call to the destination server and get courses.\n         *\n         * @param {Object} params - all the options to use jquery's $.ajax function (not moodle's)\n         * @return {Promise}\n         */\n         getCourses: function (params) {\n            var params = {\n                'type': 'GET',\n                'url': sessionStorage.getItem(\"currentUrl\") + '/webservice/rest/server.php',\n                'data': {\n                    'wstoken': sessionStorage.getItem(\"currentToken\"),\n                    'wsfunction': 'core_course_search_courses',\n                    \"criterianame\": 'search',\n                    'criteriavalue': $('.xe_dest_sn_wrap input').val(),\n                    'moodlewsrestformat': 'json'\n                }\n            };\n            return XELib.jaxyRemotePromise(params);\n         },\n\n        /**\n         * Process the results for auto complete elements. To keep the course id\n         * and name they have been concatenated as the value.\n         *\n         * @param {String} selector The selector of the auto complete element.\n         * @param {Array} results An array or results.\n         * @return {Array} New array of results.\n         */\n        processResults: function(selector, results) {\n            if ('success' in results && results.success == false) {\n                if (results.msg == \"Could not connect to the server.\") {\n                    // Don't show more than one notice, it's annoying.\n                    Noti.callNoti({\n                        message: results.msg,\n                        type: 'error'\n                    });\n                    return;\n                }\n            } else if (results.courses.length > 0) {\n\n                var options = [];\n                $.each(results.courses, function(index, data) {\n                    options.push({\n                        value: data.id + '__' + data.shortname,\n                        label: data.shortname\n                    });\n                });\n                return options;\n            }\n\n            Noti.callNoti({\n                message: \"Sorry, can't seem to reach anything at the moment, please contact the Moodle Dev team.\",\n                type: 'error'\n            });\n        },\n\n        /**\n         * This is using a subclass of Moodle's autocomplete function in:\n         * classes/form/groupform_autocomplete.php\n         *\n         * @param {String} selector - The selector of the auto complete element.\n         * @param {String} query - The query string.\n         * @param {Function} callback - A callback function receiving an array of results.\n         */\n        /* eslint-disable promise/no-callback-in-promise */\n        transport: function(selector, query, callback) {\n            this.getCourses().then(callback).catch();\n            // this calls processResults when done.\n        }\n    };\n\n});\n"],"names":["define","$","Ajax","Noti","XELib","getGroups","v","params","sessionStorage","getItem","jaxyRemotePromise","processSelected","course_shortname","course_value","selector","length","label","value","split","onSelected","data","getCourses","val","processResults","results","success","msg","callNoti","message","type","courses","options","each","index","push","id","shortname","transport","query","callback","then","catch"],"mappings":";;;;;;AAsBAA,+CAAO,CAAC,SAAU,YAAa,oCAAqC,gCAChE,SAASC,EAAGC,KAAMC,KAAMC,aAEjB,CAQFC,UAAW,SAAUC,OACdC,OAAS,MACD,UACDC,eAAeC,QAAQ,cAAgB,mCACtC,SACOD,eAAeC,QAAQ,2BACpB,6CACFH,qBACU,gBAGvBF,MAAMM,kBAAkBH,SAGnCI,gBAAiB,SAAUJ,YACnBK,iBAAmB,GACnBC,aAAe,GAGfN,OAAOO,SAASC,OAAS,GAGQ,GAA1BR,OAAOO,SAASC,SACvBH,iBAAmBL,OAAOO,SAAS,GAAGE,MACtCH,aAAgBN,OAAOO,SAAS,GAAGG,MAAOC,MAAM,MAAM,QACjDb,UAAUO,iBAAkBC,gBAuBzCM,WAAY,SAAUL,SAAUM,WACvBT,gBAAgB,UAAaG,cAAkBM,QASvDC,WAAY,SAAUd,QACfA,OAAS,MACD,UACDC,eAAeC,QAAQ,cAAgB,mCACtC,SACOD,eAAeC,QAAQ,2BACpB,0CACE,uBACCR,EAAE,0BAA0BqB,yBACvB,gBAGvBlB,MAAMM,kBAAkBH,SAWnCgB,eAAgB,SAAST,SAAUU,YAC3B,YAAaA,SAA8B,GAAnBA,QAAQC,YACb,oCAAfD,QAAQE,gBAERvB,KAAKwB,SAAS,CACVC,QAASJ,QAAQE,IACjBG,KAAM,eAIX,GAAIL,QAAQM,QAAQf,OAAS,EAAG,KAE/BgB,QAAU,UACd9B,EAAE+B,KAAKR,QAAQM,SAAS,SAASG,MAAOb,MACpCW,QAAQG,KAAK,CACTjB,MAAOG,KAAKe,GAAK,KAAOf,KAAKgB,UAC7BpB,MAAOI,KAAKgB,eAGbL,QAGX5B,KAAKwB,SAAS,CACVC,QAAS,yFACTC,KAAM,WAadQ,UAAW,SAASvB,SAAUwB,MAAOC,eAC5BlB,aAAamB,KAAKD,UAAUE"}