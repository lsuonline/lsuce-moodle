{"version":3,"file":"file_buttons.min.js","names":["define","$","noti","PULib","frackYou","console","log","confirmCheckExecute","params","callYesNoModi","then","response","status","check_file_exists","success","callNoti","message","msg","type"],"sources":["../src/file_buttons.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Cross Enrollment Tool\n *\n * @package   block_pu\n * @copyright 2008 onwards Louisiana State University\n * @copyright 2008 onwards David Lowe, Robert Russo\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n define(['jquery', 'block_pu/notifications', 'block_pu/pu_lib'],\n    function($, noti, PULib) {\n    'use strict';\n    return {\n        /**\n         * Check if the file exists\n         * @param {object} the json object sent to the server\n         * @return resolved data\n         */\n        // check_file_exists: function (params) {\n        //     return PULib.jaxyPromise({\n        //         'call': 'check_file_exists',\n        //         'params': params,\n        //         'class': 'pufile'\n        //     });\n        // },\n\n        frackYou: function () {\n            console.log(\"Frack you snitch\");\n        },\n\n        confirmCheckExecute: function (params) {\n            // First let's confirm\n            console.log(\"What are the params: \", params);\n            noti.callYesNoModi(params).then(function (response) {\n\n                console.log(\"Chaning 2\");\n                if (response.status == true) {\n                    // console.log(\"Copy button CLICKED -> TRUE\");\n\n                    // console.log(\"Do we have this: \", this);\n                    // console.log(\"Do we have that: \", that);\n                    return response;\n                }\n            // }).then(fuckYou)\n            }).then(function (response) {\n                // We need to check if the file exists.\n                console.log(\"Inside chain before second call-> What is the response: \", response);\n                PULib.check_file_exists(response).then(function (response) {\n                    console.log(\"Inside check_file_exists -> What is the response: \", response);\n\n                    if (response.success == false) {\n                        console.log(\" ==>> FUCK WOD 1: \", response);\n                        noti.callNoti({\n                            message: response.msg,\n                            type: \"fail\"\n                        });\n                    // } else if (response.success == \"false\") {\n                        // console.log(\" ==>> FUCK WOD 2:\" , response);\n\n                    } else {\n\n                        console.log(\" ==>> GOTCHA BITCH!!!!!\");\n                    }\n                    // var this_form = $('#pu_file_form_'+response.data.record);\n                    // // Convert all the form elements values to a serialised string.\n                    // this_form.append('<input type=\"hidden\" name=\"action\" value=\"copy\" />');\n                    // this_form.submit();\n                });\n\n                // return new Promise((resolve, reject) => { // (*)\n                //     setTimeout(() => resolve(result * 2), 1000);\n                // });\n\n                // that.check_file_exists({\n                //     // 'mdl_file_id': $(\"input[name=nameGoesHere]\").val();\n                //     'mdl_file_id': $(this).find('input[name=mdl_file_id]').val()\n\n                // }).then(function (response) {\n                //     // if the text is disabled then use select\n                //     console.log(\"What is the response: \", response);\n                // var this_form = $('#pu_file_form_'+response.data.record);\n                // // Convert all the form elements values to a serialised string.\n                // this_form.append('<input type=\"hidden\" name=\"action\" value=\"copy\" />');\n                // this_form.submit();\n\n                // });\n            });\n        },\n    };\n});"],"mappings":"AAwBCA,OAAM,yBAAC,CAAC,QAAQ,CAAE,wBAAwB,CAAE,iBAAiB,CAAC,CAC3D,SAASC,CAAC,CAAEC,CAAI,CAAEC,CAAK,CAAE,CACzB,YAAY,CACZ,MAAO,CAcHC,QAAQ,CAAE,SAAAA,SAAA,CAAY,CAClBC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAClC,CAAC,CAEDC,mBAAmB,CAAE,SAAAA,oBAAUC,CAAM,CAAE,CAEnCH,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAEE,CAAM,CAAC,CAC5CN,CAAI,CAACO,aAAa,CAACD,CAAM,CAAC,CAACE,IAAI,CAAC,SAAUC,CAAQ,CAAE,CAEhDN,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC,CACxB,GAAI,IAAAK,CAAQ,CAACC,MAAc,CAAE,CAKzB,MAAO,CAAAD,CACX,CAEJ,CAAC,CAAC,CAACD,IAAI,CAAC,SAAUC,CAAQ,CAAE,CAExBN,OAAO,CAACC,GAAG,CAAC,0DAA0D,CAAEK,CAAQ,CAAC,CACjFR,CAAK,CAACU,iBAAiB,CAACF,CAAQ,CAAC,CAACD,IAAI,CAAC,SAAUC,CAAQ,CAAE,CACvDN,OAAO,CAACC,GAAG,CAAC,oDAAoD,CAAEK,CAAQ,CAAC,CAE3E,GAAI,IAAAA,CAAQ,CAACG,OAAgB,CAAE,CAC3BT,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAEK,CAAQ,CAAC,CAC3CT,CAAI,CAACa,QAAQ,CAAC,CACVC,OAAO,CAAEL,CAAQ,CAACM,GAAG,CACrBC,IAAI,CAAE,MACV,CAAC,CAIL,CAAC,IAAM,CAEHb,OAAO,CAACC,GAAG,CAAC,yBAAyB,CACzC,CAKJ,CAAC,CAmBL,CAAC,CACL,CACJ,CACJ,CAAC,CAAC"}