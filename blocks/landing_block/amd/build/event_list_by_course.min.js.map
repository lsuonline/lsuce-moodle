{"version":3,"sources":["../src/event_list_by_course.js"],"names":["define","$","EventList","EventsRepository","SELECTORS","EVENTS_BY_COURSE_CONTAINER","EVENT_LIST_CONTAINER","load","root","courseBlocks","find","length","eventList","first","midnight","attr","limit","courseIds","map","get","coursesPromise","queryByCourses","courseids","starttime","each","index","container","courseId","eventListContainer","rootSelector","promise","Deferred","done","result","events","courseGroup","groupedbycourse","filter","group","courseid","resolve","fail","e","reject","init"],"mappings":"AAuBAA,OAAM,4CACN,CACI,QADJ,CAEI,6BAFJ,CAGI,6CAHJ,CADM,CAMN,SAASC,CAAT,CAAYC,CAAZ,CAAuBC,CAAvB,CAAyC,IAIjCC,CAAAA,CAAS,CAAG,CACZC,0BAA0B,CAAE,2CADhB,CAEZC,oBAAoB,CAAE,wCAFV,CAJqB,CAejCC,CAAI,CAAG,SAASC,CAAT,CAAe,CACtB,GAAIC,CAAAA,CAAY,CAAGD,CAAI,CAACE,IAAL,CAAUN,CAAS,CAACC,0BAApB,CAAnB,CAEA,GAAI,CAACI,CAAY,CAACE,MAAlB,CAA0B,CACtB,MACH,CALqB,GAOlBC,CAAAA,CAAS,CAAGH,CAAY,CAACC,IAAb,CAAkBN,CAAS,CAACE,oBAA5B,EAAkDO,KAAlD,EAPM,CAQlBC,CAAQ,CAAGF,CAAS,CAACG,IAAV,CAAe,eAAf,CARO,CAUlBC,CAAK,CAAGJ,CAAS,CAACG,IAAV,CAAe,YAAf,CAVU,CAWlBE,CAAS,CAAGR,CAAY,CAACS,GAAb,CAAiB,UAAW,CACxC,MAAOjB,CAAAA,CAAC,CAAC,IAAD,CAAD,CAAQc,IAAR,CAAa,gBAAb,CACV,CAFe,EAEbI,GAFa,EAXM,CAkBlBC,CAAc,CAAGjB,CAAgB,CAACkB,cAAjB,CAAgC,CACjDC,SAAS,CAAEL,CADsC,CAEjDM,SAAS,CAXGT,CAAQ,QAS6B,CAGjDE,KAAK,CAAEA,CAH0C,CAAhC,CAlBC,CAyBtBP,CAAY,CAACe,IAAb,CAAkB,SAASC,CAAT,CAAgBC,CAAhB,CAA2B,CACzCA,CAAS,CAAGzB,CAAC,CAACyB,CAAD,CAAb,CADyC,GAErCC,CAAAA,CAAQ,CAAGD,CAAS,CAACX,IAAV,CAAe,gBAAf,CAF0B,CAGrCa,CAAkB,CAAGF,CAAS,CAAChB,IAAV,CAAeR,CAAS,CAAC2B,YAAzB,CAHgB,CAIrCC,CAAO,CAAG7B,CAAC,CAAC8B,QAAF,EAJ2B,CASzCX,CAAc,CAACY,IAAf,CAAoB,SAASC,CAAT,CAAiB,IAC7BC,CAAAA,CAAM,CAAG,EADoB,CAI7BC,CAAW,CAAGF,CAAM,CAACG,eAAP,CAAuBC,MAAvB,CAA8B,SAASC,CAAT,CAAgB,CAC5D,MAAOA,CAAAA,CAAK,CAACC,QAAN,EAAkBZ,CAC5B,CAFiB,CAJe,CAQjC,GAAIQ,CAAW,CAACxB,MAAhB,CAAwB,CACpBuB,CAAM,CAAGC,CAAW,CAAC,CAAD,CAAX,CAAeD,MAC3B,CAEDJ,CAAO,CAACU,OAAR,CAAgB,CAACN,MAAM,CAAEA,CAAT,CAAhB,CACH,CAbD,EAaGO,IAbH,CAaQ,SAASC,CAAT,CAAY,CAChBZ,CAAO,CAACa,MAAR,CAAeD,CAAf,CACH,CAfD,EAmBAxC,CAAS,CAACK,IAAV,CAAeqB,CAAf,CAAmCE,CAAnC,CACH,CA7BD,CA8BH,CAtEoC,CAwErC,MAAO,CACHc,IAAI,CAAE,cAASpC,CAAT,CAAe,CACjBA,CAAI,CAAGP,CAAC,CAACO,CAAD,CAAR,CACAD,CAAI,CAACC,CAAD,CACP,CAJE,CAMV,CApFK,CAAN","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript to load and render the list of calendar events grouping by course.\n *\n * @module     block_myoverview/events_by_course_list\n * @package    block_myoverview\n * @copyright  2016 Simey Lameze <simey@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(\n[\n    'jquery',\n    'block_myoverview/event_list',\n    'block_myoverview/calendar_events_repository'\n],\nfunction($, EventList, EventsRepository) {\n\n    var SECONDS_IN_DAY = 60 * 60 * 24;\n\n    var SELECTORS = {\n        EVENTS_BY_COURSE_CONTAINER: '[data-region=\"course-events-container\"]',\n        EVENT_LIST_CONTAINER: '[data-region=\"event-list-container\"]',\n    };\n\n    /**\n     * Loop through course events containers and load calendar events for that course.\n     *\n     * @method load\n     * @param {Object} root The root element of sort by course list.\n     */\n    var load = function(root) {\n        var courseBlocks = root.find(SELECTORS.EVENTS_BY_COURSE_CONTAINER);\n\n        if (!courseBlocks.length) {\n            return;\n        }\n\n        var eventList = courseBlocks.find(SELECTORS.EVENT_LIST_CONTAINER).first();\n        var midnight = eventList.attr('data-midnight');\n        var startTime = midnight - (14 * SECONDS_IN_DAY);\n        var limit = eventList.attr('data-limit');\n        var courseIds = courseBlocks.map(function() {\n            return $(this).attr('data-course-id');\n        }).get();\n\n        // Load the first set of events for each course in a single request.\n        // We want to avoid sending an individual request for each course because\n        // there could be lots of them.\n        var coursesPromise = EventsRepository.queryByCourses({\n            courseids: courseIds,\n            starttime: startTime,\n            limit: limit\n        });\n\n        // Load the events into each course block.\n        courseBlocks.each(function(index, container) {\n            container = $(container);\n            var courseId = container.attr('data-course-id');\n            var eventListContainer = container.find(EventList.rootSelector);\n            var promise = $.Deferred();\n\n            // Once all of the course events have been loaded then we need\n            // to extract just the ones relevant to this course block and\n            // hand them to the event list to render.\n            coursesPromise.done(function(result) {\n                var events = [];\n                // Get this course block's events from the collection returned\n                // from the server.\n                var courseGroup = result.groupedbycourse.filter(function(group) {\n                    return group.courseid == courseId;\n                });\n\n                if (courseGroup.length) {\n                    events = courseGroup[0].events;\n                }\n\n                promise.resolve({events: events});\n            }).fail(function(e) {\n                promise.reject(e);\n            });\n\n            // Provide the event list with a promise that will be resolved\n            // when we have received the events from the server.\n            EventList.load(eventListContainer, promise);\n        });\n    };\n\n    return {\n        init: function(root) {\n            root = $(root);\n            load(root);\n        }\n    };\n});\n"],"file":"event_list_by_course.min.js"}