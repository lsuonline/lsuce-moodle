{"version":3,"file":"form_events.min.js","sources":["../src/form_events.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Cross Enrollment Tool\n *\n * @copyright 2008 onwards Louisiana State University\n * @copyright 2008 onwards David Lowe, Robert Russo\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n // define(['jquery', 'block_lsuxe/xe_lib', 'block_lsuxe/notifications', 'block_lsuxe/verify'],\n define(['jquery', 'block_lsuxe/xe_lib', 'block_lsuxe/notifications'],\n    // function($, XELib, Noti, Veri) {\n    function($, XELib, Noti) {\n    'use strict';\n    return {\n        /**\n         * Fetch the token for the current selected URL. Store in temp sessionStorage\n         *\n         * @return void\n         */\n        getTokenReady: function () {\n            // Check to see if this is the first time landing or not.\n            var url = $('#id_available_moodle_instances option:selected').text();\n            XELib.getTokenForURL(url).then(function (response) {\n                if (response.success == true) {\n                    sessionStorage.setItem(\"currentToken\", response.data);\n                    sessionStorage.setItem(\"currentUrl\", url);\n                } else {\n                    console.log(\"ERROR: Failed to get the token :-( \");\n                    // TODO: Send Notification to user that token is crap\n                }\n            });\n        },\n\n        /**\n         * Get group data from a course.\n         * @param {object} params for the json object.\n         * @return resolved data\n         */\n        getGroupData: function (params) {\n            return XELib.jaxyPromise({\n                'call': 'get_group_data',\n                'params': params,\n                'class': 'router'\n            });\n        },\n\n        /**\n         * Moodle removes any changed option/select elements. In order to maintain\n         * the data push data into hidden some that are in the form's page.\n         *\n         * @param {string} tag name of the tag to be changed\n         * @param {string} value the value to insert\n         * @return {void}\n         */\n        setHiddenValue: function (tag, value) {\n            $('input[name='+tag+']').val(value);\n        },\n\n        /**\n         * Verify the source course and group.\n         *\n         * @param {object} params the json object sent to the server\n         * @return {Object} resolved data\n         */\n        verifySourceCourse: function (params) {\n            return XELib.jaxyPromise({\n                'call': 'verify_course',\n                'params': params,\n                'class': 'router'\n            });\n        },\n\n        /**\n         * Verify the destination course.\n         *\n         * @param {object} params the json object sent to the server\n         * @return {Object} resolved data\n         */\n        verifyDestCourse: function (params) {\n            var new_params = {\n                'type': 'GET',\n                'url': sessionStorage.getItem(\"currentUrl\") + '/webservice/rest/server.php',\n                'data': {\n                    'wstoken': sessionStorage.getItem(\"currentToken\"),\n                    'wsfunction': 'core_course_get_courses_by_field',\n                    'moodlewsrestformat': 'json',\n                    'field': 'shortname',\n                    'value': params.coursename\n                }\n            };\n            return XELib.jaxyRemotePromise(new_params);\n        },\n\n        /**\n         * Reset the dropdown for the source group.\n         *\n         * @return null\n         */\n        resetGroupList: function () {\n            $('#id_srccoursegroupnameselect').empty();\n            $('#id_srccoursegroupnametext').text();\n            $('#id_srccoursegroupnameselect')\n                .append($(\"<option></option>\")\n                .attr(\"value\", 0)\n                .text(\"Please search for a course first\"));\n        },\n\n        /**\n         * Register all the events for the Mappings Form Page.\n         * @return {void}\n         */\n        registerMoodleEvents: function() {\n            // This is for the Moodles Form\n            $('#id_verifysource').on('click', function() {\n                var test_url = $(\"#id_instanceurl\").val(),\n                    test_token = $(\"#id_instancetoken\").val();\n\n                var params = {\n                    'type': 'GET',\n                    // 'type': 'POST',\n                    // 'url': test_url + '/admin/webservice/testclient.php',\n                    'url': test_url + '/webservice/rest/server.php',\n                    'data': {\n                        'wstoken': test_token,\n                        'wsfunction': 'block_lsuxe_xeajax',\n                        'moodlewsrestformat': 'json',\n                        // 'data': {\n                        'datachunk': JSON.stringify({\n                            'call': 'test_service',\n                            'params': {\n                                'test': 'test',\n                            },\n                            'class': 'router'\n                        })\n                    }\n                };\n\n                XELib.testWebServices(params).then(function (response) {\n                    if (response.success == false) {\n                        Noti.callNoti({\n                            message: response.msg,\n                            type: 'error'\n                        });\n                    } else {\n                        Noti.callNoti({\n                            message: \"Successfully said hello to the remote Moodle instance .\",\n                            type: 'success'\n                        });\n                    }\n\n                });\n            });\n        },\n\n        /**\n         * Register all the events for the Mappings Form Page.\n         * @return void\n         */\n        registerMappingEvents: function() {\n            var that = this,\n                src_form_select = $(\"#id_srccourseshortname\");\n\n            src_form_select.change(function() {\n                if (src_form_select.val()) {\n                    // change invokes any change so only make an ajax call if there is value\n                    that.getGroupData({\n                        'courseid': src_form_select.val(),\n                        'coursename': $( \"#id_srccourseshortname option:selected\" ).text()\n                    },).then(function (response) {\n                        // if the text is disabled then use select\n                        if (response.count == 0) {\n                            // There are no groups, reset.\n                            that.resetGroupList();\n\n                        } else {\n                            // Multiple groups, so let's unhide the select\n                            $('#id_srccoursegroupnameselect').empty();\n                            var first_choice = \"\";\n                            for (let i in response.data) {\n                                // This is to store the first select and to be used.\n                                if (first_choice == \"\") {\n                                    first_choice = {\n                                        groupid: response.data[i].groupid,\n                                        groupname: response.data[i].groupname\n                                    };\n                                }\n                                $('#id_srccoursegroupnameselect')\n                                    .append($(\"<option></option>\")\n                                    .attr(\"value\", response.data[i].groupid)\n                                    .text(response.data[i].groupname));\n                            }\n\n                            // Now that it's been populated, set the hidden elements to match the first\n                            // select option.\n                            that.setHiddenValue('srccoursegroupname', first_choice.groupname);\n                            that.setHiddenValue('srccoursegroupid', first_choice.groupid);\n                        }\n\n                    });\n                } else {\n                    // if there is no value in the course name then clear out the group name.\n                    that.resetGroupList();\n                }\n            });\n\n            // Any changes to the group element, update the hidden.\n            $(\"#id_srccoursegroupnameselect\").change(function() {\n                var new_value = $(this).find(\"option:selected\").attr('value'),\n                    new_text = $(this).find(\"option:selected\").text();\n                that.setHiddenValue('srccoursegroupname', new_text);\n                that.setHiddenValue('srccoursegroupid', new_value);\n            });\n\n            // Verify the Course and Group Names.\n            $('#id_verifysource').on('click', function() {\n                var coursename = \"\",\n                    groupname = \"\";\n\n                // If we are using the autocomplete feature then the jquery\n                // selector is different.\n                if (sessionStorage.getItem(\"xes_autocomplete\") == \"1\") {\n                    coursename = $(\"#id_srccourseshortname\").find(\"option:selected\").text();\n                    groupname = $(\"#id_srccoursegroupnameselect\").find(\"option:selected\").text();\n                } else {\n                    coursename = $(\"#id_srccourseshortname\").val();\n                    groupname = $(\"#id_srccoursegroupname\").val();\n                }\n\n                if (coursename.length < 1) {\n                    // User forgot to enter a course name.\n                    Noti.callNoti({\n                        message: \"Ooops, you forgot to enter a course short name\",\n                        type: 'error'\n                    });\n                    return;\n                }\n\n                if (groupname.length < 1) {\n                    // User forgot to enter a course name.\n                    Noti.callNoti({\n                        message: \"Ooops, you forgot to enter a group name\",\n                        type: 'error'\n                    });\n                    return;\n                }\n                that.verifySourceCourse({\n                    'coursename': coursename,\n                    'groupname': groupname\n                }).then( function (response) {\n                    if (response.success == false) {\n                        Noti.callNoti({\n                            message: response.msg,\n                            type: 'error'\n                        });\n                    } else {\n                        // Populate the hidden fields since we are here.\n                        that.setHiddenValue('srccourseid', response.data.id);\n                        that.setHiddenValue('srccoursegroupid', response.data.groupid);\n                        Noti.callNoti({\n                            message: \"Everything checks out for the source course and group.\",\n                            type: 'success'\n                        });\n                    }\n                });\n            });\n\n            $('#id_verifydest').on('click', function() {\n                var destname = $(\"#id_destcourseshortname\").val();\n\n                that.verifyDestCourse({\n                    'coursename': destname\n                }).then( function (response){\n                    if ((\"courses\" in response)) {\n                        // how many courses were retrieved\n                        if (response.courses.length == 1) {\n                            that.setHiddenValue('destcourseid', response.courses[0].id);\n\n                            Noti.callNoti({\n                                message: \"Destination course is there and waiting for you.\",\n                                type: 'success'\n                            });\n                        } else {\n                            Noti.callNoti({\n                                message: \"There seems to be more than one course with that shortname.\",\n                                type: 'warn'\n                            });\n                        }\n                    } else {\n                        // FALSE\n                        Noti.callNoti({\n                            message: \"The course: \" + destname + \" was not found on the destination server.\",\n                            type: 'error'\n                        });\n                    }\n                });\n            });\n\n            // Register events on the moodles form,\n            // onChange event for the URL selector\n            $('select#id_available_moodle_instances').on('change', function() {\n                that.getTokenReady();\n\n                // Clear out the Destination Course Shorname\n                $('div.xe_dest_course_auto ul.form-autocomplete-suggestions').empty();\n                $('div.xe_dest_course_auto input').val('');\n                $('span.notifications').empty();\n            });\n        },\n\n        /**\n         * These are registered events being loaded that are NOT being called from mustache templates\n         * @return resolved data\n         */\n        registerEvents: function () {\n\n            // Let's not load all events, just what we need.\n            if (sessionStorage.getItem('xe_form') == \"mappings\" && sessionStorage.getItem('xe_viewform') == \"true\") {\n                // Register events on the mappings form.\n                this.registerMappingEvents();\n\n            } else if (sessionStorage.getItem('xe_form') == \"moodles\" && sessionStorage.getItem('xe_viewform') == \"true\") {\n                // Register events on the mappings form.\n                this.registerMoodleEvents();\n                // Veri.registerCheckMarkTags()\n                // TODO: move from template to here.\n            }\n        },\n\n        /**\n         * The entry point for the mappings and moodles form.\n         * Register the events and load the token.\n         *\n         * @return null\n         */\n        init: function () {\n            this.registerEvents();\n            this.getTokenReady();\n        }\n    };\n});"],"names":["define","$","XELib","Noti","getTokenReady","url","text","getTokenForURL","then","response","success","sessionStorage","setItem","data","console","log","getGroupData","params","jaxyPromise","setHiddenValue","tag","value","val","verifySourceCourse","verifyDestCourse","new_params","getItem","coursename","jaxyRemotePromise","resetGroupList","empty","append","attr","registerMoodleEvents","on","JSON","stringify","testWebServices","callNoti","message","msg","type","registerMappingEvents","that","this","src_form_select","change","count","first_choice","i","groupid","groupname","new_value","find","new_text","length","id","destname","courses","registerEvents","init"],"mappings":"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"}