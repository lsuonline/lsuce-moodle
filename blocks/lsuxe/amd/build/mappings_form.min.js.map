{"version":3,"sources":["../src/mappings_form.js"],"names":["define","$","XELib","Noti","getTokenReady","url","text","getTokenForURL","then","response","success","sessionStorage","setItem","data","getGroupData","params","jaxyPromise","setHiddenValue","tag","value","val","verifySourceCourse","verifyDestCourse","new_params","getItem","coursename","jaxyRemotePromise","verifyDest","jqo","that","console","log","destname","courses","length","id","callNoti","message","type","verifySource","groupname","msg","groupid","updateHidden","new_value","find","attr","new_text","srcCourse","count","empty","first_choice","i","append","destCourse"],"mappings":"AAyBCA,OAAM,6BAAC,CAAC,QAAD,CAAW,oBAAX,CAAiC,2BAAjC,CAAD,CAEH,SAASC,CAAT,CAAYC,CAAZ,CAAmBC,CAAnB,CAAyB,CACzB,aACA,MAAO,CAQHC,aAAa,CAAE,wBAAY,CAEvB,GAAIC,CAAAA,CAAG,CAAGJ,CAAC,CAAC,gDAAD,CAAD,CAAoDK,IAApD,EAAV,CACAJ,CAAK,CAACK,cAAN,CAAqBF,CAArB,EAA0BG,IAA1B,CAA+B,SAAUC,CAAV,CAAoB,CAC/C,GAAI,IAAAA,CAAQ,CAACC,OAAb,CAA8B,CAC1BC,cAAc,CAACC,OAAf,CAAuB,cAAvB,CAAuCH,CAAQ,CAACI,IAAhD,EACAF,cAAc,CAACC,OAAf,CAAuB,YAAvB,CAAqCP,CAArC,CACH,CAGJ,CAPD,CAQH,CAnBE,CA0BHS,YAAY,CAAE,sBAAUC,CAAV,CAAkB,CAC5B,MAAOb,CAAAA,CAAK,CAACc,WAAN,CAAkB,CACrB,KAAQ,cADa,CAErB,OAAUD,CAFW,CAGrB,MAAS,QAHY,CAAlB,CAKV,CAhCE,CA0CHE,cAAc,CAAE,wBAAUC,CAAV,CAAeC,CAAf,CAAsB,CAClClB,CAAC,CAAC,cAAciB,CAAd,CAAkB,GAAnB,CAAD,CAAyBE,GAAzB,CAA6BD,CAA7B,CACH,CA5CE,CAoDHE,kBAAkB,CAAE,4BAAUN,CAAV,CAAkB,CAClC,MAAOb,CAAAA,CAAK,CAACc,WAAN,CAAkB,CACrB,KAAQ,cADa,CAErB,OAAUD,CAFW,CAGrB,MAAS,QAHY,CAAlB,CAKV,CA1DE,CA4DHO,gBAAgB,CAAE,0BAAUP,CAAV,CAAkB,CAChC,GAAIQ,CAAAA,CAAU,CAAG,CACb,KAAQ,KADK,CAEb,IAAOZ,cAAc,CAACa,OAAf,CAAuB,YAAvB,EAAuC,6BAFjC,CAGb,KAAQ,CACJ,QAAWb,cAAc,CAACa,OAAf,CAAuB,cAAvB,CADP,CAEJ,WAAc,kCAFV,CAGJ,mBAAsB,MAHlB,CAIJ,MAAS,WAJL,CAKJ,MAAST,CAAM,CAACU,UALZ,CAHK,CAAjB,CAWA,MAAOvB,CAAAA,CAAK,CAACwB,iBAAN,CAAwBH,CAAxB,CACT,CAzEC,CAoFHI,UAAU,CAAE,oBAAUC,CAAV,CAAe,CACvB,GAAIC,CAAAA,CAAI,CAAG,IAAX,CACAC,OAAO,CAACC,GAAR,CAAY,+BAAZ,CAA6CH,CAA7C,EACAE,OAAO,CAACC,GAAR,CAAY,iDAAZ,CAA+D,IAA/D,EACA,GAAIC,CAAAA,CAAQ,CAAG/B,CAAC,CAAC,yBAAD,CAAD,CAA6BmB,GAA7B,EAAf,CAEAS,CAAI,CAACP,gBAAL,CAAsB,CAClB,WAAcU,CADI,CAAtB,EAEGxB,IAFH,CAES,SAAUC,CAAV,CAAmB,CACxB,GAAK,WAAaA,CAAAA,CAAlB,CAA6B,CAEzB,GAA+B,CAA3B,EAAAA,CAAQ,CAACwB,OAAT,CAAiBC,MAArB,CAAkC,CAC9BL,CAAI,CAACZ,cAAL,CAAoB,cAApB,CAAoCR,CAAQ,CAACwB,OAAT,CAAiB,CAAjB,EAAoBE,EAAxD,EACAhC,CAAI,CAACiC,QAAL,CAAc,CACVC,OAAO,CAAE,kDADC,CAEVC,IAAI,CAAE,SAFI,CAAd,CAIH,CAND,IAMO,CACHnC,CAAI,CAACiC,QAAL,CAAc,CACVC,OAAO,CAAE,6DADC,CAEVC,IAAI,CAAE,MAFI,CAAd,CAIH,CACJ,CAdD,IAcO,CAEHnC,CAAI,CAACiC,QAAL,CAAc,CACVC,OAAO,CAAE,eAAiBL,CAAjB,CAA4B,2CAD3B,CAEVM,IAAI,CAAE,OAFI,CAAd,CAIH,CACJ,CAxBD,CAyBH,CAnHE,CAsHHC,YAAY,CAAE,sBAAUX,CAAV,CAAe,CACzB,GAAIC,CAAAA,CAAI,CAAG,IAAX,CACAC,OAAO,CAACC,GAAR,CAAY,iCAAZ,CAA+CH,CAA/C,EACAE,OAAO,CAACC,GAAR,CAAY,mDAAZ,CAAiE,IAAjE,EACA,GAAIN,CAAAA,CAAU,CAAGxB,CAAC,CAAC,wBAAD,CAAD,CAA4BmB,GAA5B,EAAjB,CACIoB,CAAS,CAAG,EADhB,CAGA,GAAkD,GAA9C,EAAA7B,cAAc,CAACa,OAAf,CAAuB,kBAAvB,CAAJ,CAAuD,CACnDgB,CAAS,CAAGvC,CAAC,CAAC,8BAAD,CAAD,CAAkCmB,GAAlC,EACf,CAFD,IAEO,CACHoB,CAAS,CAAGvC,CAAC,CAAC,wBAAD,CAAD,CAA4BmB,GAA5B,EACf,CAED,GAAwB,CAApB,CAAAK,CAAU,CAACS,MAAf,CAA2B,CAEvB/B,CAAI,CAACiC,QAAL,CAAc,CACVC,OAAO,CAAE,gDADC,CAEVC,IAAI,CAAE,OAFI,CAAd,EAIA,MACH,CAED,GAAuB,CAAnB,CAAAE,CAAS,CAACN,MAAd,CAA0B,CAEtB/B,CAAI,CAACiC,QAAL,CAAc,CACVC,OAAO,CAAE,yCADC,CAEVC,IAAI,CAAE,OAFI,CAAd,EAIA,MACH,CACDT,CAAI,CAACR,kBAAL,CAAwB,CACpB,WAAcI,CADM,CAEpB,UAAae,CAFO,CAAxB,EAGGhC,IAHH,CAGS,SAAUC,CAAV,CAAoB,CACzB,GAAI,IAAAA,CAAQ,CAACC,OAAb,CAA+B,CAC3BP,CAAI,CAACiC,QAAL,CAAc,CACVC,OAAO,CAAE5B,CAAQ,CAACgC,GADR,CAEVH,IAAI,CAAE,OAFI,CAAd,CAIH,CALD,IAKO,CAEHT,CAAI,CAACZ,cAAL,CAAoB,aAApB,CAAmCR,CAAQ,CAACI,IAAT,CAAcsB,EAAjD,EACAN,CAAI,CAACZ,cAAL,CAAoB,kBAApB,CAAwCR,CAAQ,CAACI,IAAT,CAAc6B,OAAtD,EACAvC,CAAI,CAACiC,QAAL,CAAc,CACVC,OAAO,CAAE,wDADC,CAEVC,IAAI,CAAE,SAFI,CAAd,CAIH,CACJ,CAlBD,CAmBH,CAvKE,CA0KHK,YAAY,CAAE,sBAAUf,CAAV,CAAe,IACrBC,CAAAA,CAAI,CAAG,IADc,CAIrBe,CAAS,CAAG3C,CAAC,CAAC2B,CAAD,CAAD,CAAOiB,IAAP,CAAY,iBAAZ,EAA+BC,IAA/B,CAAoC,OAApC,CAJS,CAKrBC,CAAQ,CAAG9C,CAAC,CAAC2B,CAAD,CAAD,CAAOiB,IAAP,CAAY,iBAAZ,EAA+BvC,IAA/B,EALU,CAMzBuB,CAAI,CAACZ,cAAL,CAAoB,oBAApB,CAA0C8B,CAA1C,EACAlB,CAAI,CAACZ,cAAL,CAAoB,kBAApB,CAAwC2B,CAAxC,CACH,CAlLE,CAoLHI,SAAS,CAAE,mBAAUpB,CAAV,CAAe,CACtB,GAAIC,CAAAA,CAAI,CAAG,IAAX,CAMA,GAAID,CAAG,CAACR,GAAJ,EAAJ,CAAe,CAEXS,CAAI,CAACf,YAAL,CAAkB,CACd,SAAYc,CAAG,CAACR,GAAJ,EADE,CAEd,WAAcnB,CAAC,CAAE,wCAAF,CAAD,CAA8CK,IAA9C,EAFA,CAAlB,EAGIE,IAHJ,CAGS,SAAUC,CAAV,CAAoB,CAEzB,GAAsB,CAAlB,EAAAA,CAAQ,CAACwC,KAAb,CAAyB,CAErBhD,CAAC,CAAC,8BAAD,CAAD,CAAkCmB,GAAlC,CAAsCX,CAAQ,CAACI,IAAT,CAAc2B,SAApD,EACAvC,CAAC,CAAC,wBAAD,CAAD,CAA4BmB,GAA5B,CAAgCX,CAAQ,CAACI,IAAT,CAAc2B,SAA9C,CAEH,CALD,IAKO,IAAqB,CAAjB,CAAA/B,CAAQ,CAACwC,KAAb,CAAwB,CAE3BhD,CAAC,CAAC,8BAAD,CAAD,CAAkCiD,KAAlC,GACA,GAAIC,CAAAA,CAAY,CAAG,EAAnB,CACA,IAAK,GAAIC,CAAAA,CAAT,GAAc3C,CAAAA,CAAQ,CAACI,IAAvB,CAA6B,CAEzB,GAAoB,EAAhB,EAAAsC,CAAJ,CAAwB,CACpBA,CAAY,CAAG,CACXT,OAAO,CAAEjC,CAAQ,CAACI,IAAT,CAAcuC,CAAd,EAAiBV,OADf,CAEXF,SAAS,CAAE/B,CAAQ,CAACI,IAAT,CAAcuC,CAAd,EAAiBZ,SAFjB,CAIlB,CACDvC,CAAC,CAAC,8BAAD,CAAD,CACKoD,MADL,CACYpD,CAAC,CAAC,mBAAD,CAAD,CACP6C,IADO,CACF,OADE,CACOrC,CAAQ,CAACI,IAAT,CAAcuC,CAAd,EAAiBV,OADxB,EAEPpC,IAFO,CAEFG,CAAQ,CAACI,IAAT,CAAcuC,CAAd,EAAiBZ,SAFf,CADZ,CAIH,CAIDX,CAAI,CAACZ,cAAL,CAAoB,oBAApB,CAA0CkC,CAAY,CAACX,SAAvD,EACAX,CAAI,CAACZ,cAAL,CAAoB,kBAApB,CAAwCkC,CAAY,CAACT,OAArD,CACH,CAKJ,CArCD,CAsCH,CAxCD,IAwCO,CAEHzC,CAAC,CAAC,8BAAD,CAAD,CAAkCiD,KAAlC,GACAjD,CAAC,CAAC,4BAAD,CAAD,CAAgCK,IAAhC,GACAL,CAAC,CAAC,8BAAD,CAAD,CACKoD,MADL,CACYpD,CAAC,CAAC,mBAAD,CAAD,CACP6C,IADO,CACF,OADE,CACO,CADP,EAEPxC,IAFO,CAEF,kCAFE,CADZ,CAIH,CACJ,CA5OE,CA8OHgD,UAAU,CAAE,oBAAU1B,CAAV,CAAe,CAEvBE,OAAO,CAACC,GAAR,CAAY,+BAAZ,CAA6CH,CAA7C,EACAE,OAAO,CAACC,GAAR,CAAY,iDAAZ,CAA+D,IAA/D,CACH,CAlPE,CAoPV,CAxPM,CAAN","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Cross Enrollment Tool\n *\n * @package    block_lsuxe\n * @copyright  2008 onwards Louisiana State University\n * @copyright  2008 onwards David Lowe\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n // define(['jquery', 'block_lsuxe/xe_lib', 'block_lsuxe/notifications', 'block_lsuxe/verify'],\n define(['jquery', 'block_lsuxe/xe_lib', 'block_lsuxe/notifications'],\n    // function($, XELib, Noti, Veri) {\n    function($, XELib, Noti) {\n    'use strict';\n    return {\n\n        /**\n         * Fetch the token for the current selected URL. Store in temp sessionStorage\n         *\n         * @param null\n         * @return void\n         */\n        getTokenReady: function () {\n            // Check to see if this is the first time landing or not.\n            var url = $('#id_available_moodle_instances option:selected').text();\n            XELib.getTokenForURL(url).then(function (response) {\n                if (response.success == true) {\n                    sessionStorage.setItem(\"currentToken\", response.data);\n                    sessionStorage.setItem(\"currentUrl\", url);\n                } else {\n                    // TODO: Send Notification to user that token is crap\n                }\n            });\n        },\n\n        /**\n         * Get group data from a course.\n         * @param {object} the json object sent to the server\n         * @return resolved data\n         */\n        getGroupData: function (params) {\n            return XELib.jaxyPromise({\n                'call': 'getGroupData',\n                'params': params,\n                'class': 'router'\n            });\n        },\n\n        /**\n         * Moodle removes any changed option/select elements. In order to maintain\n         * the data push data into hidden some that are in the form's page.\n         *\n         * @param {string} tag name of the tag to be changed\n         * @param {string} value the value to insert\n         * @return {void}\n         */\n        setHiddenValue: function (tag, value) {\n            $('input[name='+tag+']').val(value);\n        },\n\n        /**\n         * Verify the source course and group\n         *\n         * @param {object} params the json object sent to the server\n         * @return {Object} resolved data\n         */\n        verifySourceCourse: function (params) {\n            return XELib.jaxyPromise({\n                'call': 'verifyCourse',\n                'params': params,\n                'class': 'router'\n            });\n        },\n\n        verifyDestCourse: function (params) {\n            var new_params = {\n                'type': 'GET',\n                'url': sessionStorage.getItem(\"currentUrl\") + '/webservice/rest/server.php',\n                'data': {\n                    'wstoken': sessionStorage.getItem(\"currentToken\"),\n                    'wsfunction': 'core_course_get_courses_by_field',\n                    'moodlewsrestformat': 'json',\n                    'field': 'shortname',\n                    'value': params.coursename\n                }\n            };\n            return XELib.jaxyRemotePromise(new_params);\n         },\n\n        // ==================================================================\n        // ==================================================================\n        // ==================================================================\n        // ==================================================================\n        // ==================================================================\n        // ==================================================================\n        // ==================================================================\n        // ==================================================================\n\n        verifyDest: function (jqo) {\n            let that = this;\n            console.log(\"verifyDest() -> what is jqo: \", jqo);\n            console.log(\"mappings_form -> verifyDest() -> what is this: \", this);\n            var destname = $(\"#id_destcourseshortname\").val();\n\n            that.verifyDestCourse({\n                'coursename': destname\n            }).then( function (response){\n                if ((\"courses\" in response)) {\n                    // how many courses were retrieved\n                    if (response.courses.length == 1) {\n                        that.setHiddenValue('destcourseid', response.courses[0].id);\n                        Noti.callNoti({\n                            message: \"Destination course is there and waiting for you.\",\n                            type: 'success'\n                        });\n                    } else {\n                        Noti.callNoti({\n                            message: \"There seems to be more than one course with that shortname.\",\n                            type: 'warn'\n                        });\n                    }\n                } else {\n                    // FALSE\n                    Noti.callNoti({\n                        message: \"The course: \" + destname + \" was not found on the destination server.\",\n                        type: 'error'\n                    });\n                }\n            });\n        },\n\n        // Verify the Course and Group Names.\n        verifySource: function (jqo) {\n            let that = this;\n            console.log(\"verifySource() -> what is jqo: \", jqo);\n            console.log(\"mappings_form -> verifySource() -> what is this: \", this);\n            var coursename = $(\"#id_srccourseshortname\").val(),\n                groupname = \"\";\n\n            if (sessionStorage.getItem(\"xes_autocomplete\") == \"1\") {\n                groupname = $(\"#id_srccoursegroupnameselect\").val();\n            } else {\n                groupname = $(\"#id_srccoursegroupname\").val();\n            }\n\n            if (coursename.length < 1) {\n                // User forgot to enter a course name.\n                Noti.callNoti({\n                    message: \"Ooops, you forgot to enter a course short name\",\n                    type: 'error'\n                });\n                return;\n            }\n\n            if (groupname.length < 1) {\n                // User forgot to enter a course name.\n                Noti.callNoti({\n                    message: \"Ooops, you forgot to enter a group name\",\n                    type: 'error'\n                });\n                return;\n            }\n            that.verifySourceCourse({\n                'coursename': coursename,\n                'groupname': groupname\n            }).then( function (response) {\n                if (response.success == false) {\n                    Noti.callNoti({\n                        message: response.msg,\n                        type: 'error'\n                    });\n                } else {\n                    // Populate the hidden fields since we are here.\n                    that.setHiddenValue('srccourseid', response.data.id);\n                    that.setHiddenValue('srccoursegroupid', response.data.groupid);\n                    Noti.callNoti({\n                        message: \"Everything checks out for the sourse course and group.\",\n                        type: 'success'\n                    });\n                }\n            });\n        },\n\n        // Any changes to the group element, update the hidden.\n        updateHidden: function (jqo) {\n            let that = this;\n            // console.log(\"updateHidden() -> what is jqo: \", jqo);\n            // console.log(\"mappings_form -> updateHidden() -> what is this: \", this);\n            var new_value = $(jqo).find(\"option:selected\").attr('value');\n            var new_text = $(jqo).find(\"option:selected\").text();\n            that.setHiddenValue('srccoursegroupname', new_text);\n            that.setHiddenValue('srccoursegroupid', new_value);\n        },\n\n        srcCourse: function (jqo) {\n            var that = this;\n            // $(this).children(\"option:selected\").text();\n            // $(this).find(\":selected\").val();\n            // $(this).val();\n\n            // if ($(this).val()) {\n            if (jqo.val()) {\n                // change invokes any change so only make an ajax call if there is value\n                that.getGroupData({\n                    'courseid': jqo.val(),\n                    'coursename': $( \"#id_srccourseshortname option:selected\" ).text()\n                },).then(function (response) {\n                    // if the text is disabled then use select\n                    if (response.count == 1) {\n                        // Single entry so let's update the text field\n                        $('#id_srccoursegroupnameselect').val(response.data.groupname);\n                        $('#id_srccoursegroupname').val(response.data.groupname);\n\n                    } else if (response.count > 1) {\n                        // Multiple groups, so let's unhide the select\n                        $('#id_srccoursegroupnameselect').empty();\n                        var first_choice = \"\";\n                        for (let i in response.data) {\n                            // This is to store the first select and to be used.\n                            if (first_choice == \"\") {\n                                first_choice = {\n                                    groupid: response.data[i].groupid,\n                                    groupname: response.data[i].groupname\n                                };\n                            }\n                            $('#id_srccoursegroupnameselect')\n                                .append($(\"<option></option>\")\n                                .attr(\"value\", response.data[i].groupid)\n                                .text(response.data[i].groupname));\n                        }\n\n                        // Now that it's been populated, set the hidden elements to match the first\n                        // select option.\n                        that.setHiddenValue('srccoursegroupname', first_choice.groupname);\n                        that.setHiddenValue('srccoursegroupid', first_choice.groupid);\n                    } else {\n                        // TODO: The count is neither 1 or greate than 1 so no groups?\n                        // display no groups.\n                    }\n\n                });\n            } else {\n                // if there is no value in the course name then clear out the group name.\n                $('#id_srccoursegroupnameselect').empty();\n                $('#id_srccoursegroupnametext').text();\n                $('#id_srccoursegroupnameselect')\n                    .append($(\"<option></option>\")\n                    .attr(\"value\", 0)\n                    .text(\"Please search for a course first\"));\n            }\n        },\n\n        destCourse: function (jqo) {\n            // let that = this;\n            console.log(\"destCourse() -> what is jqo: \", jqo);\n            console.log(\"mappings_form -> destCourse() -> what is this: \", this);\n        },\n    };\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],"file":"mappings_form.min.js"}