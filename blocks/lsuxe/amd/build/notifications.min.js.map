{"version":3,"sources":["../src/notifications.js"],"names":["define","$","notification","MF","ME","callRemoveModi","data","this_data","promiseObj","Promise","resolve","console","log","create","type","types","SAVE_CANCEL","title","body","then","modal","setSaveButtonText","root","getRoot","on","save","show","callNoti","hasOwnProperty","addNotification","storeMsg","sessionStorage","setItem","success","msg","showMsg","getItem","message","removeItem"],"mappings":"AAsBCA,OAAM,6BAAC,CAAC,QAAD,CAAW,mBAAX,CAAgC,oBAAhC,CAAsD,mBAAtD,CAAD,CAA6E,SAASC,CAAT,CAAYC,CAAZ,CAA0BC,CAA1B,CAA8BC,CAA9B,CAAkC,CAClH,aAEA,MAAO,CAaHC,cAAc,CAAE,wBAASC,CAAT,CAAe,IACvBC,CAAAA,CAAS,CAAGD,CADW,CAEvBE,CAAU,CAAG,GAAIC,CAAAA,OAAJ,CAAY,SAAUC,CAAV,CAAmB,CAE5CC,OAAO,CAACC,GAAR,CAAY,qCAAZ,CAAmDN,CAAnD,EACAH,CAAE,CAACU,MAAH,CAAU,CACNC,IAAI,CAAEX,CAAE,CAACY,KAAH,CAASC,WADT,CAENC,KAAK,CAAE,aAFD,CAGNC,IAAI,CAAE,+BAHA,CAAV,EAKCC,IALD,CAKM,SAASC,CAAT,CAAgB,CAElBA,CAAK,CAACC,iBAAN,CAAwB,QAAxB,EACA,GAAIC,CAAAA,CAAI,CAAGF,CAAK,CAACG,OAAN,EAAX,CACAD,CAAI,CAACE,EAAL,CAAQpB,CAAE,CAACqB,IAAX,CAAiB,UAAW,CACxBd,OAAO,CAACC,GAAR,CAAY,oCAAZ,CAAkDL,CAAlD,EACAG,CAAO,CAAC,CAAC,SAAD,CAAiB,KAAQH,CAAzB,CAAD,CACV,CAHD,EAQAa,CAAK,CAACM,IAAN,EACH,CAlBD,CAmBH,CAtBgB,CAFU,CAyB3B,MAAOlB,CAAAA,CACV,CAvCE,CAoDHmB,QAAQ,CAAE,kBAASrB,CAAT,CAAe,CACrB,GAAI,CAACA,CAAI,CAACsB,cAAL,CAAoB,SAApB,CAAL,CAAqC,CACjCjB,OAAO,CAACC,GAAR,CAAY,iEAAZ,CACH,CACD,GAAI,CAACN,CAAI,CAACsB,cAAL,CAAoB,MAApB,CAAL,CAAkC,CAE9BtB,CAAI,CAACQ,IAAL,CAAY,MACf,CACDZ,CAAY,CAAC2B,eAAb,CAA6BvB,CAA7B,CACH,CA7DE,CAoEHwB,QAAQ,CAAE,kBAASxB,CAAT,CAAe,CAErByB,cAAc,CAACC,OAAf,CAAuB,qBAAvB,CAA8C1B,CAAI,CAAC2B,OAAnD,EACAF,cAAc,CAACC,OAAf,CAAuB,iBAAvB,CAA0C1B,CAAI,CAAC4B,GAA/C,CACH,CAxEE,CA8EHC,OAAO,CAAE,kBAAW,CAEhB,GAAIJ,cAAc,CAACK,OAAf,CAAuB,iBAAvB,CAAJ,CAA+C,CAC3C,KAAKT,QAAL,CAAc,CACVU,OAAO,CAAEN,cAAc,CAACK,OAAf,CAAuB,iBAAvB,CADC,CAEVtB,IAAI,CAAEiB,cAAc,CAACK,OAAf,CAAuB,qBAAvB,CAFI,CAAd,EAKAL,cAAc,CAACO,UAAf,CAA0B,iBAA1B,EACAP,cAAc,CAACO,UAAf,CAA0B,qBAA1B,CACH,CACJ,CAzFE,CA2FV,CA9FM,CAAN","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @package    block_lsuxe Cross Enrollment\n * @copyright  2008 onwards Louisiana State University\n * @copyright  2008 onwards David Lowe\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n define(['jquery', 'core/notification', 'core/modal_factory', 'core/modal_events'], function($, notification, MF, ME) {\n    'use strict';\n\n    return {\n\n        /**\n         * To remove a record let's confirm that the user wants to do this.\n         * Type can be either: success, warning, info, error\n         *  Example:\n         *  noti.callNoti({\n         *      message: \"This is a success test\",\n         *      type: \"success\"\n         *  });\n         * @param {obj} A simple object with the 'message' and 'type' of notification.\n         * @return void\n         */\n        callRemoveModi: function(data) {\n            var this_data = data;\n            var promiseObj = new Promise(function (resolve) {\n\n                console.log(\"What is the data passed into Modi: \", data);\n                MF.create({\n                    type: MF.types.SAVE_CANCEL,\n                    title: 'Delete item',\n                    body: 'Do you really want to delete?',\n                })\n                .then(function(modal) {\n                // .then(function() {\n                    modal.setSaveButtonText('Delete');\n                    var root = modal.getRoot();\n                    root.on(ME.save, function() {\n                        console.log(\"Do we have the data object still: \", this_data);\n                        resolve({\"status\": true, \"data\": this_data});\n                    });\n                    // root.on(ME.cancel, function() {\n                    //     console.log(\"The button was cancelled\");\n                    //     resolve({\"status\": false});\n                    // });\n                    modal.show();\n                });\n            });\n            return promiseObj;\n        },\n\n        /**\n         * A simple way to call the Moodle core notification system.\n         * Type can be either: success, warning, info, error\n         *  Example:\n         *  noti.callNoti({\n         *      message: \"This is a success test\",\n         *      type: \"success\"\n         *  });\n         * @param {obj} A simple object with the 'message' and 'type' of notification.\n         * @return void\n         */\n        callNoti: function(data) {\n            if (!data.hasOwnProperty('message')) {\n                console.log(\"ERROR -> Notification was called but with no message, aborting.\");\n            }\n            if (!data.hasOwnProperty('type')) {\n                // default to info\n                data.type = \"info\";\n            }\n            notification.addNotification(data);\n        },\n        /**\n         * Store the reponse object to showcase a message after reload.\n         * @param {obj} Server Response {'success', 'data', 'msg'}\n         *\n         * @return void\n         */\n        storeMsg: function(data) {\n            // Save data to sessionStorage\n            sessionStorage.setItem('sent_delete_success', data.success);\n            sessionStorage.setItem('sent_delete_msg', data.msg);\n        },\n        /**\n         *  If a message is stored then show the notification and remove it.\n         * @param void\n         * @return void\n         */\n        showMsg: function() {\n            // Save data to sessionStorage\n            if (sessionStorage.getItem('sent_delete_msg')) {\n                this.callNoti({\n                    message: sessionStorage.getItem('sent_delete_msg'),\n                    type: sessionStorage.getItem('sent_delete_success')\n                });\n                // Remove saved data from sessionStorage\n                sessionStorage.removeItem('sent_delete_msg');\n                sessionStorage.removeItem('sent_delete_success');\n            }\n        }\n    };\n});"],"file":"notifications.min.js"}