{"version":3,"file":"options.min.js","sources":["../src/options.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Options helper for the Moodle tiny_wordimport plugin.\n *\n * @module      tiny_wordimport/options\n * @copyright   2023 University of Graz\n * @author      Andr√© Menrath <andre.menrath@uni-graz.at>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {\n    getPluginOptionName,\n} from 'editor_tiny/options';\n\nimport {pluginName} from './common';\n\n// Helper variables for the option names.\nconst heading1StyleLevelName = getPluginOptionName(pluginName, 'heading1StyleLevel');\nconst wordFilePickerOptionName = getPluginOptionName(pluginName, 'wordFilePickerOption');\n\n/**\n * Options registration function.\n *\n * @param {tinyMCE} editor\n */\nexport const register = (editor) => {\n    const registerOption = editor.options.register;\n    const getOption = editor.options.get;\n    const setOption = editor.options.set;\n    const filePickers = 'moodle:filepickers';\n\n    // For each option, register it with the editor.\n    // Valid type are defined in https://www.tiny.cloud/docs/tinymce/6/apis/tinymce.editoroptions/\n    registerOption(heading1StyleLevelName, {\n        processor: 'int',\n    });\n\n    registerOption(wordFilePickerOptionName, {\n        processor: 'object',\n        \"default\": {},\n    });\n\n    // Get the current filepicker setting which contains the allowed upload file types.\n    var filepicker = getOption(filePickers);\n    // Add docx as additional file type to the allowance list for uploads.\n    filepicker.docx = getWordFilePickerOption(editor);\n    // Update the filepicker option.\n    setOption(filePickers, filepicker);\n};\n\n/**\n * Fetch the heading1StyleLevel value for this editor instance.\n *\n * @param {tinyMCE} editor The editor instance to fetch the value for\n * @returns {object} The value of the heading1StyleLevel option\n */\nexport const getHeading1StyleLevel = (editor) => editor.options.get(heading1StyleLevelName);\n\n/**\n * Fetch the wordFilePickerOptionName value for this editor instance.\n *\n * @param {tinyMCE} editor The editor instance to fetch the value for\n * @returns {object} The value of the heading1StyleLevel option\n */\nexport const getWordFilePickerOption = (editor) => editor.options.get(wordFilePickerOptionName);\n\nconst permissionsName = getPluginOptionName('tiny_media/plugin', 'permissions');\n\n/**\n * Get the permissions configuration for the Tiny Word Import plugin.\n *\n * @param {TinyMCE} editor\n * @returns {object}\n */\nexport const getEmbedPermissions = (editor) => editor.options.get(permissionsName);\n"],"names":["heading1StyleLevelName","pluginName","wordFilePickerOptionName","editor","registerOption","options","register","getOption","get","setOption","set","processor","filepicker","docx","getWordFilePickerOption","permissionsName"],"mappings":";;;;;;;;;MA+BMA,wBAAyB,gCAAoBC,mBAAY,sBACzDC,0BAA2B,gCAAoBD,mBAAY,0CAOxCE,eACfC,eAAiBD,OAAOE,QAAQC,SAChCC,UAAYJ,OAAOE,QAAQG,IAC3BC,UAAYN,OAAOE,QAAQK,IAKjCN,eAAeJ,uBAAwB,CACnCW,UAAW,QAGfP,eAAeF,yBAA0B,CACrCS,UAAW,iBACA,SAIXC,WAAaL,UAdG,sBAgBpBK,WAAWC,KAAOC,wBAAwBX,QAE1CM,UAlBoB,qBAkBGG,4CASWT,QAAWA,OAAOE,QAAQG,IAAIR,8BAQvDc,wBAA2BX,QAAWA,OAAOE,QAAQG,IAAIN,yFAEhEa,iBAAkB,gCAAoB,oBAAqB,4CAQ7BZ,QAAWA,OAAOE,QAAQG,IAAIO"}