{"version":3,"file":"options.min.js","sources":["../src/options.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny Wordlimit option.\n *\n * @module    tiny_wordlimit/common\n * @copyright 2023 University of Graz\n * @author    Andr√© Menrath <andre.menrath@uni-graz.at>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getPluginOptionName} from 'editor_tiny/options';\nimport {pluginName} from './common';\n\nconst EDITOR_NAME_PATTERN_QUIZ = /q([0-9]+).([0-9]+)_answer/;\nconst MOD_QUIZ_ATTEMPT_PATH = '/mod/quiz/';\n\n// Helper variable for the word limits option.\nconst wordLimitsName = getPluginOptionName(pluginName, 'wordLimits');\n\n/**\n * Options registration function.\n *\n * @param {tinyMCE} editor\n */\nexport const register = (editor) => {\n    const registerOption = editor.options.register;\n\n    registerOption(wordLimitsName, {\n        processor: 'object',\n    });\n};\n\n/**\n * Fetch the Wordlimits for this page.\n *\n * @param   {tinyMCE} editor The editor instance.\n * @returns {object}  The values of the wordlimits.\n */\nconst getWordLimits = (editor) => editor.options.get(wordLimitsName);\n\n/**\n * Fetch the maximum word limit for this editor instance.\n *\n * In a quiz there might be multiple slots/questions: in the backend during the\n * editor setup the current slot is not available in the scope, so we have to\n * extract the current questions wordlimit here.\n *\n *\n * @param   {tinyMCE} editor The editor instance to fetch the value for.\n * @returns {int}     The value of the maximum word limit.\n */\nexport const getWordLimit = (editor) => {\n    const wordLimits = getWordLimits(editor);\n    if (wordLimits) {\n        if (isQuizQuestionEditor(editor)) {\n            // In a quiz, we have all set wordlimits for (multiple) questions/slots\n            // passed as an editor option.\n            const [, , slot] = EDITOR_NAME_PATTERN_QUIZ.exec(editor.targetElm.name);\n            const wordlimit = wordLimits[slot];\n            return wordlimit;\n        }\n        // Only one wordlimit per page (online submission within assignment).\n        return wordLimits[1];\n    }\n    // No wordlimit present for this editor instance.\n    return null;\n};\n\n/**\n * Checks if the current editor is a essay question of a quiz.\n *\n * @param   {tinyMCE} editor The editor instance to fetch the value for.\n * @returns {boolean}\n */\nconst isQuizQuestionEditor = (editor) => {\n    if (editor.documentBaseURI.path === MOD_QUIZ_ATTEMPT_PATH &&\n        EDITOR_NAME_PATTERN_QUIZ.test(editor.targetElm.name)) {\n        return true;\n    }\n    return false;\n};\n"],"names":["EDITOR_NAME_PATTERN_QUIZ","wordLimitsName","pluginName","editor","registerOption","options","register","processor","wordLimits","get","getWordLimits","isQuizQuestionEditor","slot","exec","targetElm","name","documentBaseURI","path","test"],"mappings":";;;;;;;;;MA2BMA,yBAA2B,4BAI3BC,gBAAiB,gCAAoBC,mBAAY,gCAO9BC,UAGrBC,EAFuBD,OAAOE,QAAQC,UAEvBL,eAAgB,CAC3BM,UAAW,kCAuBUJ,eACnBK,WAdaL,CAAAA,QAAWA,OAAOE,QAAQI,IAAIR,gBAc9BS,CAAcP,WAC7BK,WAAY,IACRG,qBAAqBR,QAAS,SAGnBS,MAAQZ,yBAAyBa,KAAKV,OAAOW,UAAUC,aAChDP,WAAWI,aAI1BJ,WAAW,UAGf,YASLG,qBAAwBR,UA5DA,eA6DtBA,OAAOa,gBAAgBC,OACvBjB,yBAAyBkB,KAAKf,OAAOW,UAAUC"}