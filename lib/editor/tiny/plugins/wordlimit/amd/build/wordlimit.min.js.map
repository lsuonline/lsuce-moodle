{"version":3,"file":"wordlimit.min.js","sources":["../src/wordlimit.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Setup functionality for the Wordlimit plugin for the Moodle TinyMCE 6 editor.\n * If a word limit exists, a hook is registered in the editor to check if the word limit\n * has been exceeded frequently if the editor content gets updated.\n *\n * @module    tiny_wordlimit/setup\n * @copyright 2023 University of Graz\n * @author    Andr√© Menrath <andre.menrath@uni-graz.at>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {addWordLimitElement, updateWordCountAlert} from 'tiny_wordlimit/ui';\nimport {getWordLimit} from './options';\n\nconst UPDATE_WORDCOUNT_STATUS_DELAY = 500;\n\nexport const setupWordLimit = (editor) => {\n    // The editor options are available at the moment the construction of the editor begins.\n    const wordLimit = getWordLimit(editor);\n    if (wordLimit) {\n        registerWordLimitEvents(editor, wordLimit);\n    }\n};\n\nconst registerWordLimitEvents = (editor, wordLimit) => {\n    // Register a throttled hook that checks if the word limit has been exceeded and visually indicates if it has.\n    const updateWordCountAlertWithDelay = throttleWithCancel(\n        () => updateWordCountAlert(editor, wordLimit),\n        UPDATE_WORDCOUNT_STATUS_DELAY\n    );\n\n    const tinymceUtilDelay = window.tinymce.util.Tools.resolve('tinymce.util.Delay');\n\n    editor.on('init', () => {\n        addWordLimitElement(editor, wordLimit);\n        tinymceUtilDelay.setEditorTimeout(\n            editor, () => {\n                editor.on('SetContent BeforeAddUndo Undo Redo ViewUpdate keyup', updateWordCountAlertWithDelay.throttle);\n            }, 0);\n        editor.on('remove', updateWordCountAlertWithDelay.cancel);\n        updateWordCountAlert(editor, wordLimit);\n    });\n};\n\nconst throttleWithCancel = (callback, rate) => {\n    let timer = null;\n\n    const cancel = () => {\n      if (timer) {\n        clearTimeout(timer);\n        timer = null;\n      }\n    };\n\n    const throttle = (...args) => {\n      if (!timer) {\n        timer = setTimeout(() => {\n          timer = null;\n          callback(...args);\n        }, rate);\n      }\n    };\n\n    return {\n      cancel,\n      throttle\n    };\n};\n"],"names":["editor","wordLimit","registerWordLimitEvents","updateWordCountAlertWithDelay","throttleWithCancel","tinymceUtilDelay","window","tinymce","util","Tools","resolve","on","setEditorTimeout","throttle","cancel","callback","rate","timer","clearTimeout","args","setTimeout"],"mappings":"8NA+B+BA,eAErBC,WAAY,yBAAaD,QAC3BC,WACAC,wBAAwBF,OAAQC,kBAIlCC,wBAA0B,CAACF,OAAQC,mBAE/BE,8BAAgCC,oBAClC,KAAM,4BAAqBJ,OAAQC,YAbL,KAiB5BI,iBAAmBC,OAAOC,QAAQC,KAAKC,MAAMC,QAAQ,sBAE3DV,OAAOW,GAAG,QAAQ,iCACMX,OAAQC,WAC5BI,iBAAiBO,iBACbZ,QAAQ,KACJA,OAAOW,GAAG,sDAAuDR,8BAA8BU,YAChG,GACPb,OAAOW,GAAG,SAAUR,8BAA8BW,qCAC7Bd,OAAQC,eAI/BG,mBAAqB,CAACW,SAAUC,YAC9BC,MAAQ,WAkBL,CACLH,OAjBa,KACTG,QACFC,aAAaD,OACbA,MAAQ,OAeVJ,SAXe,yCAAIM,6CAAAA,2BACdF,QACHA,MAAQG,YAAW,KACjBH,MAAQ,KACRF,YAAYI,QACXH"}