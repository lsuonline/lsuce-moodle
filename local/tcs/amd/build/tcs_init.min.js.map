{"version":3,"sources":["../src/tcs_init.js"],"names":["define","$","jaxy","rendy","autocomp","tcs_user_hash","tcs_dash_hash","loadEventListeners","click","toggleClass","processURL","clicked_link","current_url","title","substring","indexOf","replace","window","location","history","pushState","id","on","e","preventDefault","attr","href","data","processPage","addEventListener","state","cleanURL","this_pager","replaceState","setUsers","users","tcs_users","localStorage","JSON","stringify","setUserHash","hash","processUserStore","user_hash","stored_user_hash","getItem","call_ajax","stored_users","that","parse","initiateAutoComp","tcsAjax","then","response","preLoadConfig","final_state","window_stat","__SERVER__","__INITIAL_STATE__","Object","assign","sideBarShow","error","console","log","dash_hash","enter_to_finish","dash_refresh_rate","is_admin","is_tc_admin","redirect_page","showPage","postLoadConfig"],"mappings":"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","sourcesContent":["define([\n    'jquery',\n    'local_tcs/jaxy',\n    'local_tcs/renderer',\n    'local_tcs/tcs_autocomp_stud',\n    // 'local_tcs/iziToast',\n// ], function ($, jaxy, autocomp, iziToast) {\n], function ($, jaxy, rendy, autocomp) {\n    'use strict';\n    /* eslint-disable */\n    var tcs_users = \"\",\n        // hashes\n        tcs_user_hash = \"\",\n        tcs_dash_hash = \"\";\n        // tcs_s_table_hash = \"\";\n    /* eslint-enable */\n\n    return {\n        // EXAMPLES\n        // localStorage[\"mydatas\"] = JSON.stringify(mydatas);\n        // var datas = JSON.parse(localStorage[\"mydatas\"]);\n\n        /**\n         * Registered Event Listeners\n         *\n         * Valid args are:\n         * int example 1     Only get events for this course\n         * int example 2     Only get events after this time\n         *\n         * @method fetchSWE\n         * @param {object} args The request arguments\n         * @return {promise} Resolved with an array of the calendar events\n         */\n        loadEventListeners: function () {\n            // console.log(\"------------------------------------------------------\");\n            // console.log(\"loadEventListeners() -> START --------(ONLY CALLED ONCE)\");\n            // console.log(\"------------------------------------------------------\");\n\n            $('[data-toggle=offcanvas]').click(function() {\n                $('.row-offcanvas').toggleClass('active');\n            });\n\n            function processURL(clicked_link, current_url, title){\n                // console.log(\"processURL() -> Hello from the processURL function\");\n                // console.log(\"processURL() -> clicked_link is: \" + clicked_link);\n                // console.log(\"processURL() -> current_url is: \" + current_url);\n                // console.log(\"processURL() -> title is: \" + title);\n\n                var current_url = current_url.substring(0, current_url.indexOf(\"/tcs/\") + 5);\n                var clicked_link = clicked_link.replace(/#/g,'');\n                // console.log(\"processURL() -> POST -> What is the url: \" + current_url);\n                // console.log(\"processURL() -> POST -> What is the sidebar link: \" + clicked_link);\n\n                if (title == \"Back To Moodle\") {\n                    window.location.replace(clicked_link);\n                    return;\n                }\n\n                window.history.pushState({\n                    id: clicked_link\n                }, title, current_url + clicked_link + \"/\");\n                // window.history.pushState({\n                //     id: clicked_link\n                // }, title, current_url + \"page/\" + clicked_link + \"/\");\n            }\n\n            // console.log(\"tcs_init -> loadEventListeners() -> What is the window location: \" + window.location);\n            // console.log(\"tcs_init -> loadEventListeners() -> What is the window location href: \" + window.location.href);\n\n            // this is to switch the page\n            $('#tcs_links .nav-link').on(\"click\", function(e) {\n\n                // console.log(\"tcs_init -> loadEventListeners() -> CLICK\");\n                e.preventDefault();\n                processURL($(this).attr('href'), window.location.href, $(this).data(\"page_title\"));\n\n                // Change the Dashboard title based on the link\n                rendy.processPage($(this).data(\"link\"));\n            });\n\n            window.addEventListener('popstate', function () {\n                // console.log(\"tcs_init -> loadEventListeners() -> POPSTATE\");\n                if (history.state && history.state.id === 'Dashboard') {\n                    // Render new content for the hompage\n                }\n                // console.log(\"tcs_init -> loadEventListeners() -> Popstate has been envoked\");\n                // console.log(\"tcs_init -> loadEventListeners() -> what is the event: \", event);\n            }, false);\n        },\n\n        /**\n         * Description Here\n         *\n         * Valid args are:\n         * int example 1     Only get events for this course\n         * int example 2     Only get events after this time\n         *\n         * @method fetchSWE\n         * @param {object} args The request arguments\n         * @return {promise} Resolved with an array of the calendar events\n         */\n        cleanURL: function (this_pager) {\n            // The URL could be like this:\n            // console.log(\"tcs_init -> cleanURL()==============================>>>>>>>\");\n            // console.log(\"tcs_init -> cleanURL() -> page = \" + this_pager);\n\n            var current_url = window.location;\n            // console.log(\"tcs_init -> cleanURL() -> current_url.href: \" + current_url.href);\n\n            current_url = current_url.href.replace(/index.php\\?page\\=/, \"\");\n\n            // console.log(\"tcs_init -> cleanURL() -> what is fooker: \" + current_url);\n            current_url = current_url + \"/\";\n\n            // state, pageTitle, url\n            window.history.replaceState({\"page\": this_pager}, this_pager, current_url);\n\n            // console.log(\"tcs_init -> cleanURL() DID WE CHANGE THE URL: \" + window.location);\n            // console.log(\"tcs_init -> cleanURL()==============================<<<<<<<\");\n        },\n\n        /**\n         * Description Here\n         *\n         * Valid args are:\n         * int example 1     Only get events for this course\n         * int example 2     Only get events after this time\n         *\n         * @method fetchSWE\n         * @param {object} args The request arguments\n         * @return {promise} Resolved with an array of the calendar events\n         */\n        setUsers: function (users) {\n            // console.log(\"config -> setUsers() -> Storing users in localCache\");\n            this.tcs_users = users;\n            localStorage[\"tcs_users\"] = JSON.stringify(users);\n        },\n\n        /**\n         * Description Here\n         *\n         * Valid args are:\n         * int example 1     Only get events for this course\n         * int example 2     Only get events after this time\n         *\n         * @method fetchSWE\n         * @param {object} args The request arguments\n         * @return {promise} Resolved with an array of the calendar events\n         */\n        setUserHash: function (hash) {\n            // console.log(\"config -> setUserHash() -> Storing user hash in localCache\");\n            this.tcs_user_hash = hash;\n            localStorage[\"tcs_user_hash\"] = hash;\n        },\n\n        /**\n         * Description Here\n         *\n         * Valid args are:\n         * int example 1     Only get events for this course\n         * int example 2     Only get events after this time\n         *\n         * @method fetchSWE\n         * @param {object} args The request arguments\n         * @return {promise} Resolved with an array of the calendar events\n         */\n        processUserStore: function(user_hash) {\n            // console.log(\"processUserStore() -> What is the user hash: \" + user_hash);\n            var stored_user_hash = localStorage.getItem('tcs_user_hash'),\n                call_ajax = false,\n                stored_users = false,\n                that = this;\n\n            if (stored_user_hash) {\n                // console.log(\"processUserStore() -> user hash was stored\");\n                // TODO: check if this hash is the same as passed in hash\n                if (user_hash != stored_user_hash) {\n                    // console.log(\"processUserStore() -> stored user hash DOES NOT EQUAL passed in hash\");\n                    // Must get new fresh students\n                    call_ajax = true;\n                } else {\n                    // users are stored so let's load them up\n                    stored_users = localStorage.getItem('tcs_users');\n                    if (stored_users) {\n                        // store the users in config\n                        this.tcs_users = JSON.parse(stored_users);\n                        autocomp.initiateAutoComp(this.tcs_users);\n                    } else {\n                        // TODO: Make Ajax call to get users\n                        call_ajax = true;\n                    }\n                }\n            } else {\n                call_ajax = true;\n            }\n\n            if (call_ajax) {\n                jaxy.tcsAjax(JSON.stringify({\n                    'call': 'loadUsers',\n                    'params': {\n                        'ax': true,\n                        // 'ax': false,\n                        'page': 0,\n                        'total': 0\n                    },\n                    'class': 'StudentListAjax',\n                })).then(function(response) {\n                    // console.log(\"freshProm THEN **************************************************\");\n                    // console.log(\"processUserStore() -> returned from ajax AND PROMISE, what is response: \", response);\n                    // console.log(\"freshProm THEN **************************************************\");\n                    that.setUsers(response.users);\n                    that.setUserHash(response.hash);\n                    // TODO: this will need to be loaded into the autocomplete library\n                    autocomp.initiateAutoComp(response.users);\n                });\n            }\n        },\n\n\n        /**\n         * Description Here\n         *\n         * Valid args are:\n         * int example 1     Only get events for this course\n         * int example 2     Only get events after this time\n         *\n         * @method fetchSWE\n         * @param {object} args The request arguments\n         * @return {promise} Resolved with an array of the calendar events\n         */\n        preLoadConfig: function() {\n\n            // first let's unload the global vars to js from PHP\n            var temp_state = {sideBarShow: \"in\"},\n                final_state = {},\n                window_stat = {};\n                // big_dump = \"\",\n                // stored_templates = \"\";\n\n            if (window.__SERVER__ === \"true\" || window.__SERVER__ === true) {\n                if (typeof (window.__INITIAL_STATE__) === 'string') {\n                    try {\n                        // console.log(\"preLoadConfig() -> What is the __INITIAL_STATE__: \", __INITIAL_STATE__);\n                        // console.log(\"store_general -> What is the __INITIAL_STATE__.table: \", __INITIAL_STATE__.table_data);\n\n                        window_stat = JSON.parse(window.__INITIAL_STATE__);\n                        final_state = Object.assign(temp_state, window_stat);\n                        // console.log(\"store_general -> What is the final state here: \", final_state);\n                        delete window.__INITIAL_STATE__;\n                        window.__SERVER__ = false;\n                    } catch (error) {\n                        console.log(\"ERROR, __INITIAL_STATE__ couldn't parse.\");\n                        console.log(error);\n                    }\n                }\n            } else {\n                console.log(\"WARNING: window.__SERVER__ was not set\");\n            }\n\n\n            // ----------- Store Hash Tokens Here ---------------\n            // console.log(\"tcs_init -> going to save the hashes.\");\n            tcs_user_hash = final_state.user_hash['t_value'];\n            tcs_dash_hash = final_state.dash_hash['t_value'];\n            // tcs_s_table_hash = final_state.s_table_hash['t_value'];\n\n            localStorage[\"enter_to_finish\"] = final_state.enter_to_finish;\n            localStorage[\"dash_refresh_rate\"] = final_state.dash_refresh_rate;\n            localStorage[\"tcs_dash_hash\"] = tcs_dash_hash;\n\n\n            // ----------- Get Admin Status ---------------\n            // is the user admin?\n            localStorage[\"tcs_admin_user\"] = final_state.is_admin == true ? true : false;\n            // console.log(\"TCS INIT -> Is the user admin: \" + localStorage[\"tcs_admin_user\"]);\n\n            // if (final_state.is_admin == true) {\n            //     console.log(\"TCS INIT -> YES, they are admin \" + final_state.is_admin);\n            //     localStorage[\"tcs_admin_user\"] = true;\n            // } else {\n            //     console.log(\"TCS INIT -> NOOOOOOO, they are NOT admin \" + final_state.is_admin);\n            //     localStorage[\"tcs_admin_user\"] = false;\n            // }\n\n\n            localStorage[\"tcs_tc_admin_user\"] = final_state.is_tc_admin == true ? true : false;\n            // console.log(\"TCS INIT -> Is the user TC admin: \" + localStorage[\"tcs_tc_admin_user\"]);\n\n\n            // console.log(\"What is admin type: \" + typeof localStorage[\"tcs_admin_user\"]);\n            // console.log(\"What is tc admin type: \" + typeof localStorage[\"tcs_tc_admin_user\"]);\n            // if (final_state.is_tc_admin == true) {\n            //     console.log(\"TCS INIT -> YES, they are admin \" + final_state.is_tc_admin);\n            // } else {\n            //     console.log(\"TCS INIT -> NOOOOOOO, they are NOT admin \" + final_state.is_tc_admin);\n            // }\n\n            // localStorage[\"tcs_s_table_hash\"] = tcs_s_table_hash;\n            // check user hash, fetch users from local or ajax and store in config\n            // console.log(\"preLoadConfig() -> Going to process User Store Now\");\n\n            if (localStorage[\"tcs_admin_user\"] == \"true\" || localStorage[\"tcs_tc_admin_user\"] == \"true\") {\n                console.log(\"Going to initiate the auto complete for users\");\n                this.processUserStore(tcs_user_hash);\n            } else {\n                console.log(\"WARNING - User is not admin or tc admin, going to skip fetching users.\");\n            }\n\n            // check SWE - Students Writing Exams table, fetch from local or ajax and store hash\n            // OK, for now we are going to just store if the template has loaded or not\n            // by default dashboard is always loaded at start.\n            // FIXME: ALSO NOTE this list is in index.php.......can't remember why\n\n            localStorage['page_dashboard'] = false;\n            localStorage['page_examlist'] = false;\n            localStorage['page_scheduler'] = false;\n            localStorage['page_examreqs'] = false;\n            localStorage['page_useroverride'] = false;\n            localStorage['page_examlogs'] = false;\n            localStorage['page_settings'] = false;\n            localStorage['page_stats'] = false;\n            localStorage['page_printpass'] = false;\n            localStorage['page_useradmin'] = false;\n\n            // Any change here must reflect the comp_sidebar.mustache titles\n            localStorage['page_dashboard_title'] = \"Dashboard\";\n            localStorage['page_examlist_title'] = \"Exam List\";\n            localStorage['page_scheduler_title'] = \"Scheduler\";\n            localStorage['page_examreqs_title'] = \"Exam Requests\";\n            localStorage['page_useroverride_title'] = \"User Overrides\";\n            localStorage['page_examlogs_title'] = \"Exam Logs\";\n            localStorage['page_settings_title'] = \"Settings\";\n            localStorage['page_stats_title'] = \"Stats\";\n            localStorage['page_printpass_title'] = \"Print Pretty Passwords\";\n            localStorage['page_useradmin_title'] = \"User Admins\";\n            localStorage['page_builder_title'] = \"Builder\";\n            localStorage['page_moodle_title'] = \"Back To Moodle\";\n\n            var this_pager = window_stat.redirect_page;\n            localStorage[this_pager] = true;\n\n            // Here is where the page may NOT be dashboard, show the page and then clean the URL\n            // console.log(\"tcs_init -> preLoadConfig() -> What is the page to load (from PHP): \" + this_pager);\n            if (this_pager != \"page_dashboard\") {\n                // console.log(\"tcs_init -> preLoadConfig() -> going to show \" + this_pager + \" now.\");\n                rendy.showPage(this_pager);\n                this.cleanURL(this_pager);\n            // } else {\n                // console.log(\"tcs_init -> preLoadConfig() -> Dashboard is the page, carry on\");\n            }\n\n            this.loadEventListeners();\n            // console.log(\"preLoadConfig() ========================>>>> FINISHED <<<<========================\");\n            return this_pager;\n        },\n\n        /**\n         * Description Here\n         *\n         * Valid args are:\n         * int example 1     Only get events for this course\n         * int example 2     Only get events after this time\n         *\n         * @method postLoadConfig\n         * @param {object} args The request arguments\n         * @return {promise} Resolved with an array of the calendar events\n         */\n        postLoadConfig: function() {\n            // console.log(\"postLoadConfig() ========================>>>> START <<<<========================\");\n            // this.fetchSWE();\n        },\n    };\n});\n\n/*\nneed to store users\nneed to store pages in localCache\n\n*/\n\n"],"file":"tcs_init.min.js"}