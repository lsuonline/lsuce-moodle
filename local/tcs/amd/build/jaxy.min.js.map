{"version":3,"sources":["../src/jaxy.js"],"names":["define","$","Ajax","tcsAjax","data_chunk","promiseObj","Promise","resolve","reject","call","methodname","args","datachunk","then","results","JSON","parse","data","catch","ev","makeAJAXCall","params","callback","staticAjax","tcs_callback","console","log","processFreshUsers","getFreshUsers","page","pagetotal","getFreshTemplates"],"mappings":"AAAAA,OAAM,kBAAC,CACH,QADG,CAEH,WAFG,CAAD,CAGH,SAASC,CAAT,CAAYC,CAAZ,CAAkB,CACjB,aAEA,MAAO,CAYHC,OAAO,CAAE,iBAASC,CAAT,CAAqB,CAC1B,GAAIC,CAAAA,CAAU,CAAG,GAAIC,CAAAA,OAAJ,CAAY,SAASC,CAAT,CAAkBC,CAAlB,CAA0B,CAQnDN,CAAI,CAACO,IAAL,CANgB,CAAC,CACbC,UAAU,CAAE,mBADC,CAEbC,IAAI,CAAE,CACFC,SAAS,CAAER,CADT,CAFO,CAAD,CAMhB,EAAqB,CAArB,EAAwBS,IAAxB,CAA6B,SAASC,CAAT,CAAkB,CAE3CP,CAAO,CAACQ,IAAI,CAACC,KAAL,CAAWF,CAAO,CAACG,IAAnB,CAAD,CAMV,CARD,EAQGC,KARH,CAQS,SAASC,CAAT,CAAa,CAGlBX,CAAM,CAACW,CAAD,CACT,CAZD,CAcH,CAtBgB,CAAjB,CAuBA,MAAOd,CAAAA,CACV,CArCE,CAiDHe,YAAY,CAAE,sBAASC,CAAT,CAAiBC,CAAjB,CAA2B,CACrC,GAAIC,CAAAA,CAAU,CAAG,IAAjB,CACAA,CAAU,CAACC,YAAX,CAA0BF,CAA1B,CAEApB,CAAI,CAACO,IAAL,CAAUY,CAAV,EAAkB,CAAlB,EAAqBR,IAArB,CAA0B,SAASC,CAAT,CAAkB,CAGxC,MAAOA,CAAAA,CAOV,CAVD,EAUGI,KAVH,CAUS,SAASC,CAAT,CAAa,CAClBM,OAAO,CAACC,GAAR,CAAY,6CAAZ,CAA2DP,CAA3D,CACH,CAZD,CAcH,CAnEE,CAiFHQ,iBAAiB,CAAE,2BAASb,CAAT,CAAkB,CAIjC,MAAOA,CAAAA,CACV,CAtFE,CAmGHc,aAAa,CAAE,wBAAW,CAEtB,KAAKR,YAAL,CAAkB,CAAC,CACfV,UAAU,CAAE,qBADG,CAEfC,IAAI,CAAE,CACFkB,IAAI,CAAE,GADJ,CAEFC,SAAS,CAAE,GAFT,CAFS,CAAD,CAAlB,CAMI,mBANJ,CAOH,CA5GE,CAyHHC,iBAAiB,CAAE,4BAAW,CAC1BN,OAAO,CAACC,GAAR,CAAY,qDAAZ,CACH,CA3HE,CAiKV,CAvKK,CAAN","sourcesContent":["define([\n    'jquery',\n    'core/ajax',\n], function($, Ajax) {\n    'use strict';\n\n    return {\n        /**\n         * Description Here\n         *\n         * Valid args are:\n         * int example 1     Only get events for this course\n         * int example 2     Only get events after this time\n         *\n         * @method fetchSWE\n         * @param {object} args The request arguments\n         * @return {promise} Resolved with an array of the calendar events\n         */\n        tcsAjax: function(data_chunk) {\n            var promiseObj = new Promise(function(resolve, reject) {\n                // console.log(\"tcsAjax() -> START, let's Poke the Server\");\n                var send_this = [{\n                    methodname: 'local_tcs_tcsAjax',\n                    args: {\n                        datachunk: data_chunk,\n                    }\n                }];\n                Ajax.call(send_this)[0].then(function(results) {\n                    // console.log(\"tcsAjax() -> SUCCESS, what is result: \", results);\n                    resolve(JSON.parse(results.data));\n\n                // }).then(function(ev) {\n                    // console.log(\"Ok, have hit then 2\");\n                //     console.log(\"is there an ev? \", ev);\n                //     return \"facker\";\n                }).catch(function(ev) {\n                    // console.log(\"tcsAjax() -> JAXY Fail :-(\");\n                    // console.log(\"tcsAjax() -> JAXY Fail going to reject: \", ev);\n                    reject(ev);\n                });\n                // console.log(\"tcsAjax() -> AJAX request sent successfully for obj: \", send_this);\n            });\n            return promiseObj;\n        },\n        /**\n         * Description Here\n         *\n         * Valid args are:\n         * int example 1     Only get events for this course\n         * int example 2     Only get events after this time\n         *\n         * @method fetchSWE\n         * @param {object} args The request arguments\n         * @return {promise} Resolved with an array of the calendar events\n         */\n        makeAJAXCall: function(params, callback) {\n            var staticAjax = this;\n            staticAjax.tcs_callback = callback;\n            // console.log(\"makeAJAXCall() -> Going to call ajax now, here's the params: \", params);\n            Ajax.call(params)[0].then(function(results) {\n                // console.log(\"makeAJAXCall() -> HAVE RETURNED, what is result: \", results);\n                // return staticAjax.tcs_callback(results);\n                return results;\n\n            // }).then(function(ev) {\n            //     console.log(\"Ok, have hit then 2\");\n            //     console.log(\"is there an ev? \", ev);\n            //     return \"facker\";\n\n            }).catch(function(ev) {\n                console.log(\"makeAJAXCall() -> JAXY Fail do we have ev: \", ev);\n            });\n\n        },\n\n\n        /**\n         * Description Here\n         *\n         * Valid args are:\n         * int example 1     Only get events for this course\n         * int example 2     Only get events after this time\n         *\n         * @method fetchSWE\n         * @param {object} args The request arguments\n         * @return {promise} Resolved with an array of the calendar events\n         */\n        processFreshUsers: function(results) {\n            // console.log(\"processFreshUsers() -> Now processing results: \", results);\n            // configgy.setUsers();\n            // console.log(\"processFreshUsers() -> actually, let's just return results\");\n            return results;\n        },\n\n        /**\n         * Description Here\n         *\n         * Valid args are:\n         * int example 1     Only get events for this course\n         * int example 2     Only get events after this time\n         *\n         * @method fetchSWE\n         * @param {object} args The request arguments\n         * @return {promise} Resolved with an array of the calendar events\n         */\n        getFreshUsers: function() {\n            // console.log(\"getFreshUsers() -> Going to fetch users from DB.......\");\n            this.makeAJAXCall([{\n                methodname: 'local_tcs_loadUsers',\n                args: {\n                    page: '0',\n                    pagetotal: '1',\n                }\n            }], 'processFreshUsers');\n        },\n\n        /**\n         * Description Here\n         *\n         * Valid args are:\n         * int example 1     Only get events for this course\n         * int example 2     Only get events after this time\n         *\n         * @method fetchSWE\n         * @param {object} args The request arguments\n         * @return {promise} Resolved with an array of the calendar events\n         */\n        getFreshTemplates: function() {\n            console.log(\"getFreshTemplates() -> This function has a DEAD END\");\n        },\n\n        /**\n         * Description Here\n         *\n         * Valid args are:\n         * int example 1     Only get events for this course\n         * int example 2     Only get events after this time\n         *\n         * @method fetchSWE\n         * @param {object} args The request arguments\n         * @return {promise} Resolved with an array of the calendar events\n         */\n        /*\n        hellowWorldTest: function() {\n\n            Ajax.call([{\n                methodname: 'local_tcs_hello_world',\n                args: {\n                    welcomemessage: 'Go Fack Yourself!',\n                }\n            }])[0].then(function(results) {\n                console.log(\"Ok, have hit then 1, what is result: \", results);\n                return \"facker\";\n\n            // }).then(function(ev) {\n            //     console.log(\"Ok, have hit then 2\");\n            //     console.log(\"is there an ev? \", ev);\n            //     return \"facker\";\n\n            }).catch(function(ev) {\n\n                console.log(\"JAXY Fail for hellowWorldTest :-(\");\n                console.log(\"JAXY Fail do we have ev: \", ev);\n            });\n        },\n        */\n    };\n});\n\n/*\nneed to store users\nneed to store pages in localCache\n\nvar promises = Ajax.call([request]);\n$.when(promises[0]).then(function(data) {\n    if (data.result.policy) {\n        modalTitle.resolve(data.result.policy.name);\n        modalBody.resolve(data.result.policy.content);\n\n        return data;\n    } else {\n        throw new Error(data.warnings[0].message);\n    }\n}).catch(function(message) {\n    modal.then(function(modal) {\n        modal.hide();\n        modal.destroy();\n\n        return modal;\n    })\n    .catch(Notification.exception);\n\n    return Notification.addNotification({\n        message: message,\n        type: 'error'\n    });\n});\n*/\n"],"file":"jaxy.min.js"}