{"version":3,"sources":["../src/tcs_student_table.js"],"names":["define","$","jaxy","TCSLib","getTableData","data","promiseObj","Promise","resolve","tcsAjax","JSON","stringify","then","response","new_data","x","users_in_centre","push","updateTableData","addStudent","user","setHash","name","value","dash_hash","bootstrapTable","index","row_id","row","uofl_id","exam_id","username","course","examname","room","unixToDate","timesigned","comments","id_type","exam_type","field","title","align","valign","clickToSelect","formatter","console","log","button","showMessage","updateStats","removeStudent","id","user_id","removeStudentConfirm","that","removeStudentFromTable","removeConfirmModal","msg_type","theme","icon","titleColor","message","messageColor","messageSize","messageLineHeight","color","iconColor","position","progressBarColor","closeOnEscape","buttons","instance","toast","hide","transitionOut","onOpening","onClosing","student_table_test","initiateStudentTable","startup","length","columns","isNaN","focus","on","newRow","alert","comment","info"],"mappings":"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","sourcesContent":["define([\n    'jquery',\n    'local_tcs/jaxy',\n    'local_tcs/tcs_lib',\n    'core/modal_factory',\n    'core/modal_events',\n    'core/templates',\n\n    'local_tcs/_bootstrap_libs/bootstrap-table', // this has to be before table-editable\n    'local_tcs/_bootstrap_libs/bootstrap-editable',\n    'local_tcs/_bootstrap_libs/bootstrap-table-editable',\n\n/* eslint-disable */\n], function ($, jaxy, TCSLib, ModalFactory, ModalEvents, Templates,\n    BootstrapTable,\n    editable,\n    bootstrapTableEditable,\n    // toolbar\n) {\n\n/* eslint-enable */\n    'use strict';\n\n    return {\n        /** Get Table Data AJAX REQUEST -> PROMISE\n         * Description: This will fetch all users currently in the Test Centre room\n         * the callback will resolve with all the data.\n         * @return resolved data\n         */\n        getTableData: function(data) {\n            var promiseObj = new Promise(function(resolve) {\n                jaxy.tcsAjax(JSON.stringify({\n                    'call': 'getUsersInExam',\n                    'params': data,\n                    'class': 'StudentListAjax'\n                })).then(function(response) {\n\n                    // console.log(\"getTableData() -> what is the result: \", response);\n                    var new_data = [];\n\n                    for(var x in response.users_in_centre) {\n                        new_data.push(response.users_in_centre[x]);\n                    }\n                    resolve(new_data);\n                });\n            });\n            return promiseObj;\n        },\n\n        /** Update Table AJAX REQUEST -> PROMISE\n         * Description: This will update a users comment or room#\n         * the callback will resolve with a confirmation of success or fail and message.\n         * @return resolved data\n         */\n        updateTableData: function(data) {\n            // var promiseObj = new Promise(function(resolve, reject) {\n            var promiseObj = new Promise(function(resolve) {\n                // var new_params = {\n                //     'id': data.id,\n                //     'username': data.username,\n                // };\n                // if (data.hasOwnProperty('room')) {\n                //     new_params.room = data.room\n                // }\n                // 'new_comment': data.comment,\n                jaxy.tcsAjax(JSON.stringify({\n                    'call': 'updateStudentList',\n                    'params': data,\n                    'class': 'StudentListAjax'\n                })).then(function(response) {\n                    // console.log(\"getTableData() -> what is the result: \", response);\n                    resolve(response);\n                });\n            });\n            return promiseObj;\n        },\n\n        /** Add Student AJAX REQUEST\n         * Description: This is called after the insert has occurred on the DB side. A hash will be generated\n         * to trigger a full reload for other devices. But for the user entering the\n         * student now they'll see them added. It'll fail otherwise.\n         * @param {object} containing users form info\n         */\n        addStudent: function (user) {\n\n            jaxy.tcsAjax(JSON.stringify({\n                'call': 'addStudentToList',\n                'params': user,\n                'class': 'StudentListAjax',\n            })).then(function (response) {\n                // console.log(\"++++++++++ addStudent() -> what is the result: \", response);\n                // console.log(\"StudentTable ---->>>>>> addStudent() -> What is the response: \", response);\n                TCSLib.setHash({name: \"tcs_dash_hash\", value: response.dash_hash});\n                // console.log(\"StudentTable ---->>>>>> addStudent() -> updated hash to: \", response.dash_hash);\n\n                $('#tcs_student_table_wacka').bootstrapTable('insertRow', {\n                    index: response.row_id,\n                    row: {\n                        'id': response.row_id,\n                        'user_id': user.uofl_id,\n                        'exam_id': response.data.exam_id,\n                        'username': response.data.username,\n                        'course': response.data.course,\n                        'examname': response.data.examname,\n                        'room': response.data.room,\n                        'signintime': TCSLib.unixToDate(response.data.timesigned),\n                        'comments': response.data.comments,\n                        'id_type': response.data.id_type,\n                        'exam_type': response.data.exam_type,\n                        'remove_user': {\n                            field: 'operate',\n                            title: 'Remove',\n                            align: 'center',\n                            valign: 'middle',\n                            clickToSelect: false,\n                            formatter: function (value, row) {\n                                // console.log(\"what is value: \", value);\n                                // console.log(\"what is row: \", row);\n                                if (value == \"\" || row == \"\") {\n                                    console.log(\"formatter fail\");\n                                }\n                                var button = '<button class=\"toast_remove_' + response.row_id +\n                                    ' btn btn-danger btn-lg\" id=\"tcs_remove_user_from_student_list\" data-id=\"' + response.row_id +\n                                    '\" data-user_id=\"' + user.uofl_id +\n                                    '\" data-username=\"' + response.data.username +\n                                    '\" data-exam_id=\"' + response.data.exam_id +\n                                    '\" data-room=\"' + response.data.room +\n                                    '\">' +\n                                    '<i class=\"fa fa-trash\"></i>' +\n                                    '</button>';\n                                return button;\n                            }\n                        }\n                    }\n                });\n                TCSLib.showMessage(response);\n                TCSLib.updateStats([\n                    {'class': 'tcs_student_count','action': 'add'},\n                    {'class': 'tcs_room_stat_' + response.data.room,'action': 'add'}\n                ]);\n            });\n        },\n\n        /** Remove Student AJAX REQUEST -> PROMISE\n         * Description: This is called after the insert has occurred on the DB side. A hash will be generated\n         * to trigger a full reload. This will be helpful for multiple monitors. But for the user being removed\n         * the proctor will see them removed.\n         * @param {object} containing users form info\n         * @return resolved data\n         */\n        removeStudent: function(data) {\n            // var promiseObj = new Promise(function (resolve, reject) {\n            // console.log(\"tc_student_table -> removeStudent() called\");\n            var promiseObj = new Promise(function (resolve) {\n                jaxy.tcsAjax(JSON.stringify({\n                    'call': 'removeStudentFromList',\n                    'params': {\n                        'id': data.id,\n                        'user_id': data.user_id,\n                        'username': data.username,\n                        'exam_id': data.exam_id,\n                        'room': data.room\n                    },\n                    'class': 'StudentListAjax'\n                })).then(function (response) {\n                    // TCSLib.showMessage(response);\n                    // TCSLib.updateStats([\n                    //     {'class': 'tcs_student_count','action': 'add'},\n                    //     {'class': 'tcs_room_stat_' + response.data.room,'action': 'add'}\n                    // ]);\n                    // console.log(\"StudentTable ---->>>>>> removeStudent() -> What is the response: \", response);\n                    TCSLib.setHash({name: \"tcs_dash_hash\", value: response.dash_hash});\n                    // console.log(\"StudentTable ---->>>>>> removeStudent() -> updated hash to: \", response.dash_hash);\n                    resolve(response);\n                });\n            });\n            return promiseObj;\n        },\n\n        /** Remove Student Confirmation Box\n         * Description: This is from the iziToast button function. This needs to be\n         * in it's own function so keep this module in scope as the message confirmation\n         * is in another module.\n         * @param {object} the rows info to be removed: row_id, user_id, username, exam_id\n         * @return resolved object and calling removeStudentFromTable() to handle UI change\n         */\n        removeStudentConfirm: function (data) {\n            var that = this;\n            // console.log(\"User has clicked removeStudentConfirm() -> what is data: \", data);\n            // console.log(\"User has clicked removeStudentConfirm() -> now make ajax call....\");\n            that.removeStudent({\n                'id': data.row_id,\n                'user_id': data.user_id,\n                'username': data.username,\n                'exam_id': data.exam_id,\n                'room': data.room\n            }).then(function (response) {\n                // console.log(\"removeStudent PROMISE has completed, now remove student from UI TABLE\");\n                that.removeStudentFromTable(response);\n            });\n        },\n\n        /** Remove Student UI - Removed from Table\n         * Description: remove the student from the Table, this is done when ID Card\n         * or username is entered again.\n         * @param {object} need the have\n         *      row_id: x\n         *      success: true|false\n         *      msg: some message to show....\n         */\n        removeStudentFromTable: function (data) {\n            // console.log(\"removeStudentFromTable() -> what is the data: \", data);\n            TCSLib.showMessage(data);\n            TCSLib.updateStats([\n                {'class': 'tcs_student_count','action': 'sub'},\n                {'class': 'tcs_room_stat_' + data.room, 'action': 'sub'},\n                {'class': 'tcs_written_today', 'action': 'add'},\n                {'class': 'tcs_written_semester', 'action': 'add'}\n            ]);\n            $('#tcs_student_table_wacka').bootstrapTable('removeByUniqueId', data.row_id);\n        },\n\n        removeConfirmModal: function (data) {\n\n            TCSLib.showMessage({\n                msg_type: \"show\",\n                theme: 'light',\n                // target: '.fixed-table-container',\n                icon: 'fa fa-trash',\n                title: 'Confirm',\n                titleColor: '#721C24',\n                message: 'Are you sure you want to remove ' + data.username,\n                messageColor: '#721C24',\n                messageSize: '20',\n                messageLineHeight: '80',\n                color: '#f8d7da',\n                iconColor: '#721C24',\n                position: 'topCenter', // bottomRight, bottomLeft, topRight, topLeft, topCenter, bottomCenter\n                progressBarColor: 'rgb(0, 255, 184)',\n                closeOnEscape: true,\n                buttons: [\n                    ['<button>Ok</button>', function (instance, toast) {\n                        instance.hide({\n                            transitionOut: 'fadeOutDown',\n                            // onClosing: function (instance, toast, closedBy) {\n                            //     console.info('closedBy: ' + closedBy); // The return will be: 'closedBy: buttonName'\n                            // }\n                        }, toast, 'buttonName');\n\n                        this.removeStudentConfirm({\n                            'row_id': data.row_id,\n                            'user_id': data.user_id,\n                            'username': data.username,\n                            'exam_id': data.exam_id,\n                            'room': data.room\n                        });\n                    }, true], // true to focus\n                    ['<button>Close</button>', function (instance, toast) {\n                        instance.hide({\n                            transitionOut: 'fadeOutDown',\n                            // onClosing: function (instance, toast, closedBy) {\n                            //     console.info('closedBy: ' + closedBy); // The return will be: 'closedBy: buttonName'\n                            // }\n                        }, toast, 'buttonName');\n                    }]\n                ],\n                onOpening: function () {\n                    // console.info('callback abriu!');\n                },\n                // onClosing: function (instance, toast, closedBy) {\n                onClosing: function () {\n                    // console.info('closedBy: ' + closedBy); // tells if it was closed by 'drag' or 'button'\n                }\n            });\n        },\n        /** Test Function\n         * Description: This is just a test function, call this when testing with\n         * module's and scope\n         */\n        student_table_test: function () {\n            console.log(\"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\");\n            console.log(\"student_table_test() -> SUCCESSFULLY CALLED\");\n            console.log(\"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\");\n        },\n\n        // ========================================================================================\n        // ========================================================================================\n        // ========================================================================================\n        /** START - Initialize The Table\n         * Description: Load and show the Student's currently in the exam center.\n         * Any binding click events will be registered here as well.\n         */\n        initiateStudentTable: function() {\n            // console.log(\"initiateStudentTable() -> This SHOULD ONLY BE CALLED ONCE\");\n            // Fetch the Data and display\n            var that = this;\n            // registerHBEvent()\n            this.getTableData({startup: true}).then(function(response) {\n                // console.log(\"initiateStudentTable() -> Returned from AJAX, going to build table, what is data: \", response);\n                // console.log(\"BEFORE: What is b's type: \" + typeof (response));\n                // console.log(\"BEFORE: What is b's length: \" + response.length);\n\n                // if (typeof (response) == \"object\" && response.length == 0) {\n                //     response = [];\n                // }\n                // console.log(\"AFTER: What is b's type: \", typeof (response));\n                // console.log(\"AFTER: What is b's length: \" + response.length);\n                if (response.length == 0) {\n                    $('#tcs_student_table_wacka').bootstrapTable();\n                } else {\n                    $('#tcs_student_table_wacka').bootstrapTable({\n                        data: response,\n                        columns: [\n                            {title: 'id', field: 'id'},\n                            {title: 'Username', field: 'username'},\n                            {title: 'Course', field: 'course'},\n                            {title: 'Exam Name', field: 'examname'},\n                            {title: 'Room #', field: 'room'},\n                            {\n                                title: 'Time Signed In',\n                                field: 'signintime',\n                                formatter: function (value) {\n                                    if (!isNaN(value)) {\n                                        return TCSLib.unixToDate(value);\n                                    }\n                                    return value;\n                                }\n                            },\n                            {title: 'Comments', field: 'comments'},\n                            {\n                                field: 'operate',\n                                title: 'Remove',\n                                align: 'center',\n                                valign: 'middle',\n                                clickToSelect: false,\n                                formatter: function (value, row) {\n                                    // console.log(\"what is value: \", value);\n                                    // console.log(\"what is row: \", row);\n                                    if (value == \"\" || row == \"\") {\n                                        console.log(\"formatter fail\");\n                                    }\n                                    var button = '<button class=\"toast_remove_' + row.id +\n                                        ' btn btn-danger btn-lg\" id=\"tcs_remove_user_from_student_list\" data-id=\"' + row.id +\n                                        '\" data-user_id=\"' + row.user_id +\n                                        '\" data-username=\"' + row.username +\n                                        '\" data-exam_id=\"' + row.exam_id +\n                                        '\" data-room=\"' + row.room +\n                                        '\">' +\n                                        '<i class=\"fa fa-trash\"></i>' +\n                                        '</button>';\n                                    return button;\n                                }\n                            },\n                            {title: 'User ID', field: 'user_id'},\n                            {title: 'Exam ID', field: 'exam_id'},\n                            {title: 'ID Type', field: 'id_type'},\n                            {title: 'Exam Type', field: 'exam_type'\n                        }]\n                    // ============================================\n                    });\n                }\n                $('.tcs_autocomp_in').focus();\n            });\n\n            /** EDIT Table Cell - AJAX\n             * Description: If the user clicks on the Comments column and Room Column then\n             * they can edit the cell. Once finished data will be sent to a promised AJAX call.\n             */\n            $('#tcs_student_table_wacka').on('editable-save.bs.table', function(field, row, newRow){\n                // console.log(\"edit table, here is field: \", field);\n                // console.log(\"Column: \" + row);\n                // console.log(\"edit table, here is newRow: \", newRow);\n                // console.log(\"edit table, here is $el: \" + oldVal);\n                var data = {\n                    'id': newRow.id,\n                    'username': newRow.username\n                };\n                if (row == \"room\") {\n                    // check if room is a number\n                    if (isNaN(newRow.room)) {\n                        // it is NOT a number\n                        alert(\"Not Save, please enter a number\");\n                        return;\n                    }\n                    data.room = newRow.room;\n                } else if (row == \"comments\") {\n                    data.comment = newRow.comments;\n                } else {\n                    console.log(\"Ooooops, this column: \" + row + \" was edited but is not room or comment.......?\");\n                }\n                that.updateTableData(data).then(function(response) {\n                    TCSLib.showMessage(response);\n                    // $('#tcs_student_table_wacka').bootstrapTable('load', response);\n                });\n            });\n\n            /** REMOVE User From Table UI - Confirmation Box\n             * Description: If the user clicks on the Trash Can Icon and they hit 'ok' then the\n             * removeStudentConfirm() function is called to take care of hte rest (in order to maintain scope)\n             */\n            $(\"body\").on('click', '#tcs_remove_user_from_student_list', function () {\n                // console.log(\"Going to remove this record now........\");\n                var row_id = $(this).data('id'),\n                    user_id = $(this).data('user_id'),\n                    username = $(this).data('username'),\n                    exam_id = $(this).data('exam_id'),\n                    room = $(this).data('room');\n                    // toast_target = \".toast_remove_\" + row_id;\n                    // console.log(\"What is the toast target: \" + toast_target);\n\n                TCSLib.showMessage({\n                    msg_type: \"show\",\n                    theme: 'light',\n                    // target: '.fixed-table-container',\n                    icon: 'fa fa-trash',\n                    title: 'Confirm',\n                    titleColor: '#721C24',\n                    message: 'Are you sure you want to remove ' + username,\n                    messageColor: '#721C24',\n                    messageSize: '20',\n                    messageLineHeight: '80',\n                    color: '#f8d7da',\n                    iconColor: '#721C24',\n                    position: 'topCenter', // bottomRight, bottomLeft, topRight, topLeft, topCenter, bottomCenter\n                    progressBarColor: 'rgb(0, 255, 184)',\n                    closeOnEscape: true,\n                    buttons: [\n                        ['<button>Ok</button>', function (instance, toast) {\n                            instance.hide({\n                                transitionOut: 'fadeOutDown',\n                                // onClosing: function (instance, toast, closedBy) {\n                                //     console.info('closedBy: ' + closedBy); // The return will be: 'closedBy: buttonName'\n                                // }\n                            }, toast, 'buttonName');\n\n                            that.removeStudentConfirm({\n                                'row_id': row_id,\n                                'user_id': user_id,\n                                'username': username,\n                                'exam_id': exam_id,\n                                'room': room\n                            });\n                        }, true], // true to focus\n                        ['<button>Close</button>', function (instance, toast) {\n                            instance.hide({\n                                transitionOut: 'fadeOutDown',\n                                // onClosing: function (instance, toast, closedBy) {\n                                //     console.info('closedBy: ' + closedBy); // The return will be: 'closedBy: buttonName'\n                                // }\n                            }, toast, 'buttonName');\n                        }]\n                    ],\n                    onOpening: function () {\n                        console.info('callback abriu!');\n                    },\n                    // onClosing: function (instance, toast, closedBy) {\n                    onClosing: function () {\n                        // console.info('closedBy: ' + closedBy); // tells if it was closed by 'drag' or 'button'\n                    }\n                });\n            });\n        }\n    };\n});\n"],"file":"tcs_student_table.min.js"}