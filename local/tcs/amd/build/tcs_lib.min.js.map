{"version":3,"sources":["../src/tcs_lib.js"],"names":["define","$","jaxy","iziToast","moment","format","getHash","hash","localStorage","getItem","setHash","obj","setItem","name","value","processHash","isAdmin","showMessage","data","msg_type","success","show_msg","error","show","info","warning","updateStats","forEach","msg","action","temp","parseInt","class","text","over","jaxyPromise","promiseObj","Promise","resolve","tcsAjax","JSON","stringify","then","response","unixToDate","unix_time","unix","getCurrentDate","with_clock","add_clock","dateToUnix","date_time"],"mappings":"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","sourcesContent":["define([\n    'jquery',\n    'local_tcs/jaxy',\n    'local_tcs/_libs/iziToast',\n    'local_tcs/_libs/moment',\n], function ($, jaxy, iziToast, moment) {\n    'use strict';\n\n    // Set the format for Moment JS\n    moment().format('dddd, MMMM Do, YYYY - h:mma');\n\n    return {\n\n        /* ====================================================================== */\n        /* ================      Local Storage Functions      =================== */\n        /* ====================================================================== */\n\n        /**\n         * Get the hash from local storage\n         * Hash could be user hash, student table hash, stat card update hash, etc.\n         * @method getHash\n         * @param string - name of the hash you want\n         * @return string - the hash\n         */\n        getHash: function(hash) {\n            if (typeof localStorage[hash] !== 'undefined') {\n                return localStorage.getItem(hash);\n            } else {\n                return \"no_hash\";\n            }\n        },\n\n        /**\n         * Set the hash in local storage\n         * @method setHash\n         * @param obj - will have name of hash and new value {name:xx, value:xx}\n         * @return\n         */\n        setHash: function(obj) {\n            // console.log(\"Going to set this item: \" + obj.name + \" and it's value: \" + obj.value);\n            localStorage.setItem(obj.name, obj.value);\n        },\n\n        /**\n         * This will get the hash, check if it's the same and if NOT update it\n         * @method processHash\n         * @param obj - will have name of hash and new value {name:xx, value:xx}\n         * @return\n         */\n        processHash: function(obj) {\n            if (this.getHash(obj.hash) == obj.value) {\n                return false;\n            } else {\n                localStorage.setItem(obj.name, obj.value);\n                return true;\n            }\n        },\n\n        /**\n         * Check if the user is admin or not. This is used for certain AJAX calls\n         * @method isAdmin\n         * @param none\n         * @return bool\n         */\n        isAdmin: function() {\n\n            if (localStorage.getItem(\"tcs_admin_user\") == \"true\" || localStorage.getItem(\"tcs_tc_admin_user\") == \"true\") {\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        /* ====================================================================== */\n        /* ==================      Message Functions      ======================= */\n        /* ====================================================================== */\n\n        /** Description: All message requests for iziToastk come here to be displayed.\n         * @param {object} all the settings for the message to be shown\n         * @return nothing\n         */\n        showMessage: function (data) {\n            // console.log(\"showMessage() -> What is the data to show: \", data);\n                if (data.msg_type == \"success\") {\n                    iziToast.success(data.show_msg);\n                } else if (data.msg_type == \"error\") {\n                    iziToast.error(data.show_msg);\n                } else if (data.msg_type == \"show\") {\n                    iziToast.show(data);\n                } else if (data.msg_type == \"info\") {\n                    iziToast.info(data.show_msg);\n                } else if (data.msg_type == \"warning\") {\n                    iziToast.warning(data.show_msg);\n                }\n        },\n\n        /* ====================================================================== */\n        /* =================      UI Update Functions      ====================== */\n        /* ====================================================================== */\n\n        /** Description: Update one of the stat cards immediately\n         * @param {object} has 3 keys\n         *      1. class - name of class to update\n         *      2. action - one of add/sub/over\n         *      3. over - override the number with this value\n         * @return nothing\n         */\n        updateStats: function (data) {\n            // console.log(\"TCSLib -> updateStats() -> START, what is data: \", data);\n            data.forEach(function (msg) {\n\n                // console.log(\"TCSLib -> updateStats() -> what is msg: \", msg);\n                if (msg.action == \"add\") {\n                    var temp = parseInt($('.' + msg.class).text());\n                    temp = temp + 1;\n\n                    $('.' + msg.class).text(temp);\n                } else if (msg.action == \"sub\") {\n                    var temp = parseInt($('.' + msg.class).text());\n                    // make sure we don't go below zero\n                    if (temp === 0) {\n                        return;\n                    } else {\n                        temp = temp - 1;\n                        $('.' + msg.class).text(temp);\n                    }\n                } else if (msg.action == \"over\") {\n                    $('.' + msg.class).text(msg.over);\n                }\n\n            });\n        },\n\n        /* ====================================================================== */\n        /* ===================      AJAX Functions      ========================= */\n        /* ====================================================================== */\n\n        /** Description: Get the current date and return a readable format.\n         * @param - None\n         * @return Date\n         */\n        jaxyPromise: function (data) {\n            // console.log(\"jaxyPromise -> Going to pass this to the jaxy function: \", data);\n            // var promiseObj = new Promise(function (resolve, reject) {\n            var promiseObj = new Promise(function (resolve) {\n                jaxy.tcsAjax(JSON.stringify(data)).then(function (response) {\n                    resolve(response);\n                });\n            });\n            return promiseObj;\n        },\n\n        /* ====================================================================== */\n        /* ===================      DATE Functions      ========================= */\n        /* ====================================================================== */\n\n        /** Date Modifier UNIX to DATE\n         * Description: This function uses moment.js to change the epoch unix timestamp to a\n         * human readable date. According to American English the date will be as follows:\n         * Monday, September 6, 2019 - 4:30pm\n         * @param {int} - unix timestamp\n         * @return {string} - ex: Monday, September 6, 2019 - 4:30pm\n         */\n        unixToDate: function (unix_time) {\n            return moment.unix(unix_time).format('dddd, MMMM Do, YYYY - h:mma');\n        },\n\n        /** Get Date\n         * Description: This function get's the date in a human readable format.\n         *      According to American English the date will be as follows:\n         *      Monday, September 6, 2019 - 4:30pm\n         * @param {int} - unix timestamp\n         * @return {string} - ex: Monday, September 6, 2019 - 4:30pm\n         */\n        getCurrentDate: function (with_clock) {\n\n            var add_clock = \"\";\n            if (with_clock) {\n                add_clock = ' - h:mma';\n            }\n            return moment().format('dddd, MMMM Do, YYYY' + add_clock);\n        },\n        /** Date Modifier DATE to UNIX\n         * Description: This function uses moment.js to change the human readable date to a\n         *      epoch unix timestamp .\n         * @param {string} - unix timestamp\n         * @return {int} - 123412341\n         */\n        dateToUnix: function (date_time) {\n            return moment(date_time).format('X');\n        }\n\n        /** Description: Get the current date and return a readable format.\n         * @param - None\n         * @return Date\n        getCurrentDate2: function () {\n            var now = new Date();\n            var day = (\"0\" + now.getDate()).slice(-2);\n            var month = (\"0\" + (now.getMonth() + 1)).slice(-2);\n            var today = now.getFullYear() + \"-\" + (month) + \"-\" + (day);\n            return today;\n        },\n         */\n    };\n});"],"file":"tcs_lib.min.js"}