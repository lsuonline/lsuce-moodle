{"version":3,"sources":["../src/tcs_scheduler.js"],"names":["define","$","TCSLib","moment","Calendar","calendar_obj","getExamData","params","jaxyPromise","buildItems","data","items_list","opening_date","closing_date","sectionID","date_diff","today","startOf","i","id","parseInt","add","temp","unix","diff","obj_to_push","course_name","push","buildSections","initiateScheduler","that","then","response","st1","SetStartDate","SetSelectedPeriod","SetItems","SetSections","name","Init"],"mappings":"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","sourcesContent":["define([\n    'jquery',\n    // 'local_tcs/jaxy',\n    'local_tcs/tcs_lib',\n    'local_tcs/_libs/moment',\n    'local_tcs/skezzy_calendar',\n\n    // 'local_tcs/_libs/tui-calendar'\n\n    // 'local_tcs/_libs/tui-code-snippet',\n    // 'local_tcs/_libs/tui-date-picker',\n    // 'local_tcs/_libs/tui-time-picker',\n    // 'local_tcs/_libs/tui-dom',\n    // 'local_tcs/fullcalendar_core',\n    // 'local_tcs/fullcalendar_timeline',\n    // 'local_tcs/fullcalendar_daygrid',\n    // 'local_tcs/fullcalendar_resource_common',\n    // 'local_tcs/fullcalendar_resource_timeline',\n\n    // 'local_tcs/tcs_lib',\n    // 'local_tcs/jquery.autocomplete',\n    // 'core/modal_factory',\n    // 'core/modal_events',\n    // 'core/templates',\n    // 'local_tcs/tcs_student_table_init'\n    // 'local_tcs/PNotifyButtons'\n// ], function ($, jaxy, Calendar, FC_T, dayGridPlugin, FC_RC, FC_RT) {\n], function ($, TCSLib, moment, Calendar) {\n    // 'use strict';\n    return {\n        calendar_obj: null,\n\n        // ========================================================================================\n        // ========================================================================================\n        // ========================================================================================\n        getExamData: function (params) {\n            return TCSLib.jaxyPromise({\n                'call': 'getExams',\n                'params': params,\n                'class': 'Exams'\n            });\n        },\n\n        // getExamData: function () {\n        //     var promiseObj = new Promise(function (resolve) {\n        //         jaxy.tcsAjax(JSON.stringify({\n        //             'call': 'getAllExams',\n        //             'params': {},\n        //             'class': 'Exams'\n        //         })).then(function (response) {\n        //             // console.log(\"getExamData-> What is the response: \", response);\n        //             if (response.success === true) {\n        //                 var new_data = [];\n        //                 for (var x in response.data) {\n        //                     new_data.push(response.data[x]);\n        //                 }\n        //                 resolve(new_data);\n        //             } else {\n        //                 // TODO: Show alert or popup\n        //                 console.log(\"ajax returned false, meaning no data or query failed.....\");\n        //             }\n        //         });\n        //     });\n        //     return promiseObj;\n        // },\n        /** buildItems - Build the items to display\n         * Description: Each item is an event in the timeline. This will be the exam with it's\n         * start and end date.\n         * @param {object} - AJAX data from the server\n         * @return array - the list of items to see\n         */\n        buildItems: function (data) {\n            // var ts = moment(\"10/15/2014 9:00\", \"M/D/YYYY H:mm\").valueOf();\n            // var m = moment(ts);\n            // var s = m.format(\"M/D/YYYY H:mm\");\n            // alert(\"Values are: ts = \" + ts + \", s = \" + s);\n\n            var items_list = [],\n                opening_date = \"\",\n                closing_date = \"\",\n                // fixed_opening_date = false,\n                // fixed_closing_date = false,\n                sectionID = 1,\n                date_diff = 0,\n                today = moment().startOf('day');\n                // today = moment('08/06/2020 09:00:00');\n                // 19th Jun 2020 09:10\n                // log showing: 19th Jan 019 3:10\n                // custom_format = \"Do MMM YYYY HH:mm\";\n                // custom_format = 'Do MMM YYYY',\n            // console.log(\"Going to start building the items now........\");\n            // console.log(\"how many items are there: \" + data.data.length);\n            for (var i of data.data) {\n                // console.log(\"What is the i obj: \", i);\n                // reset these......\n                sectionID = 1;\n                opening_date = closing_date = 0;\n\n                i.id = parseInt(i.id);\n                i.opening_date = parseInt(i.opening_date);\n                i.closing_date = parseInt(i.closing_date);\n\n                //=======================\n                // Process Opening Date\n                // some dates may not be set......might just have ending date\n                if (i.opening_date == 0 || i.opening_date == \"\" || i.opening_date == \"0\" || i.opening_date == undefined) {\n                    // console.log(\"*******ATTENTION******* opening_date is 0, empty or undefined: \" + i.opening_date);\n                    // let's just say it started last week and maybe mark it??\n                    opening_date = moment(today).add('days', -50);\n                    // fixed_opening_date = true;\n                    sectionID = 3;\n                } else {\n                    // console.log(\"What is the opening_date: \" + opening_date);\n                    var temp = moment.unix(i.opening_date);\n                    // temp = temp.format(custom_format);\n                    // console.log(\"What is the temp obj: \", temp);\n                    opening_date = temp;\n                    // sectionID = 1;\n                }\n\n                //=======================\n                // Process Opening Date\n                if (i.closing_date == 0 || i.closing_date == \"\") {\n                    // console.log(\"*******ATTENTION******* closing_date is 0, empty or undefined: \" + i.closing_date);\n                    // let's just say it started last week and maybe mark it??\n                    closing_date = moment(today).add('days', +50);\n                    // fixed_closing_date = true;\n                    sectionID = 3;\n                } else {\n                    // console.log(\"What is the closing_date: \" + closing_date);\n                    var temp = moment.unix(i.closing_date);\n                    // temp = temp.format(custom_format);\n                    // console.log(\"What is the temp obj: \", temp);\n                    closing_date = temp;\n                    // sectionID = 1;\n                }\n\n                //=======================\n                // Process Dates that are longer than 2 weeks\n\n                // var d1 = \"2019-01-10\";\n                // var d2 = \"2019-01-20\";\n\n                date_diff = moment(closing_date).diff(opening_date, 'days');\n                // console.log(\"What is the date diff: \" + date_diff);\n                if (date_diff > 14 && sectionID != 3) {\n                    // if it equals 3 then it was just set because the start/end was 0\n                    sectionID = 2;\n                }\n\n                var obj_to_push = {\n                    'id': i.id,\n                    'name': '<div>' + i.course_name + '</div>',\n                    'sectionID': sectionID,\n                    'start': opening_date,\n                    'end': closing_date,\n                    'classes': 'item-status-none',\n                    'events': [{\n                        'label': 'string to show in tooltip',\n                        'at': moment(today).add('hours', 11),\n                        'classes': 'item-event-one'\n                    }],\n                    'time_diff': date_diff\n                };\n                // console.log(\"Storing this obj:  \", obj_to_push);\n                items_list.push(obj_to_push);\n            }\n            /*\n            response is an array of exams containing:\n                id: 0\n                course_id: \"525\"\n                course_name: \"FUNC-Test-Course\"\n                exam_id: \"11\"\n                exam_name: \"New Quiz Demo\"\n                opening_date: \"1445276460\"\n                closing_date: \"2248362000\"\n                finished: \"false\"\n                manual: \"false\"\n                notes: \"\"\n                password: \"\"\n                student_list: \"\"\n                visible: \"true\"\n            */\n            return items_list;\n        },\n\n        /** buildSections - This will be the sections to display\n         * Description:\n         *\n         * @param {object} - AJAX data from the server\n         * @return array - the list of items to see\n         */\n        buildSections: function () {\n\n        },\n\n        /** START - Initialize The Scheduler\n         * Description: Initialize The AutoComplete and register any binding events.\n         * @param {object} a list of users to use for searching\n         */\n        initiateScheduler: function() {\n\n            // ****** NOTE *******\n            // Moodle sais:\n            // JQuery is available via $\n            // JQuery UI is available via $.ui\n\n            // ****** NOTE *******\n            /*\n                When changing the date via buttons(3 days, 1 week, 1 month) the following is called\n\n                skezzy_timeline.js -> Period_Clicked() -> START\n                skezzy_timeline.js -> SelectPeriod() -> START\n                skezzy_timeline.js -> Init() -> START\n\n                When <- Left and Right -> arrows are clicked:\n                skezzy_timeline.js -> TimeShift_Clicked() -> START\n                skezzy_timeline.js -> GetSelectedPeriod() -> START\n                skezzy_timeline.js -> Init() -> START\n\n                When Date Picker is used: (not very functional atm)\n                skezzy_timeline.js -> GotoTimeShift_Clicked() -> START\n                skezzy_timeline.js -> GotoTimeShift_Clicked() -> onSelect() -> START\n                skezzy_timeline.js -> Init() -> START\n\n                When \"Today\" button is clicked:\n                skezzy_timeline.js -> TimeShift_Clicked() -> START\n                skezzy_timeline.js -> GetSelectedPeriod() -> START\n                skezzy_timeline.js -> Init() -> START\n\n                // ************* NOTE *******************************\n                // The above 4 functions are followed by the 3 calls below\n\n                skezzy_timeline.js -> CreateCalendar() -> START\n                skezzy_timeline.js -> GetSelectedPeriod() -> START\n                skezzy_timeline.js -> GetEndOfPeriod() -> START\n            */\n\n            var that = this;\n            // $(document).ready(Calendar.Init);\n            this.getExamData().then(function (response) {\n                // console.log(\"initiateScheduler() -> AJAX HAS RETURNED\");\n                // console.log(\"initiateScheduler() -> what is the response length: \", response.length);\n\n                // var custom_format = \"Do MMM YYYY HH:mm\";\n                // 19th Jun 2020 09:10\n                // var st1 = moment(new Date('Mon Jun 8 2020 11:31:08'));\n                // var st1 = moment('Mon Jun 8 2020 11:31:08', custom_format);\n                // var st1 = moment().startOf('day');\n\n                var st1 = moment(\"11/25/2019\");\n                // console.log(\"MOMENT TEST 1: What is st: \", st1);\n                // var st2 = moment().startOf('day');\n                // console.log(\"MOMENT TEST 2: What is st: \", st2);\n                // var today = moment('8th Jun 2020 09:00', 'Do MMM YYYY HH:mm');\n                // var today = moment('08-06-2020', 'DD-MM-YYYY');\n                // var this_day = '08-06-2020';\n                // console.log(\"What is the response: \");\n                // console.table(response);\n\n                Calendar.SetStartDate(st1);\n                Calendar.SetSelectedPeriod('1 week');\n\n                Calendar.SetItems(that.buildItems(response));\n                Calendar.SetSections([{\n                    id: 1,\n                    name: 'Exams'\n                }, {\n                    id: 2,\n                    name: 'Longer than 2 weeks'\n                }, {\n                    id: 3,\n                    name: 'No Start/End Date'\n                }]);\n                Calendar.Init();\n\n\n                /*\n                that.calendar_obj = new Calendar('#tui-calendar', {\n                    defaultView: 'week',\n                    isReadOnly: true,\n                    taskView: true\n                    // template: {\n                    //     monthDayname: function(dayname) {\n                    //         return '<span class=\"calendar-week-dayname-name\">Wacka Wacka Ding Dong</span>';\n                    //     }\n                    // }\n                });\n\n                // that.calendar_obj.createSchedules([\n                // {\n                //     id: '1',\n                //     calendarId: '1',\n                //     title: 'my schedule',\n                //     category: 'time',\n                //     dueDateClass: '',\n                //     start: '2018-01-18T22:30:00+09:00',\n                //     end: '2018-01-19T02:30:00+09:00'\n                // },\n                // {\n                //     id: '2',\n                //     calendarId: '1',\n                //     title: 'second schedule',\n                //     category: 'time',\n                //     dueDateClass: '',\n                //     start: '2018-01-18T17:30:00+09:00',\n                //     end: '2018-01-19T17:31:00+09:00',\n                //     isReadOnly: true    // schedule is read-only\n                // }\n                // ]);\n                */\n            });\n        },\n    };\n});\n"],"file":"tcs_scheduler.min.js"}