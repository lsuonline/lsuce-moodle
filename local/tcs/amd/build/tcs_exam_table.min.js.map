{"version":3,"sources":["../src/tcs_exam_table.js"],"names":["define","$","TCSLib","ModalFactory","ModalEvents","Templates","getExamData","jaxyPromise","updateTableData","data","call","addManualExam","editManualExam","checkForm","val","findeUpdatedData","return_obj","stored_edit_obj","course_name","exam_name","opening_date","closing_date","password","student_list","notes","row_id","id","exam_id","manual","updateTableRow","changed_row","what_to_call","data_to_send","visible","finished","then","response","showMessage","modalAddEditManualExam","modal_data","add_or_edit","modal_title","modal_save_btn","that","create","type","types","SAVE_CANCEL","title","body","render","large","modal","setSaveButtonText","root","getRoot","on","save","new_row_id","bootstrapTable","totalRows","index","row","course_id","send_this","hidden","destroy","show","initiateExamTable","new_data","success","x","push","undefinedText","pageSize","columns","field","formatter","value","isNaN","unixToDate","align","valign","clickToSelect","button","row_data","newRow","cloned_row","JSON","parse","stringify","filterAlgorithm","filter_this","subnet","current_date","getCurrentDate"],"mappings":"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","sourcesContent":["define([\n    'jquery',\n    'local_tcs/tcs_lib',\n    'core/modal_factory',\n    'core/modal_events',\n    'core/templates',\n\n    'local_tcs/_libs/moment',\n    'local_tcs/_libs/jquery.autocomplete',\n\n    'local_tcs/_bootstrap_libs/bootstrap-table',\n    'local_tcs/_bootstrap_libs/bootstrap-editable',\n    'local_tcs/_bootstrap_libs/bootstrap-table-editable',\n    'local_tcs/_bootstrap_libs/bootstrap-table-toolbar',\n\n/* eslint-disable */\n], function ($, TCSLib, ModalFactory, ModalEvents, Templates, moment, autocomplete,\n    BootstrapTable, editable, bootstrapTableEditable, toolbar) {\n\n    'use strict';\n    var stored_edit_obj = \"\";\n    /* eslint-enable */\n\n    // // Set the format for Moment JS\n    // moment().format('dddd, MMMM Do, YYYY - h:mma');\n\n    return {\n        /** Get Table Data AJAX REQUEST -> PROMISE\n         * Description: This will fetch all users currently in the Test Centre room\n         * the callback will resolve with all the data.\n         * @return resolved data\n         */\n        getExamData: function () {\n            return TCSLib.jaxyPromise({\n                'call': 'getAllOpenExams',\n                'params': { },\n                'class': 'Exams'\n            });\n        },\n\n        /** Update Visible/Hidden AJAX REQUEST -> PROMISE\n         * Description: This will update a users comment or room#\n         * the callback will resolve with a confirmation of success or fail and message.\n         * @return resolved data\n         */\n        updateTableData: function(data) {\n            return TCSLib.jaxyPromise({\n                'call': data.call,\n                'params': data.data,\n                'class': 'Exams'\n            });\n        },\n\n        /** Add Manual Exam AJAX REQUEST -> PROMISE\n         * Description: Show modal to add manual exam\n         * The callback will resolve with a confirmation of success or fail and message.\n         * @return resolved data\n         */\n        addManualExam: function(data) {\n            return TCSLib.jaxyPromise({\n                'call': 'addManualExams',\n                'params': data,\n                'class': 'Exams'\n            });\n        },\n\n        /** Edit Manual Exam AJAX REQUEST -> PROMISE\n         * Description: Show modal to edit manual exam\n         * The callback will resolve with a confirmation of success or fail and message.\n         * @return resolved data\n         */\n        editManualExam: function(data) {\n            return TCSLib.jaxyPromise({\n                'call': 'updateExam',\n                'params': data,\n                'class': 'Exams'\n            });\n        },\n\n        /** Check the Manual Form\n         * Description: Check the Manual Form to make sure the following ARE Filled\n         * @param none - using jQuery to grab and check the data.\n         * @return bool\n         */\n        checkForm: function () {\n            return $(\"#tc_manual_exam_course_name\").val() &&\n                $(\"#tc_manual_exam_exam_name\").val() &&\n                $(\"#tc_manual_exam_opening_date\").val() &&\n                $(\"#tc_manual_exam_closing_date\").val() &&\n                $(\"#tc_manual_exam_password\").val() &&\n                $(\"#tc_manual_exam_student_list\").val();\n        },\n\n        /** Find changes in the Form\n         * Description: When performing updates to the manual form let's find those changes\n         *      and return that data.\n         * @param none - using jQuery to grab and check the data.\n         * @return {object} - returns all the updated changes.\n         */\n        findeUpdatedData: function () {\n            // find the updated data\n            var return_obj = {};\n            if (this.stored_edit_obj.course_name != $(\"#tc_manual_exam_course_name\").val()) {\n                return_obj.course_name = $(\"#tc_manual_exam_course_name\").val();\n            }\n            if (this.stored_edit_obj.exam_name != $(\"#tc_manual_exam_exam_name\").val()) {\n                return_obj.exam_name = $(\"#tc_manual_exam_exam_name\").val();\n            }\n\n            if (this.stored_edit_obj.opening_date != $(\"#tc_manual_exam_opening_date\").val()) {\n                return_obj.opening_date = $(\"#tc_manual_exam_opening_date\").val();\n            }\n\n            if (this.stored_edit_obj.closing_date != $(\"#tc_manual_exam_closing_date\").val()) {\n                return_obj.closing_date = $(\"#tc_manual_exam_closing_date\").val();\n            }\n\n            if (this.stored_edit_obj.password != $(\"#tc_manual_exam_password\").val()) {\n                return_obj.password = $(\"#tc_manual_exam_password\").val();\n            }\n\n            if (this.stored_edit_obj.password != $(\"#tc_manual_exam_student_list\").val()) {\n                return_obj.student_list = $(\"#tc_manual_exam_student_list\").val();\n            }\n\n            if (this.stored_edit_obj.notes != $(\"#tc_manual_exam_notes\").val() ||\n                $(\"#tc_manual_exam_notes\").val() != \"\") {\n                return_obj.notes = $(\"#tc_manual_exam_notes\").val();\n            }\n\n            return_obj.row_id = this.stored_edit_obj.id;\n            return_obj.exam_id = this.stored_edit_obj.exam_id;\n            return_obj.manual = \"true\";\n            return return_obj;\n        },\n\n        /** Update the Exam Table Row\n         * Description: Various parts of an entry can be changed, notes, visibility, and edit/remove\n         *      Those functions to handle the changes funnel here and sends data to the server.\n         * @param {object} - changed_row is the row with all it's data and new changes.\n         * @return none - Shows message at end of AJAX call.\n         */\n        updateTableRow: function (changed_row) {\n            // Need to include row_id\n            changed_row.row_id = changed_row.id;\n\n            // Manual Exams will have all the data already and only need to send the updated data\n            // Moodle exams will need all the data\n            var what_to_call = \"updateExam\",\n                data_to_send = \"\";\n\n            if (changed_row.manual == \"false\") {\n                // ok, we are working with a Moodle exam so let's send all the data\n                what_to_call = \"addUpdateMoodleExam\";\n                data_to_send = changed_row;\n            } else {\n                // Need to send row_id, exam_id and the new changes\n                data_to_send = {\n                    'row_id': changed_row.row_id,\n                    'exam_id': changed_row.exam_id,\n                    'notes': changed_row.notes,\n                    'visible': changed_row.visible,\n                    'manual': changed_row.manual,\n                    'finished': changed_row.finished\n                };\n            }\n\n            var data = {\n                'call': what_to_call,\n                'data': data_to_send\n            };\n\n            // Perform the AJAX and promise\n            this.updateTableData(data).then(function (response) {\n                TCSLib.showMessage(response);\n            });\n        },\n\n        /** Modal Component: Add or Edit Manual Exam\n         * Description: Show the UI add manual exam component from templates/modal_entermanualexam\n         * @param {obj} -\n         * @return {int} - 123412341\n         */\n        modalAddEditManualExam: function (modal_data, add_or_edit) {\n            var modal_title = \"Manual Exam\",\n                modal_save_btn = \"Save\",\n                that = this;\n\n            if (add_or_edit == \"add\") {\n                modal_title = 'Add Manual Exam';\n                modal_save_btn = 'Add Exam';\n            } else {\n                modal_title = 'Edit Manual Exam';\n                modal_save_btn = 'Update Exam';\n            }\n            ModalFactory.create({\n                type: ModalFactory.types.SAVE_CANCEL,\n                title: modal_title,\n                body: Templates.render('local_tcs/modal_entermanualexam', modal_data),\n                large: true\n                // can_recieve_focus: button\n                // footer: 'Stuff here Yo',\n            }).then(function (modal) {\n                modal.setSaveButtonText(modal_save_btn);\n                var root = modal.getRoot();\n                root.on(ModalEvents.save, function () {\n                    // Need to check the form and make sure all required fields are populated\n                    if (that.checkForm()) {\n                        // Ok, now going to grab the data and send\\\n\n                        if (add_or_edit == \"add\") {\n                            // ---- ADD MODAL ----\n                            that.addManualExam({\n                                \"course_name\": $(\"#tc_manual_exam_course_name\").val(),\n                                \"exam_name\": $(\"#tc_manual_exam_exam_name\").val(),\n                                \"opening_date\": $(\"#tc_manual_exam_opening_date\").val(),\n                                \"closing_date\": $(\"#tc_manual_exam_closing_date\").val(),\n                                \"password\": $(\"#tc_manual_exam_password\").val(),\n                                \"student_list\": $(\"#tc_manual_exam_student_list\").val(),\n                                \"notes\": $(\"#tc_manual_exam_notes\").val()\n                            }).then(function (response) {\n                                var new_row_id = $('#tcs_exam_table').bootstrapTable('getOptions').totalRows;\n                                $('#tcs_exam_table').bootstrapTable('insertRow', {\n                                    index: 0,\n                                    row: {\n                                        'id': new_row_id + 1,\n                                        'exam_id': response.data.exam_id,\n                                        'course_id': response.data.course_id,\n                                        'manual': response.data.manual,\n                                        'course_name': response.data.course_name,\n                                        'exam_name': response.data.exam_name,\n                                        'opening_date': response.data.opening_date,\n                                        'closing_date': response.data.closing_date,\n                                        'password': response.data.password,\n                                        'student_list': response.data.student_list,\n                                        'notes': response.data.notes,\n                                        'visible': response.data.visible\n                                    }\n                                });\n                                TCSLib.showMessage(response);\n                            });\n                        } else {\n                            // ---- EDIT MODAL ----\n                            var send_this = that.findeUpdatedData();\n                            that.editManualExam(send_this).then(function (response) {\n                                // console.log(\"What is the response AFTER updating the row: \", response);\n                                $('#tcs_exam_table').bootstrapTable('updateRow', {\n                                    index: response.data.id,\n                                    row: response.data\n                                });\n                                TCSLib.showMessage(response);\n                            });\n                        }\n                    } else {\n                        TCSLib.showMessage({\n                            'msg_type': 'error',\n                            'show_msg': {\n                                'title': 'Ooops',\n                                'message': 'Sorry, you have missed something in the form',\n                                'position': 'center'\n                            }\n                        });\n                        return false;\n                    }\n                });\n\n                // Handle hidden event.\n                modal.getRoot().on(ModalEvents.hidden, function () {\n                    // Destroy when hidden.\n                    modal.destroy();\n                });\n                modal.show();\n            });\n        },\n\n        // ========================================================================================\n        // ========================================================================================\n        // ========================================================================================\n        // ========================================================================================\n        // ========================================================================================\n        // ========================================================================================\n        // ========================================================================================\n        // ========================================================================================\n        // ========================================================================================\n        // ========================================================================================\n        // ========================================================================================\n        // ========================================================================================\n        // ========================================================================================\n        // ========================================================================================\n\n        /** START - Initialize The Table\n         * Description: Load and show ALL the exams that are currently OPEN.\n         * Any binding click events will be registered here as well.\n         */\n        initiateExamTable: function() {\n            // Fetch the Data and display\n            var that = this;\n            this.getExamData().then(function (response) {\n                //-------\n                var new_data = [];\n                if (response.success === true) {\n                    for (var x in response.data) {\n                        new_data.push(response.data[x]);\n                    }\n                }\n                // if (response.length == 0) {\n                //     console.log(\"There are no exams......apparently\");\n                // }\n                // console.log(\"Initiating Exam Table........\");\n                // console.log(\"What is exam list data pre load table: \", new_data);\n                $('#tcs_exam_table').bootstrapTable({\n                    undefinedText: '',\n                    data: new_data,\n                    pageSize: 50,\n                    // showRefresh: true,\n                    columns: [\n                        {title: 'ID', field: 'id'},\n                        {title: 'Exam ID', field: 'exam_id'},\n                        {title: 'Course ID', field: 'course_id'},\n                        {title: 'Manual', field: 'manual'},\n                        {title: 'Course', field: 'course_name'},\n                        {title: 'Exam', field: 'exam_name'},\n                        {/* opening_date */\n                            title: 'Opening Date', field: 'opening_date',\n                            formatter: function (value) {\n                                // check if value is a number\n                                if (!isNaN(value)) {\n                                    return TCSLib.unixToDate(value);\n                                }\n                                return value;\n                            }\n                        },\n                        {/* closing_date */\n                            title: 'Closing Date', field: 'closing_date',\n                            formatter: function (value) {\n                                if (!isNaN(value)) {\n                                    return TCSLib.unixToDate(value);\n                                }\n                                return value;\n                            }\n                        },\n                        {title: 'Passowrd', field: 'password'},\n                        {title: 'Notes', field: 'notes'},\n                        {title: 'Student List', field: 'student_list'},\n                        { /* Visibility */\n                            title: 'Visibility',\n                            field: 'operate',\n                            align: 'center',\n                            valign: 'middle',\n                            clickToSelect: false,\n                            formatter: function (value, row) {\n                                // #f8d7da no\n                                // #d4edda yes\n                                var button = \"\";\n                                if (row.visible == \"true\") {\n                                    button = '<select class=\"form-control select tcs_manual_exam_status_changed\" ' +\n                                        'style=\"min-width:75px;\" data-exam_id=\"' + row.id +\n                                        '\"><option value=\"1\">Hidden</option><option value=\"2\" selected>Visible</option></select>';\n                                } else {\n                                    button = '<select class=\"form-control select tcs_manual_exam_status_changed\" ' +\n                                        'style=\"min-width:75px;\" data-exam_id=\"' + row.id +\n                                        '\"><option value=\"1\" selected>Hidden</option><option value=\"2\">Visible</option></select>';\n                                }\n                                return button;\n                            }\n                        },\n                        { title: 'Subnet', field: 'subnet' },\n                        {/* Finished */\n                            title: 'Finished',\n                            field: 'operate',\n                            align: 'center',\n                            valign: 'middle',\n                            clickToSelect: false,\n                            formatter: function (value, row) {\n                                // var button = \"\";\n                                if (row.finished == \"true\") {\n                                    return \"EXAM IS DONE\";\n                                }\n                                return \"Exam is Active\";\n                            }\n                        },\n                        { /* Edit/Remove */\n                            title: 'Edit/Remove',\n                            field: 'operate',\n                            align: 'center',\n                            valign: 'middle',\n                            clickToSelect: false,\n                            formatter: function (value, row) {\n                                var button = \"\";\n                                if (row.finished == \"true\") {\n                                    // we need to make this button\n                                    button = '<div class=\"btn-group\">' +\n                                        '<button class=\"toast_bring_back_' + row.id +\n                                        ' btn btn-warning btn-lg\" id=\"tcs_bring_back_manual_exam\" data-id=\"' + row.id + '\">' +\n                                        '<i class=\"fa fa-mail-reply\"></i>' +\n                                        '</button>' +\n                                        '</div>';\n                                    return button;\n                                }\n                                if (row.manual != \"false\") {\n                                    button = '<div class=\"btn-group\">' +\n                                    '<button class=\"toast_edit_' + row.id +\n                                    ' btn btn-success btn-lg\" id=\"tcs_edit_manual_exam\" data-id=\"' + row.id + '\">' +\n                                    '<i class=\"fa fa-pencil\"></i>' +\n                                    '</button>' +\n                                    '<button class=\"toast_remove_' + row.id +\n                                    ' btn btn-danger btn-lg\" id=\"tcs_remove_exam\" data-id=\"' + row.id + '\">' +\n                                    '<i class=\"fa fa-trash\"></i>' +\n                                    '</button>' +\n                                    '</div>';\n                                }\n                                return button;\n                            }\n                        }\n                    ]\n                // ============================================\n                });\n            });\n\n            // console.log(\"Table should be loaded........\");\n            /** PRE TABLE LOAD\n             * Description: BEFORE the table loads you can do stuff here\n             * @param {none} -\n             * @return {none} -\n             *\n            $('#tcs_exam_table').on('pre-body.bs.table', function(field, row, newRow, oldVal){\n                // console.log(\"pre-body.bs.table - Do Awesome Stuff Here\");\n            });\n            */\n\n            /** POST TABLE LOAD\n             * Description: AFTER the table loads you can do stuff here\n             * @param {none} -\n             * @return {none} -\n             *\n            $('#tcs_exam_table').on('post-body.bs.table', function(field, row, newRow, oldVal){\n                // console.log(\"post-body.bs.table - Do Awesome Stuff Here\");\n            });\n            */\n            /* ON LOAD SUCCESS EXAMPLE\n            $('#tcs_exam_table').on('load-success.bs.table', function(field, row, newRow, oldVal){\n                // console.log(\"Do Awesome Stuff Here\");\n            });\n            */\n\n            /** Exam Status Change - jQuery EVENT\n             * Description: Obtains the exam id which then get's the the row and it's data. This\n             *      data is then sent to the server to be updated.\n             * @param {none} -\n             * @return {none} -\n             */\n            $('#tcs_exam_table').on('change', '.tcs_manual_exam_status_changed', function() {\n                var row_data = $('#tcs_exam_table').bootstrapTable('getRowByUniqueId', $(this).data(\"exam_id\"));\n                // console.log(\"tc_exam_table.js -> Going to update the visibility it's currently: \" + row_data.visible);\n                row_data.visible = row_data.visible == \"true\" ? \"false\" : \"true\";\n                // console.log(\"tc_exam_table.js -> update, what is visible now: \" + row_data.visible);\n                // console.log(\"tc_exam_table.js -> what is the row_data: \", row_data);\n                that.updateTableRow(row_data);\n            });\n\n            /** Edit NOTES - jQuery EVENT\n             * Description: Obtains the exam id which then get's the the row and it's data. This\n             *      data is then sent to the server to be updated.\n             * @param {none} -\n             * @return {none} -\n             */\n            $('#tcs_exam_table').on('editable-save.bs.table', function(field, row, newRow) {\n                that.updateTableRow(newRow);\n            });\n\n            /** Edit Manual Exam - jQuery EVENT\n            * Description: Modal is pre-populated with current existing data and activated\n            *       to make changes to the manual exam.\n            * @param {none} -\n            * @return {none} -\n            */\n            $(\"body\").on('click', '#tcs_edit_manual_exam', function () {\n                var row_data = $('#tcs_exam_table').bootstrapTable('getRowByUniqueId', $(this).data(\"id\"));\n                // let's clone the row so it doesn't get altered and mess up the table data\n                var cloned_row = JSON.parse(JSON.stringify(row_data));\n\n                // modify our dates to be stored on the server\n                cloned_row.opening_date = TCSLib.unixToDate(cloned_row.opening_date);\n                cloned_row.closing_date = TCSLib.unixToDate(cloned_row.closing_date);\n                that.stored_edit_obj = cloned_row;\n                that.modalAddEditManualExam(cloned_row, \"edit\");\n            });\n\n            /** REMOVE Exam - jQuery EVENT\n            * Description: The exam is not actually removed but flips a \"finished\" switch. These entries\n            *       will be at the end of the table.\n            * @param {none} -\n            * @return {none} -\n            */\n            $(\"body\").on('click', '#tcs_remove_exam', function () {\n                var row_data = $('#tcs_exam_table').bootstrapTable('getRowByUniqueId', $(this).data(\"id\"));\n                row_data.finished = \"true\";\n                that.updateTableRow(row_data);\n\n                $('#tcs_exam_table').bootstrapTable('updateRow', {\n                    row: row_data.id\n                });\n            });\n\n            /** UNDO REMOVE Exam - jQuery EVENT\n            * Description: The odd time an exam might have to be revived for a student, this will allow the\n            *       exam to be active again\n            * @param {none} -\n            * @return {none} -\n            */\n            $(\"body\").on('click', '#tcs_bring_back_manual_exam', function () {\n                var row_data = $('#tcs_exam_table').bootstrapTable('getRowByUniqueId', $(this).data(\"id\"));\n                row_data.finished = \"false\";\n                that.updateTableRow(row_data);\n                $('#tcs_exam_table').bootstrapTable('updateRow', {\n                    row: row_data.id\n                });\n            });\n\n            /** FILTERS - jQuery EVENT\n            * Description: Buttons at the top of the table provide filtering in for various columns:\n            *   manual, visible, hidden, finished, closed and no_filter\n            * @param {none} -\n            * @return {none} -\n            */\n            $('.exam_filter_btn').on('click', function () {\n                var filterAlgorithm = $(this).data(\"filterby\"),\n                    filter_this = \"\";\n\n                if (filterAlgorithm == \"manual\") {\n                    filter_this = {\n                        manual: \"true\"\n                    };\n                } else if (filterAlgorithm == \"visible\") {\n                    filter_this = {\n                        visible: \"true\"\n                    };\n                } else if (filterAlgorithm == \"hidden\") {\n                    filter_this = {\n                        visible: \"false\"\n                    };\n                } else if (filterAlgorithm == \"subnet\") {\n                    filter_this = {\n                        subnet: \"true\"\n                    };\n                } else if (filterAlgorithm == \"finished\") {\n                    filter_this = {\n                        finished: \"true\"\n                    };\n                } else {\n                    // filterAlgorithm == no_filter\n                    filter_this = {};\n                }\n                $('#tcs_exam_table').bootstrapTable('filterBy', filter_this);\n            });\n\n            /** CREATE New Manual Exam - jQuery EVENT\n            * Description: Modal Form to create a new manual exam\n            * @param {none} -\n            * @return {none} -\n            */\n            $('#add_manual_exam_btn').on('click', function () {\n                var current_date = TCSLib.getCurrentDate(),\n                    opening_date = current_date + \" 09:00:00\",\n                    closing_date = current_date + \" 21:00:00\";\n\n                // Pass this data to the form\n                var data = {\n                    'current_date': current_date,\n                    'opening_date': opening_date,\n                    'closing_date': closing_date\n                };\n                that.modalAddEditManualExam(data, \"add\");\n            });\n            // console.log(\"--------------------- End of initiateExamTable() ---------------------\");\n        } // --- END initiateExamTable()\n    }; // --- END return\n});\n"],"file":"tcs_exam_table.min.js"}