{"version":3,"sources":["../src/tcs_autocomp_exam.js"],"names":["define","$","jaxy","TCSLib","autocomplete","tcs_autocomp","ModalFactory","ModalEvents","Templates","loadUserExams","user","promiseObj","Promise","resolve","tcsAjax","JSON","stringify","data","uofl_id","username","then","response","addUserAdmin","jaxyPromise","removeUserAdmin","addUserModal","that","create","type","types","SAVE_CANCEL","title","body","render","large","modal","setSaveButtonText","root","getRoot","on","save","id","val","access_level","bootstrapTable","index","row","userid","name","exams","showMessage","hidden","console","log","focus","destroy","show","checkForm","onSelect","suggestion","onSearchComplete","initiateAutoComp","users","row_data","rowid","msg_type","field","values","toString"],"mappings":"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","sourcesContent":["define([\n    'jquery',\n    'local_tcs/jaxy',\n    'local_tcs/tcs_lib',\n    'local_tcs/_libs/jquery.autocomplete',\n    'local_tcs/tcs_autocomp',\n    'core/modal_factory',\n    'core/modal_events',\n    'core/templates',\n    // 'local_tcs/tcs_student_table'\n    // 'local_tcs/PNotifyButtons'\n// ], function ($, jaxy, TCSLib, autocomplete, tcs_autocomp, ModalFactory, ModalEvents, Templates, StudentTable) {\n], function ($, jaxy, TCSLib, autocomplete, tcs_autocomp, ModalFactory, ModalEvents, Templates) {\n    'use strict';\n        // var keyStrokeCount = 0,\n        //     isBarCodeReader = 0,\n        //     temp_userid = 0,\n        //     mask = 0,\n        //     stored_idnumber = 0,\n        //     $auto_obj = $('#autocomplete');\n\n    // TODO: Make default select on radio buttons, right now it's last selection\n    return {\n        loadUserExams: function(user) {\n            // console.log(\"What is the user data to search: \", user);\n            // var promiseObj = new Promise(function(resolve, reject) {\n            var promiseObj = new Promise(function(resolve) {\n                // return;\n                jaxy.tcsAjax(JSON.stringify({\n                    'call': 'loadUserExams',\n                    'params': {\n                        'userid': user.data.uofl_id,\n                        'username': user.data.username,\n                        'isnum': true,\n                        'ax': true\n                    },\n                    'class': 'StudentListAjax',\n                })).then(function(response) {\n\n                    resolve(response);\n                    // var result = JSON.parse(response);\n                    // console.log(\"loadUserExams() -> what is the result: \", result);\n                    // resolve(JSON.parse(result.data));\n\n                    // TODO: this will need to be loaded into the autocomplete library\n\n                    // }\n                });\n            });\n            return promiseObj;\n        },\n\n        addUserAdmin: function(data) {\n            return TCSLib.jaxyPromise({\n                'call': 'addUser',\n                'params': data,\n                'class': 'UserAdmin'\n            });\n        },\n\n        removeUserAdmin: function(data) {\n            return TCSLib.jaxyPromise({\n                'call': 'removeUser',\n                'params': data,\n                'class': 'UserAdmin'\n            });\n        },\n\n        addUserModal: function(data) {\n            // console.log(\"findUserData() -> Do Stuff........\");\n            // console.log(\"findUserData() -> what is the data: \", data);\n            var that = this;\n            // Let's find the User's Exam Information\n\n            // return;\n\n            // this.loadUserExams(data).then(function(response) {\n\n            //     console.log(\"findUserData() -> what is the FINAL DATA: \", response);\n            //     if ('hash' in response) {\n            //         data.data.exams = response.exams;\n\n            //         console.log(\"findUserData() -> FINAL DATA to be sent to template: \", data.data);\n            //         var trigger = $('#enter_student_modal');\n            ModalFactory.create({\n                type: ModalFactory.types.SAVE_CANCEL,\n                title: 'Add TCS Admin User',\n                body: Templates.render('local_tcs/modal_adduseradmin', data.data),\n                large: true\n                // can_recieve_focus: button\n                // footer: 'Stuff here Yo',\n            })\n            .then(function(modal) {\n                modal.setSaveButtonText('Add User');\n                var root = modal.getRoot();\n                root.on(ModalEvents.save, function() {\n                    // var exam_type = 0;\n                    // Do something to delete item\n                    // console.log(\"Student has entered into the exam arena\");\n\n                    // var level = $(\"input[name='tcs_user_admin_form']:checked\").val();\n\n                    that.addUserAdmin({\n                        id: $('#tcs_uaf_id').val(),\n                        username: $('#tcs_uaf_username').val(),\n                        access_level: $(\"input[name='tcs_user_admin_form']:checked\").val()\n                    }).then(function (response) {\n                        // var new_row_id = $('#tcs_user_admin_table').bootstrapTable('getOptions').totalRows;\n                        // console.log(\"ADDING A NEW user admin what is response: \", response);\n                        // console.log(\"and its new row id: \" + new_row_id);\n                        $('#tcs_user_admin_table').bootstrapTable('insertRow', {\n                            index: 0,\n                            row: {\n                                'id': response.data.id,\n                                'userid': response.data.userid,\n                                'name': response.data.name,\n                                'username': response.data.username,\n                                'access_level': response.data.access_level,\n                                'exams': response.data.exams\n                            }\n                        });\n                        TCSLib.showMessage(response);\n                    });\n                    // $('#tcs_comments_on_student').val();\n                    // if (that.checkForm()) {\n                    //     console.log(\"Form is good to go\");\n                    //     if ($(\"input[name='tcs_exam_check']:checked\").data(\"examname\").split(\"ManualExam-\").length === 2) {\n                    //         exam_type = 1;\n                    //     }\n\n                    //     StudentTable.addStudent({\n                    //         'username': data.data.username,\n                    //         'uofl_id': data.data.uofl_id,\n                    //         'exam_id': $(\"input[name='tcs_exam_check']:checked\").val(),\n                    //         'id_type': $(\"input[name='tcs_identity_check']:checked\").val(),\n                    //         'room': $(\"input[name='exam_room_check']:checked\").val(),\n                    //         'comments': $('#tcs_comments_on_student').val(),\n                    //         'exam_type': exam_type\n                    //     });\n                    // } else {\n                    //     console.log(\"Form FAIL\");\n\n                    //     TCSLib.showMessage({\n                    //         'msg_type': 'error',\n                    //         'show_msg': {\n                    //             'title': 'Ooops',\n                    //             'message': 'Please select an exam for the student',\n                    //             'position': 'center'\n                    //         }\n                    //     });\n\n                    //     // 'show_msg': {\n                    //     //     \"title\": \"Error\",\n                    //     //         \"message\": \"Sorry but the Quiz Settings IP Restriction is too short!\"\n                    //     // }\n                    //     return false;\n                    // }\n                });\n\n                // Handle hidden event.\n                modal.getRoot().on(ModalEvents.hidden, function() {\n                    // Destroy when hidden.\n                    console.log(\"Modal is now going by by bitch\");\n                    $('.tcs_autocomp_in').val('');\n                    $('.tcs_autocomp_in').focus();\n                    modal.destroy();\n                });\n                modal.show();\n            // .done(function(modal) {\n                // Do what you want with your new modal.\n            });\n\n            // TCSLib.showMessage({\n            //     'msg_type': 'error',\n            //     'show_msg': {\n            //         'title': 'Sorry',\n            //         'message': response.msg,\n            //         'position': 'center'\n            //     }\n            // });\n            // $('.tcs_autocomp_in').val('');\n            // $('.tcs_autocomp_in').autocomplete().hide();\n        },\n\n\n        checkForm: function () {\n\n            // console.log(\"Do we have exam_id: \" + $(\"input[name='tcs_exam_check']:checked\").val());\n            // console.log(\"Do we have id_type: \" + $(\"input[name='tcs_identity_check']:checked\").val());\n            // console.log(\"Do we have room: \" + $(\"input[name='exam_room_check']:checked\").val());\n            // console.log(\"Do we have comments: \" + $('#tcs_comments_on_student').val());\n\n            return $(\"input[name='tcs_exam_check']:checked\").val() &&\n                $(\"input[name='tcs_identity_check']:checked\").val() &&\n                $(\"input[name='exam_room_check']:checked\").val();\n        },\n\n        onSelect: function (suggestion) {\n            // console.log(\"made it to autocomp exam onSelect\");\n            this.addUserModal(suggestion);\n        },\n        onSearchComplete: function () {\n            console.log(\"onSearchComplete -> This function is dead\");\n            // this.findUserData(suggestion);\n        },\n\n        // ========================================================================================\n        // ========================================================================================\n        // ========================================================================================\n\n        /** START - Initialize The AutoComplete\n         * Description: Initialize The AutoComplete and register any binding events.\n         * @param {object} a list of users to use for searching\n         */\n        initiateAutoComp: function(users) {\n            // currently trying this one:\n            // https://github.com/devbridge/jQuery-Autocomplete\n            // console.log(\"EXAM - initiateAutoComp() -> going to initiate autocomplete\");\n            // console.log(\"EXAM - initiateAutoComp() -> what is users: \", users);\n            var that = this;\n\n            // #autocomplete_admin is the id in the search template\n            tcs_autocomp.initiateAutoComp(users, that, '#autocomplete_admin');\n\n            /*\n            $(\"body\").on('click', '#tcs_enterstudent_table > tbody > tr', function (event) {\n                // console.log(\"Clicked inside the row BITCH, what is the type: \" + event.target.type);\n                if (event.target.type !== 'radio') {\n                    $(':radio', this).trigger('click');\n                }\n            });\n\n            // $('#autocomplete').keypress(function (e) {\n            $auto_obj.keypress(function (e) {\n                // Here's an example of the card being scanned:\n                // % 001028120 ?; 6018190723618365 ? +691606639 ?\n                var actual_id = null,\n                    charCode = e.which;\n                // keycode 37 = %\n                //  13 = return\n                //  9 = tab\n                that.keyStrokeCount = 0;\n                //\n                if ((e.keyCode === 37 || charCode === 37) && that.keyStrokeCount === 0) {\n                    that.isBarCodeReader = 1;\n                    // $('#tcs_std_list_spinner').css(\"visibility\", \"visible\");\n                    that.temp_userid = '';\n                    that.mask = '';\n                    // return;\n                }\n                // console.log(\"keypress -> what is the charcode: \" + charCode + \" and value: \" + this.value);\n\n                //\n                that.keyStrokeCount++;\n                //\n                if (this.value.length === 9 && that.isBarCodeReader === 0) {\n\n                    console.log(\"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\");\n                    console.log(\"keypress -> length is 9 and it's barcode\");\n                    that.keyStrokeCount = 0;\n                    // TCS.student_list.clear_fields_for_newStudentEntry();\n                    // TCS.student_list.process_entry(this.value);\n                    return true;\n                }\n                // do stuff with barcode entry\n                if (that.isBarCodeReader) {\n                    // store the input\n                    that.temp_userid = that.temp_userid + String.fromCharCode(charCode);\n                    // console.log(\"Building id, now its: \" + that.temp_userid);\n                    that.mask += \"*\";\n                    // $('#autocomplete').val(that.mask);\n                    $auto_obj.val(that.mask);\n                }\n                // if (/[%]\\d+[?][;]\\d+[?][+]\\d+[?]/.test(TCS.student_list.temp_userid) && TCS.student_list.isBarCodeReader === 1) {\n                // if the card reader reaches the end the keycode is 13 (return) process now.....\n                if (charCode === 13 && that.isBarCodeReader === 1) {\n                    // console.log(\"keypress -> regex and it's barcode\");\n                    //\n                    // $('#tcs_std_list_spinner').css(\"visibility\", \"hidden\");\n                    //\n                    // that.$exams.focus();\n                    actual_id = that.temp_userid.substring(1, 10);\n                    that.temp_userid = '';\n                    // that.$userid.val(actual_id);\n                    //\n                    that.keyStrokeCount = 0;\n                    that.isBarCodeReader = 0;\n                    // that.clear_fields_for_newStudentEntry();\n                    // // that.$userid.val(actual_id);\n                    // // that.$comments.html('');\n                    // that.process_entry(actual_id);\n                    console.log(\"Whats the final id of this MORON: \" + actual_id);\n                    that.stored_idnumber = actual_id;\n                    console.log(\"keypress -> PROCESS ENTRY NOW PART B\");\n                    // $('#autocomplete').val(actual_id);\n                    $auto_obj.val(actual_id);\n                    return true;\n                }\n            });\n            */\n\n            /** REMOVE User Admin - jQuery EVENT\n            * Description: The exam is not actually removed but flips a \"finished\" switch. These entries\n            *       will be at the end of the table.\n            * @param {none} -\n            * @return {none} -\n            */\n            $(\"body\").on('click', '#tcs_remove_user_admin', function () {\n                var row_data = $('#tcs_user_admin_table').bootstrapTable('getRowByUniqueId', $(this).data(\"id\"));\n                // console.log(\"What s the row data to delete: \", row_data);\n                that.removeUserAdmin({\n                    userid: row_data.userid,\n                    rowid: row_data.id\n                }).then(function (response) {\n                    // console.log(\"DONE AJAX to remove user admin, what is the response: \", response);\n                    if (response.msg_type == \"success\") {\n                        // console.log(\"ok, need to update the table now, what is the rowid: \" + response.rowid);\n                        // remove the user from the list\n                        // var this_array = [];\n                        // this_array.push(response.rowid);\n\n                        // **** NOTE ****\n                        // To REMOVE the values HAVE to be string\n                        $('#tcs_user_admin_table').bootstrapTable('remove', {\n                            field: 'id',\n                            values: response.rowid.toString()\n                        });\n                        TCSLib.showMessage(response);\n                    } else {\n                        console.log(\"ERROR with removing user\");\n                    }\n                });\n                // row_data.finished = \"true\";\n                // that.updateTableRow(row_data);\n\n            });\n            /*\n            $(\"body\").on('keydown', '#tcs_enter_student_form', function (event) {\n                console.log(\"Have hit keydown key\");\n            });\n\n            // $('#tcs_enter_student_form').keypress(function (e) {\n            $(\"body\").on('keypress', '#tcs_enter_student_form', function (event) {\n                console.log(\"Have hit keypress key\");\n                // tcs_enter_student_form\n                if (event.which == 13) {\n                    // $('form#login').submit();\n                    console.log(\"Have hit the enter key\");\n                    if (that.checkForm()) {\n                        console.log(\"Form is good to go\");\n                    } else {\n                        console.log(\"Form FAIL\");\n                    }\n                    return false;    //<---- Add this line\n                }\n            });\n\n            $(\"body\").on('submit', 'data-action=\"save\"', function (event) {\n            */\n        }\n    };\n});\n"],"file":"tcs_autocomp_exam.min.js"}