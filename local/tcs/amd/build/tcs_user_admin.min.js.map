{"version":3,"sources":["../src/tcs_user_admin.js"],"names":["define","$","TCSLib","tcs_autocomp","getUserData","jaxyPromise","initiateUserAdmin","then","response","new_data","success","x","data","push","bootstrapTable","undefinedText","pageSize","columns","title","field","align","valign","clickToSelect","formatter","value","row","stuff","exams","length","button","id","initiateAutoComp","JSON","parse","localStorage","getItem"],"mappings":"AAAAA,OAAM,4BAAC,CACH,QADG,CAEH,mBAFG,CAGH,6BAHG,CAKH,2CALG,CAMH,8CANG,CAOH,oDAPG,CAQH,mDARG,CAAD,CAaH,SAAUC,CAAV,CAAaC,CAAb,CAAqBC,CAArB,CAA8F,CAE7F,aACA,MAAO,CAQHC,WAAW,CAAE,sBAAY,CACrB,MAAOF,CAAAA,CAAM,CAACG,WAAP,CAAmB,CACtB,KAAQ,UADc,CAEtB,OAAU,EAFY,CAGtB,MAAS,WAHa,CAAnB,CAKV,CAdE,CAyBHC,iBAAiB,CAAE,4BAAY,CAI3B,KAAKF,WAAL,GAAmBG,IAAnB,CAAwB,SAAUC,CAAV,CAAoB,CAKxC,GAAIC,CAAAA,CAAQ,CAAG,EAAf,CACA,GAAI,KAAAD,CAAQ,CAACE,OAAb,CAA+B,CAC3B,IAAK,GAAIC,CAAAA,CAAT,GAAcH,CAAAA,CAAQ,CAACI,IAAvB,CAA6B,CACzBH,CAAQ,CAACI,IAAT,CAAcL,CAAQ,CAACI,IAAT,CAAcD,CAAd,CAAd,CACH,CACJ,CAGDV,CAAC,CAAC,uBAAD,CAAD,CAA2Ba,cAA3B,CAA0C,CACtCC,aAAa,CAAE,EADuB,CAEtCH,IAAI,CAAEH,CAFgC,CAGtCO,QAAQ,CAAE,EAH4B,CAKtCC,OAAO,CAAE,CACL,CAACC,KAAK,CAAE,IAAR,CAAcC,KAAK,CAAE,IAArB,CADK,CAEL,CAACD,KAAK,CAAE,QAAR,CAAkBC,KAAK,CAAE,QAAzB,CAFK,CAGL,CAACD,KAAK,CAAE,MAAR,CAAgBC,KAAK,CAAE,MAAvB,CAHK,CAIL,CAACD,KAAK,CAAE,UAAR,CAAoBC,KAAK,CAAE,UAA3B,CAJK,CAKL,CAACD,KAAK,CAAE,cAAR,CAAwBC,KAAK,CAAE,cAA/B,CALK,CAML,CACID,KAAK,CAAE,OADX,CAEIC,KAAK,CAAE,SAFX,CAGIC,KAAK,CAAE,QAHX,CAIIC,MAAM,CAAE,QAJZ,CAKIC,aAAa,GALjB,CAMIC,SAAS,CAAE,mBAAUC,CAAV,CAAiBC,CAAjB,CAAsB,CAC7B,GAAIC,CAAAA,CAAK,CAAG,EAAZ,CAEA,GAAuB,CAAnB,CAAAD,CAAG,CAACE,KAAJ,CAAUC,MAAd,CAA0B,CAGtBF,CAAK,CAAG,iCAAR,CACAA,CAAK,EAAI,wCAAT,CAEA,IAAK,GAAIf,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGc,CAAG,CAACE,KAAJ,CAAUC,MAA9B,CAAsCjB,CAAC,EAAvC,CAA2C,CACvCe,CAAK,EAAI,WAAaD,CAAG,CAACE,KAAJ,CAAUhB,CAAV,CAAb,CAA4B,WACxC,CACDe,CAAK,EAAI,WAAT,CAEA,MAAOA,CAAAA,CAEV,CAbD,IAaO,CACH,MAAO,iBACV,CAGJ,CA3BL,CANK,CAmCL,CACIR,KAAK,CAAE,QADX,CAEIC,KAAK,CAAE,SAFX,CAGIC,KAAK,CAAE,QAHX,CAIIC,MAAM,CAAE,QAJZ,CAKIC,aAAa,GALjB,CAMIC,SAAS,CAAE,mBAAUC,CAAV,CAAiBC,CAAjB,CAAuB,CAe9B,GAAII,CAAAA,CAAM,CAAG,yDAKwBJ,CAAG,CAACK,EAL5B,CAMT,kEANS,CAMwDL,CAAG,CAACK,EAN5D,kDAAb,CAWA,MAAOD,CAAAA,CACV,CAjCL,CAnCK,CAL6B,CAA1C,CA8EH,CA3FD,EA8FA1B,CAAY,CAAC4B,gBAAb,CAA8BC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CAA9B,CACH,CA5HE,CA8HV,CA9IK,CAAN","sourcesContent":["define([\n    'jquery',\n    'local_tcs/tcs_lib',\n    'local_tcs/tcs_autocomp_exam',\n\n    'local_tcs/_bootstrap_libs/bootstrap-table',\n    'local_tcs/_bootstrap_libs/bootstrap-editable',\n    'local_tcs/_bootstrap_libs/bootstrap-table-editable',\n    'local_tcs/_bootstrap_libs/bootstrap-table-toolbar',\n    /* eslint-disable */\n    // 'local_tcs/editable',\n    // 'local_tcs/bootstrap-editable',\n\n], function ($, TCSLib, tcs_autocomp, BootstrapTable, editable, bootstrapTableEditable, toolbar) {\n    /* eslint-enable */\n    'use strict';\n    return {\n        /** Get Table Data AJAX REQUEST -> PROMISE\n         * Description: This will fetch all users currently in the Test Centre room\n         * the callback will resolve with all the data.\n         * @return resolved data\n         *\n         * FIXME: This is not done\n         */\n        getUserData: function () {\n            return TCSLib.jaxyPromise({\n                'call': 'getUsers',\n                'params': {},\n                'class': 'UserAdmin'\n            });\n        },\n        // ========================================================================================\n        // ========================================================================================\n        // ========================================================================================\n\n        /** START - Initialize The Table\n         * Description: Load and show the Student's currently in the exam center.\n         * Any binding click events will be registered here as well.\n         * AJAX: MAke an ajax call\n         * FUNCTION: MAke an ajax call\n         */\n        initiateUserAdmin: function () {\n            // console.log(\"initiateUserAdmin() -> This SHOULD ONLY BE CALLED ONCE\");\n            // Fetch the Data and display\n            // var that = this;\n            this.getUserData().then(function (response) {\n                // console.log(\"What is the response for user admin: \", response);\n                // console.log(\"What is the data: \", response.data);\n\n                // console.log(\"Initiating User Admin Table........\");\n                var new_data = [];\n                if (response.success === true) {\n                    for (var x in response.data) {\n                        new_data.push(response.data[x]);\n                    }\n                }\n                // console.log(\"What is the new_data:\", new_data);\n\n                $('#tcs_user_admin_table').bootstrapTable({\n                    undefinedText: '',\n                    data: new_data,\n                    pageSize: 50,\n                    // showRefresh: true,\n                    columns: [\n                        {title: 'ID', field: 'id'},\n                        {title: 'UserID', field: 'userid'},\n                        {title: 'Name', field: 'name'},\n                        {title: 'Username', field: 'username'},\n                        {title: 'Access Level', field: 'access_level'},\n                        {/* Exams */\n                            title: 'Exams',\n                            field: 'operate',\n                            align: 'center',\n                            valign: 'middle',\n                            clickToSelect: false,\n                            formatter: function (value, row) {\n                                var stuff = \"\";\n                                // console.log(\"Here in the formatter, what is row: \", row);\n                                if (row.exams.length > 1) {\n                                    // console.log(\"How many exams: \" + row.exams.length);\n                                    // console.log(\"exams: \", row.exams);\n                                    stuff = '<select class=\"form-control\">';\n                                    stuff += '<option selected>See My Exams</option>';\n                                    // for (var x of row.exams) {\n                                    for (var x = 0; x < row.exams.length; x++) {\n                                        stuff += '<option>' + row.exams[x] + '</option>';\n                                    }\n                                    stuff += '</select>';\n                                    // console.log(\"^^^^^^^ What is the final HTML chunk: \" + stuff);\n                                    return stuff;\n\n                                } else {\n                                    return \"<p>No Exams</p>\";\n                                }\n                                // console.log(\"Here in the formatter, what is row: \", row);\n                                // if (row.finished == \"true\") {\n                            },\n                        },\n                        {/* Edit Remove */\n                            title: 'Remove',\n                            field: 'operate',\n                            align: 'center',\n                            valign: 'middle',\n                            clickToSelect: false,\n                            formatter: function (value, row,) {\n                                // var button = \"\";\n                                // console.log(\"Here in the formatter, what is row: \", row);\n\n                                // if (row.finished == \"true\") {\n                                //     // we need to make this button\n                                //     button = '<div class=\"btn-group\">' +\n                                //         '<button class=\"toast_bring_back_' + row.id +\n                                //         ' btn btn-warning btn-lg\" id=\"tcs_bring_back_manual_exam\" data-id=\"' + row.id + '\">' +\n                                //         '<i class=\"fa fa-mail-reply\"></i>' +\n                                //         '</button>' +\n                                //         '</div>';\n                                //     return button;\n                                // }\n                                // if (row.manual != \"false\") {\n                                var button = '<div class=\"btn-group\">' +\n                                    // '<button class=\"toast_edit_' + row.id +\n                                    // ' btn btn-success btn-lg\" id=\"tcs_edit_user_admin\" data-id=\"' + row.id + '\">' +\n                                    // '<i class=\"fa fa-pencil\"></i>' +\n                                    // '</button>' +\n                                    '<button class=\"toast_remove_' + row.id +\n                                    ' btn btn-danger btn-lg\" id=\"tcs_remove_user_admin\" data-id=\"' + row.id + '\">' +\n                                    '<i class=\"fa fa-trash\"></i>' +\n                                    '</button>' +\n                                    '</div>';\n                                // }\n                                return button;\n                            }\n                        }\n                    ]\n                    //============================================\n                });\n            });\n\n            // Now let's prep the user search\n            tcs_autocomp.initiateAutoComp(JSON.parse(localStorage.getItem('tcs_users')));\n        }\n    };\n});\n"],"file":"tcs_user_admin.min.js"}