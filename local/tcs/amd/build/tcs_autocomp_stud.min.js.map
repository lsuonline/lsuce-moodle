{"version":3,"sources":["../src/tcs_autocomp_stud.js"],"names":["define","$","jaxy","TCSLib","autocomplete","tcs_autocomp","ModalFactory","ModalEvents","Templates","StudentTable","$auto_obj","auto_comp_modal","loadUserExams","user","promiseObj","Promise","resolve","tcsAjax","JSON","stringify","data","uofl_id","username","prop","then","response","findUserData","that","exams","create","type","types","SAVE_CANCEL","title","body","render","large","modal","setSaveButtonText","root","getRoot","on","save","exam_type","checkForm","split","length","addStudent","val","showMessage","hidden","focus","destroy","show","removeStudentFromTable","hide","success","msg","console","log","onSelect","suggestion","onSearchComplete","initiateAutoComp","users","event","target","trigger","keypress","e","actual_id","charCode","which","keyStrokeCount","keyCode","isBarCodeReader","temp_userid","mask","value","String","fromCharCode","substring","stored_idnumber"],"mappings":"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","sourcesContent":["define([\n    'jquery',\n    'local_tcs/jaxy',\n    'local_tcs/tcs_lib',\n    'local_tcs/_libs/jquery.autocomplete',\n    'local_tcs/tcs_autocomp',\n    'core/modal_factory',\n    'core/modal_events',\n    'core/templates',\n    'local_tcs/tcs_student_table'\n    // 'local_tcs/PNotifyButtons'\n\n], function($, jaxy, TCSLib, autocomplete, tcs_autocomp, ModalFactory, ModalEvents, Templates, StudentTable) { // , PNotifyButtons\n\n    'use strict';\n        /* eslint-disable */\n        var keyStrokeCount = 0,\n            isBarCodeReader = 0,\n            temp_userid = 0,\n            mask = 0,\n            stored_idnumber = 0,\n            \n            $auto_obj = $('.tcs_autocomp_in');\n        /* eslint-enable */\n\n    // TODO: Make default select on radio buttons, right now it's last selection\n    return {\n\n        auto_comp_modal: 0,\n        /**\n         * Description: TODO - fill this in\n         * @param {object} a list of users to use for searching\n         */\n        loadUserExams: function(user) {\n            // console.log(\"What is the user data to search: \", user);\n            // var promiseObj = new Promise(function(resolve, reject) {\n            var promiseObj = new Promise(function(resolve) {\n                // return;\n                // console.log(\"What is the attempt value: \" + $('#student_attempt_bypass').prop(\"checked\"));\n\n                jaxy.tcsAjax(JSON.stringify({\n                    'call': 'loadUserExams',\n                    'params': {\n                        'userid': user.data.uofl_id,\n                        'username': user.data.username,\n                        'isnum': true,\n                        'attempt_override': $('#student_attempt_bypass').prop(\"checked\"),\n                        'ax': true,\n\n                    },\n                    'class': 'StudentListAjax',\n                })).then(function(response) {\n\n                    resolve(response);\n                    // var result = JSON.parse(response);\n                    // console.log(\"loadUserExams() -> what is the result: \", result);\n                    // resolve(JSON.parse(result.data));\n\n                    // TODO: this will need to be loaded into the autocomplete library\n\n                    // }\n                });\n            });\n            return promiseObj;\n        },\n\n        /** Find what exams the user has and display in modal\n         * Description:\n         * @param {object} a list of users to use for searching\n         */\n        findUserData: function(data) {\n            // console.log(\"findUserData() -> going to FETCH DATA........\");\n            // console.log(\"findUserData() -> what is the data: \", data);\n            var that = this;\n            // Let's find the User's Exam Information\n            this.loadUserExams(data).then(function(response) {\n\n                // console.log(\"findUserData() -> what is the FINAL DATA: \");\n                // console.table(response);\n                if ('dash_hash' in response) {\n                    data.data.exams = response.exams;\n\n                    // console.log(\"findUserData() -> what is response: \" + response);\n                    // console.table(\"findUserData() -> what is response: \" + response);\n                    // var trigger = $('#enter_student_modal');\n\n                    ModalFactory.create({\n                        type: ModalFactory.types.SAVE_CANCEL,\n                        title: 'Enter Student For Exam',\n                        body: Templates.render('local_tcs/modal_enterstudent', data.data),\n                        large: true\n                        // can_recieve_focus: button\n                        // footer: 'Stuff here Yo',\n                    })\n                    .then(function(modal) {\n                        modal.setSaveButtonText('Enter Student');\n                        var root = modal.getRoot();\n                        root.on(ModalEvents.save, function() {\n                            var exam_type = 0;\n                            // Do something to delete item\n                            // console.log(\"Student has entered into the exam arena\");\n                            // var test1 = $(\"input[name='tcs_identity_check']:checked\").val();\n                            // $('#tcs_comments_on_student').val();\n                            // Either the form will GO or Fail, either way let's set the modal flag to OFF.\n                            // console.log(\"INSIDE Modal THEN, auto_comp_modal set to zero, currently at: \" + that.auto_comp_modal);\n                            that.auto_comp_modal = 0;\n\n                            if (that.checkForm()) {\n                                // console.log(\"Form is good to go\");\n                                if ($(\"input[name='tcs_exam_check']:checked\").data(\"examname\").split(\"ManualExam-\").length === 2) {\n                                    exam_type = 1;\n                                }\n\n                                StudentTable.addStudent({\n                                    'username': data.data.username,\n                                    'uofl_id': data.data.uofl_id,\n                                    'exam_id': $(\"input[name='tcs_exam_check']:checked\").val(),\n                                    'id_type': $(\"input[name='tcs_identity_check']:checked\").val(),\n                                    'room': $(\"input[name='exam_room_check']:checked\").val(),\n                                    'comments': $('#tcs_comments_on_student').val(),\n                                    'exam_type': exam_type\n                                });\n                            } else {\n                                // console.log(\"Form FAIL\");\n\n                                TCSLib.showMessage({\n                                    'msg_type': 'error',\n                                    'show_msg': {\n                                        'title': 'Ooops',\n                                        'message': 'Please select an exam for the student',\n                                        'position': 'center'\n                                    }\n                                });\n\n                                // 'show_msg': {\n                                //     \"title\": \"Error\",\n                                //         \"message\": \"Sorry but the Quiz Settings IP Restriction is too short!\"\n                                // }\n                                return false;\n                            }\n                        });\n\n                        // Handle hidden event.\n                        modal.getRoot().on(ModalEvents.hidden, function() {\n                            // Destroy when hidden.\n                            // console.log(\"Modal DESTROY, setting auto_comp_modal to zero, currently at: \" + that.auto_comp_modal);\n                            that.auto_comp_modal = 0;\n                            $('.tcs_autocomp_in').val('');\n                            $('.tcs_autocomp_in').focus();\n                            modal.destroy();\n                        });\n                        modal.show();\n                    // .done(function(modal) {\n                        // Do what you want with your new modal.\n                    });\n                } else {\n                    // make sure this is set to OFF since user is being removed.\n                    that.auto_comp_modal = 0;\n                    // console.table(\"tcs_autocomp_stud -> findUserData() -> Swipe Remove, what is response (table): \" + response);\n                    if ('swipe_remove' in response) {\n                        // console.log(\"tcs_autocomp_stud -> findUserData() -> going to call removeStudentFromTable.......\");\n                        // if ('swipe_remove' in response.extra && response.extra.swipe_remove == true) {\n                            // iziToast.show({\n                            //     title: 'Success',\n                            //     message: response.msg,\n                            //     position: 'topRight'\n                            // });\n\n                        StudentTable.removeStudentFromTable(response);\n\n                            // ====== OR ======\n                            // Ask to remove student\n                            /*\n                            iziToast.show({\n                                theme: 'dark',\n                                icon: 'icon-person',\n                                title: 'Hey',\n                                message: 'Welcome!',\n                                position: 'center', // bottomRight, bottomLeft, topRight, topLeft, topCenter, bottomCenter\n                                progressBarColor: 'rgb(0, 255, 184)',\n                                buttons: [\n                                    ['<button>Ok</button>', function (instance, toast) {\n                                        alert(\"Hello world!\");\n                                    }, true], // true to focus\n                                    ['<button>Close</button>', function (instance, toast) {\n                                        instance.hide({\n                                            transitionOut: 'fadeOutUp',\n                                            onClosing: function(instance, toast, closedBy){\n                                                console.info('closedBy: ' + closedBy); // The return will be: 'closedBy: buttonName'\n                                            }\n                                        }, toast, 'buttonName');\n                                    }]\n                                ],\n                                onOpening: function(instance, toast){\n                                    console.info('callback abriu!');\n                                },\n                                onClosing: function(instance, toast, closedBy){\n                                    console.info('closedBy: ' + closedBy); // tells if it was closed by 'drag' or 'button'\n                                }\n                            });\n                            */\n                        // } else {\n                            // console.log(\"=====>>>>>  ERROR 1 -> findUserData  <<<<<=======\");\n                        // }\n                        $('.tcs_autocomp_in').val('');\n                        // $('.tcs_autocomp_in').autocomplete().clear();\n                        $('.tcs_autocomp_in').autocomplete().hide();\n                    } else if (response.success == \"false\") {\n\n                        TCSLib.showMessage({\n                            'msg_type': 'error',\n                            'show_msg': {\n                                'title': 'Ooops',\n                                'message': response.msg,\n                                'position': 'center'\n                            }\n                        });\n                    } else {\n                        // console.log(\"Ok, something is funky here\");\n                        console.log(\"=====>>>>> ERROR 2 -> findUserData  <<<<<=======\");\n                    }\n                }\n            });\n        },\n        checkForm: function () {\n            // console.log(\"Do we have exam_id: \" + $(\"input[name='tcs_exam_check']:checked\").val());\n            // console.log(\"Do we have id_type: \" + $(\"input[name='tcs_identity_check']:checked\").val());\n            // console.log(\"Do we have room: \" + $(\"input[name='exam_room_check']:checked\").val());\n            // console.log(\"Do we have comments: \" + $('#tcs_comments_on_student').val());\n\n            return $(\"input[name='tcs_exam_check']:checked\").val() &&\n                $(\"input[name='tcs_identity_check']:checked\").val() &&\n                $(\"input[name='exam_room_check']:checked\").val();\n        },\n\n        onSelect: function (suggestion) {\n            // console.log(\"tcs_autocomp_stud -> onSelect() -> going to call findUserData\");\n            // console.log(\"tcs_autocomp_stud -> onSelect() -> what is that.auto_comp_modal: \" + this.auto_comp_modal);\n            this.findUserData(suggestion);\n        },\n        onSearchComplete: function (suggestion) {\n            // console.log(\"tcs_autocomp_stud -> onSearchComplete() -> going to call findUserData\");\n            // console.log(\"tcs_autocomp_stud -> onSearchComplete() -> what is that.auto_comp_modal: \" + this.auto_comp_modal);\n            if (this.auto_comp_modal == 0) {\n                // console.log(\"IF -> auto_comp_modal is set to: \" + this.auto_comp_modal);\n                this.auto_comp_modal = 1;\n                this.findUserData(suggestion);\n            // } else {\n            //     console.log(\"NOT going to call findUserData\");\n            //     console.log(\"ELSE -> auto_comp_modal is set to: \" + this.auto_comp_modal);\n\n            }\n        },\n        // ========================================================================================\n        // ========================================================================================\n        // ========================================================================================\n\n        /** START - Initialize The AutoComplete\n         * Description: Initialize The AutoComplete and register any binding events.\n         * @param {object} a list of users to use for searching\n         */\n        initiateAutoComp: function(users) {\n            // currently trying this one:\n            // https://github.com/devbridge/jQuery-Autocomplete\n            // console.log(\"tc_autocomp_stud => initiateAutoComp() ----->>> DO YOU SEE ME ONCE????? <<<-------\");\n\n            var that = this;\n            // $('#autocomplete').focus();\n            // $('#autocomplete').autocomplete({\n\n            // #autocomplete_stud is the id in the search template\n            tcs_autocomp.initiateAutoComp(users, that, '#autocomplete_stud');\n\n            $(\"body\").on('click', '#tcs_enterstudent_table > tbody > tr', function (event) {\n                // console.log(\"Clicked inside the row BITCH, what is the type: \" + event.target.type);\n                if (event.target.type !== 'radio') {\n                    $(':radio', this).trigger('click');\n                }\n            });\n\n            // $('#autocomplete').keyup(function (e) {\n            //     console.log(\"key up: \" + e);\n            // });\n\n            // $('.tcs_autocomp_in').keypress(function (e) {\n            //     console.log('facker test 0' + e);\n            // });\n\n            // $('.tcs_autocomp_in').keyup(function (e) {\n            //     console.log('facker test 1' + e);\n            // });\n\n            // $('#autocomplete_stud').keypress(function (e) {\n            //     console.log('facker test 3' + e);\n            // });\n            // $('#autocomplete_stud').keyup(function (e) {\n            //     console.log('facker test 4' + e);\n            // });\n\n            $auto_obj = $('.tcs_autocomp_in');\n\n            $auto_obj.keypress(function (e) {\n            // $('.tcs_autocomp_in').keypress(function (e) {\n                // Here's an example of the card being scanned:\n                // % 001028120 ?; 6018190723618365 ? +691606639 ?\n\n                /*  using these variables to store\n                    var keyStrokeCount = 0,\n                    isBarCodeReader = 0,\n                    temp_userid = 0,\n                    mask = 0,\n                    stored_idnumber = 0,\n                    $auto_obj = $('#autocomplete');\n                */\n                // console.log(\"-------------------------------\");\n                // console.log(\"keypress: \" + e);\n                // console.log(\"-------------------------------\");\n                var actual_id = null,\n                    charCode = e.which;\n                // keycode 37 = %\n                //  13 = return\n                //  9 = tab\n                that.keyStrokeCount = 0;\n                //\n                if ((e.keyCode === 37 || charCode === 37) && that.keyStrokeCount === 0) {\n                    that.isBarCodeReader = 1;\n                    // $('#tcs_std_list_spinner').css(\"visibility\", \"visible\");\n                    that.temp_userid = '';\n                    that.mask = '';\n                    // return;\n                }\n                // console.log(\"keypress -> what is the charcode: \" + charCode + \" and value: \" + this.value);\n\n                //\n                that.keyStrokeCount++;\n                //\n                if (this.value.length === 9 && that.isBarCodeReader === 0) {\n\n                    // console.log(\"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\");\n                    // console.log(\"keypress -> length is 9 and it's barcode\");\n                    that.keyStrokeCount = 0;\n                    // TCS.student_list.clear_fields_for_newStudentEntry();\n                    // TCS.student_list.process_entry(this.value);\n                    return true;\n                }\n                // do stuff with barcode entry\n                if (that.isBarCodeReader) {\n                    // store the input\n                    that.temp_userid = that.temp_userid + String.fromCharCode(charCode);\n                    // console.log(\"Building id, now its: \" + that.temp_userid);\n                    that.mask += \"*\";\n                    // $('#autocomplete').val(that.mask);\n                    $auto_obj.val(that.mask);\n                }\n                // if (/[%]\\d+[?][;]\\d+[?][+]\\d+[?]/.test(TCS.student_list.temp_userid) && TCS.student_list.isBarCodeReader === 1) {\n                // if the card reader reaches the end the keycode is 13 (return) process now.....\n                if (charCode === 13 && that.isBarCodeReader === 1) {\n                    // console.log(\"keypress -> regex and it's barcode\");\n                    //\n                    // $('#tcs_std_list_spinner').css(\"visibility\", \"hidden\");\n                    //\n                    // that.$exams.focus();\n                    actual_id = that.temp_userid.substring(1, 10);\n                    // console.log(\"What is the id: \" + actual_id);\n                    that.temp_userid = '';\n                    // that.$userid.val(actual_id);\n                    //\n                    that.keyStrokeCount = 0;\n                    that.isBarCodeReader = 0;\n                    // that.clear_fields_for_newStudentEntry();\n                    // // that.$userid.val(actual_id);\n                    // // that.$comments.html('');\n                    // that.process_entry(actual_id);\n                    // console.log(\"Whats the final id of this MORON: \" + actual_id);\n                    that.stored_idnumber = actual_id;\n                    // console.log(\"keypress -> PROCESS ENTRY NOW PART B\");\n                    // $('#autocomplete').val(actual_id);\n                    $auto_obj.val(actual_id);\n                    // console.log(\"444444444 --> What is the final \" + that.stored_idnumber);\n                    return true;\n                }\n                // console.log(\"777777 --> What is the final \" + that.stored_idnumber);\n            });\n            /*\n            $(\"body\").on('keydown', '#tcs_enter_student_form', function (event) {\n                console.log(\"Have hit keydown key\");\n            });\n\n            // $('#tcs_enter_student_form').keypress(function (e) {\n            $(\"body\").on('keypress', '#tcs_enter_student_form', function (event) {\n                console.log(\"Have hit keypress key\");\n                // tcs_enter_student_form\n                if (event.which == 13) {\n                    // $('form#login').submit();\n                    console.log(\"Have hit the enter key\");\n                    if (that.checkForm()) {\n                        console.log(\"Form is good to go\");\n                    } else {\n                        console.log(\"Form FAIL\");\n                    }\n                    return false;    //<---- Add this line\n                }\n            });\n\n            $(\"body\").on('submit', 'data-action=\"save\"', function (event) {\n            */\n        }\n    };\n});\n"],"file":"tcs_autocomp_stud.min.js"}