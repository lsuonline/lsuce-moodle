{"version":3,"sources":["../src/heartbeat.js"],"names":["define","$","TCSLib","changePage","page","stop","start","getDashStats","jaxyPromise","getHash","dashUpdate","data","dash_hash","chunk","text","isAdmin","is_admin","bootstrapTable","student_table_list","setHash","name","value","err","clearInterval","window","DALO","console","log","that","setInterval","then","response","localStorage"],"mappings":"AAAAA,OAAM,uBAAC,CACH,QADG,CAEH,mBAFG,CAAD,CAIH,SAASC,CAAT,CAAYC,CAAZ,CAAoB,CACf,aAOA,MAAO,CAMHC,UAAU,CAAE,oBAAUC,CAAV,CAAgB,CAGxB,GAAY,gBAAR,EAAAA,CAAJ,CAA8B,CAC1B,KAAKC,IAAL,EACH,CAFD,IAEO,CACH,KAAKC,KAAL,EACH,CACJ,CAdE,CA2BHC,YAAY,CAAE,uBAAY,CAEtB,MAAOL,CAAAA,CAAM,CAACM,WAAP,CAAmB,CACtB,KAAQ,cADc,CAEtB,OAAU,CACN,KAAQN,CAAM,CAACO,OAAP,CAAe,eAAf,CADF,CAFY,CAKtB,MAAS,OALa,CAAnB,CAOV,CApCE,CA2DHC,UAAU,CAAE,oBAAUC,CAAV,CAAgB,CAExB,GAAIT,CAAM,CAACO,OAAP,CAAe,eAAf,GAAmCE,CAAI,CAACC,SAA5C,CAAuD,CAEnD,GAAI,CAGA,IAAK,GAAIC,CAAAA,CAAT,GAAkBF,CAAAA,CAAI,CAACA,IAAvB,CAA6B,CACzBV,CAAC,CAAC,IAAMU,CAAI,CAACA,IAAL,CAAUE,CAAV,WAAP,CAAD,CAAuCC,IAAvC,CAA4CH,CAAI,CAACA,IAAL,CAAUE,CAAV,WAA5C,CACH,CAED,GAAIX,CAAM,CAACa,OAAP,IAAoBJ,CAAI,CAACK,QAA7B,CAAuC,CACnCf,CAAC,CAAC,0BAAD,CAAD,CAA8BgB,cAA9B,CAA6C,MAA7C,CAAqDN,CAAI,CAACO,kBAA1D,CACH,CAQDhB,CAAM,CAACiB,OAAP,CAAe,CAACC,IAAI,CAAE,eAAP,CAAwBC,KAAK,CAAEV,CAAI,CAACC,SAApC,CAAf,CACH,CAAC,MAAOU,CAAP,CAAY,CAEVC,aAAa,CAACC,MAAM,CAACC,IAAR,CAChB,CACJ,CACJ,CAtFE,CA0GHnB,KAAK,CAAE,eAASF,CAAT,CAAe,CAGlB,GAAY,gBAAR,EAAAA,CAAJ,CAA8B,CAC1B,MACH,CAEDsB,OAAO,CAACC,GAAR,CAAY,kCAAZ,EACA,GAAIC,CAAAA,CAAI,CAAG,IAAX,CACA,GAA0B,WAAtB,QAAOJ,CAAAA,MAAM,CAACC,IAAlB,CAAuC,CACnCC,OAAO,CAACC,GAAR,CAAY,6BAAZ,EACAD,OAAO,CAACC,GAAR,CAAY,wFAAZ,EAEA,GAA2C,WAAvC,EAAAzB,CAAM,CAACO,OAAP,CAAe,mBAAf,CAAJ,CAAwD,CAEpD,MACH,CAGDe,MAAM,CAACC,IAAP,CAAcI,WAAW,CAAC,UAAY,CAClCH,OAAO,CAACC,GAAR,CAAY,uDAAZ,EAIAC,CAAI,CAACrB,YAAL,GAAoBuB,IAApB,CAAyB,SAAUC,CAAV,CAAoB,CAEzCH,CAAI,CAAClB,UAAL,CAAgBqB,CAAhB,CACH,CAHD,CAKH,CAVwB,CAUe,GAApC,CAAAC,YAAY,kBAVS,CAW5B,CACJ,CAzIE,CA2IH3B,IAAI,CAAE,eAAW,CACbkB,aAAa,CAACC,MAAM,CAACC,IAAR,CAChB,CA7IE,CA+IV,CA3JC,CAAN","sourcesContent":["define([\n    'jquery',\n    'local_tcs/tcs_lib',\n\n], function($, TCSLib) {\n        'use strict';\n        // let's keep the scope of this module available async functions.\n        /** Dash Stats - AJAX REQUEST\n         * Description: Get the data for any dash stat and display it.\n         * The callback will resolve with all the data.\n         * return resolved data\n         */\n        return {\n            /** Get Dash Stats AJAX REQUEST -> PROMISE\n             * Description: This will fetch all dash card stats\n             * the callback will resolve with all the data.\n             * @return resolved data\n             */\n            changePage: function (page) {\n                // console.log(\"HB -> changePage() -> START\");\n                // console.log(\"HB -> changePage() -> what is the page passed in: \" + page);\n                if (page != \"page_dashboard\") {\n                    this.stop();\n                } else {\n                    this.start();\n                }\n            },\n\n            // registerEvent: function (data) {\n            //     console.log(\"registerEvent() -> ============= START =============\");\n            //     console.log(\"registerEvent() -> what is data: \" + data);\n            // },\n\n\n             /** Get Dash Stats AJAX REQUEST -> PROMISE\n             * Description: This will fetch all dash card stats\n             * the callback will resolve with all the data.\n             * @return resolved data\n             */\n            getDashStats: function () {\n\n                return TCSLib.jaxyPromise({\n                    'call': 'getDashStats',\n                    'params': {\n                        'hash': TCSLib.getHash(\"tcs_dash_hash\")\n                    },\n                    'class': 'Stats'\n                });\n            },\n\n            /** Get User List in Centre AJAX REQUEST -> PROMISE\n             * Description: This will fetch all users in the test centre\n             * the callback will resolve with all the data.\n             * @return resolved data\n             */\n            // getTableData: function () {\n            //     return TCSLib.jaxyPromise({\n            //         'call': 'getUsersInExam',\n            //         'params': {\n            //             // 'hash': TCSLib.getHash(\"tcs_s_table_hash\")\n            //             'hash': TCSLib.getHash(\"tcs_dash_hash\")\n            //         },\n            //         'class': 'StudentListAjax'\n            //     });\n            // },\n\n            /** Update all Dashboard Stat Cards\n             * Description:\n             *\n             * @return nothing, just update the DOM\n             */\n            dashUpdate: function (data) {\n\n                if (TCSLib.getHash(\"tcs_dash_hash\") != data.dash_hash) {\n\n                    try {\n                        // =====================================================\n                        // =============== Update The Stat Cards ===============\n                        for (var chunk in data.data) {\n                            $('.' + data.data[chunk]['stat_name']).text(data.data[chunk]['stat_data']);\n                        }\n\n                        if (TCSLib.isAdmin() && data.is_admin) {\n                            $('#tcs_student_table_wacka').bootstrapTable('load', data.student_table_list);\n                        }\n\n                        // update the hash in the local storage\n                        // var d = new Date(),\n                            // n = d.toLocaleTimeString();\n\n                        // =====================================================\n                        // =============== Update The Student List ===============\n                        TCSLib.setHash({name: \"tcs_dash_hash\", value: data.dash_hash});\n                    } catch (err) {\n                        // stop the interval\n                        clearInterval(window.DALO);\n                    }\n                }\n            },\n\n            /** Update all the list of students if necessary\n             * Description:\n             *\n             * @return nothing, just update the DOM\n             */\n            // sTableUpdate: function (data) {\n\n            //     if (TCSLib.getHash(\"tcs_dash_hash\") != data.dash_hash) {\n\n            //         TCSLib.setHash({name: \"tcs_dash_hash\", value: data.dash_hash});\n\n            //         var d = new Date();\n            //         var n = d.toLocaleTimeString();\n\n            //         $('#tcs_student_table_wacka').bootstrapTable('load', data.users_in_centre);\n            //     }\n            // },\n\n            start: function(page) {\n                // tc_init will have the starting page and will be passed to here. Only run\n                // interval if the dashboard is the current page.\n                if (page != \"page_dashboard\") {\n                    return;\n                }\n\n                console.log(\"HB -> STARTING..................\");\n                var that = this;\n                if (typeof window.DALO == 'undefined') {\n                    console.log(\"HB -> Initiating HeartBeat.\");\n                    console.log(\"HB -> You can stop the HB by typing this into the console: clearInterval(window.DALO);\");\n                    // the variable is defined\n                    if (TCSLib.getHash(\"dash_refresh_rate\") == 'undefined') {\n                        // console.log(\"heartbeat.js -> ERROR the data_refresh_rate was not set.\");\n                        return;\n                    }\n                    // *** NOTE *** To stop the heartbeat simple clear the interval\n                    // clearInterval(window.DALO);\n                    window.DALO = setInterval(function () {\n                        console.log(\"-------/\\-----/\\-----ba boomp------/\\-------/\\------/\\----\");\n\n                        // TODO: this needs to be changed to a registration system so any page\n                        // can register a heartbeat\n                        that.getDashStats().then(function (response) {\n                            // console.log(\"Interval -> going to call update function dashUpdate\");\n                            that.dashUpdate(response);\n                        });\n\n                    }, (localStorage[\"dash_refresh_rate\"] * 1000));\n                }\n            },\n\n            stop: function() {\n                clearInterval(window.DALO);\n            }\n        };\n    }\n);"],"file":"heartbeat.min.js"}