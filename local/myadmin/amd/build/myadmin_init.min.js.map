{"version":3,"file":"myadmin_init.min.js","names":["define","$","jaxy","rendy","autocomp","myadmin_user_hash","myadmin_dash_hash","loadEventListeners","click","toggleClass","processURL","clicked_link","current_url","title","substring","indexOf","replace","window","location","history","pushState","id","on","e","preventDefault","attr","href","data","processPage","addEventListener","state","cleanURL","this_pager","replaceState","page","setUsers","users","myadmin_users","localStorage","JSON","stringify","setUserHash","hash","processUserStore","user_hash","stored_user_hash","getItem","call_ajax","stored_users","that","parse","initiateAutoComp","myadminAjax","call","params","ax","total","class","then","response","preLoadConfig","final_state","window_stat","__SERVER__","__INITIAL_STATE__","Object","assign","sideBarShow","error","console","log","t_value","dash_hash","enter_to_finish","dash_refresh_rate","myadmin_admin_user","is_admin","myadmin_tc_admin_user","is_tc_admin","page_dashboard","page_examlist","page_scheduler","page_examreqs","page_useroverride","page_examlogs","page_settings","page_stats","page_printpass","page_useradmin","page_dashboard_title","page_examlist_title","page_scheduler_title","page_examreqs_title","page_useroverride_title","page_examlogs_title","page_settings_title","page_stats_title","page_printpass_title","page_useradmin_title","page_builder_title","page_moodle_title","redirect_page","showPage","postLoadConfig"],"sources":["../src/myadmin_init.js"],"sourcesContent":["define([\n    'jquery',\n    'local_myadmin/jaxy',\n    'local_myadmin/renderer',\n    'local_myadmin/myadmin_autocomp_stud',\n    // 'local_myadmin/iziToast',\n// ], function ($, jaxy, autocomp, iziToast) {\n], function ($, jaxy, rendy, autocomp) {\n    'use strict';\n    /* eslint-disable */\n    var myadmin_users = \"\",\n        // hashes\n        myadmin_user_hash = \"\",\n        myadmin_dash_hash = \"\";\n        // myadmin_s_table_hash = \"\";\n    /* eslint-enable */\n\n    return {\n        // EXAMPLES\n        // localStorage[\"mydatas\"] = JSON.stringify(mydatas);\n        // var datas = JSON.parse(localStorage[\"mydatas\"]);\n\n        /**\n         * Registered Event Listeners\n         *\n         * Valid args are:\n         * int example 1     Only get events for this course\n         * int example 2     Only get events after this time\n         *\n         * @method fetchSWE\n         * @param {object} args The request arguments\n         * @return {promise} Resolved with an array of the calendar events\n         */\n        loadEventListeners: function () {\n            // console.log(\"------------------------------------------------------\");\n            // console.log(\"loadEventListeners() -> START --------(ONLY CALLED ONCE)\");\n            // console.log(\"------------------------------------------------------\");\n\n            $('[data-toggle=offcanvas]').click(function() {\n                $('.row-offcanvas').toggleClass('active');\n            });\n\n            function processURL(clicked_link, current_url, title){\n                // console.log(\"processURL() -> Hello from the processURL function\");\n                // console.log(\"processURL() -> clicked_link is: \" + clicked_link);\n                // console.log(\"processURL() -> current_url is: \" + current_url);\n                // console.log(\"processURL() -> title is: \" + title);\n\n                var current_url = current_url.substring(0, current_url.indexOf(\"/myadmin/\") + 5);\n                var clicked_link = clicked_link.replace(/#/g,'');\n                // console.log(\"processURL() -> POST -> What is the url: \" + current_url);\n                // console.log(\"processURL() -> POST -> What is the sidebar link: \" + clicked_link);\n\n                if (title == \"Back To Moodle\") {\n                    window.location.replace(clicked_link);\n                    return;\n                }\n\n                window.history.pushState({\n                    id: clicked_link\n                }, title, current_url + clicked_link + \"/\");\n                // window.history.pushState({\n                //     id: clicked_link\n                // }, title, current_url + \"page/\" + clicked_link + \"/\");\n            }\n\n            // console.log(\"myadmin_init -> loadEventListeners() -> What is the window location: \" + window.location);\n            // console.log(\"myadmin_init -> loadEventListeners() -> What is the window location href: \" + window.location.href);\n\n            // this is to switch the page\n            $('#myadmin_links .nav-link').on(\"click\", function(e) {\n\n                // console.log(\"myadmin_init -> loadEventListeners() -> CLICK\");\n                e.preventDefault();\n                processURL($(this).attr('href'), window.location.href, $(this).data(\"page_title\"));\n\n                // Change the Dashboard title based on the link\n                rendy.processPage($(this).data(\"link\"));\n            });\n\n            window.addEventListener('popstate', function () {\n                // console.log(\"myadmin_init -> loadEventListeners() -> POPSTATE\");\n                if (history.state && history.state.id === 'Dashboard') {\n                    // Render new content for the hompage\n                }\n                // console.log(\"myadmin_init -> loadEventListeners() -> Popstate has been envoked\");\n                // console.log(\"myadmin_init -> loadEventListeners() -> what is the event: \", event);\n            }, false);\n        },\n\n        /**\n         * Description Here\n         *\n         * Valid args are:\n         * int example 1     Only get events for this course\n         * int example 2     Only get events after this time\n         *\n         * @method fetchSWE\n         * @param {object} args The request arguments\n         * @return {promise} Resolved with an array of the calendar events\n         */\n        cleanURL: function (this_pager) {\n            // The URL could be like this:\n            // console.log(\"myadmin_init -> cleanURL()==============================>>>>>>>\");\n            // console.log(\"myadmin_init -> cleanURL() -> page = \" + this_pager);\n\n            var current_url = window.location;\n            // console.log(\"myadmin_init -> cleanURL() -> current_url.href: \" + current_url.href);\n\n            current_url = current_url.href.replace(/index.php\\?page\\=/, \"\");\n\n            // console.log(\"myadmin_init -> cleanURL() -> what is fooker: \" + current_url);\n            current_url = current_url + \"/\";\n\n            // state, pageTitle, url\n            window.history.replaceState({\"page\": this_pager}, this_pager, current_url);\n\n            // console.log(\"myadmin_init -> cleanURL() DID WE CHANGE THE URL: \" + window.location);\n            // console.log(\"myadmin_init -> cleanURL()==============================<<<<<<<\");\n        },\n\n        /**\n         * Description Here\n         *\n         * Valid args are:\n         * int example 1     Only get events for this course\n         * int example 2     Only get events after this time\n         *\n         * @method fetchSWE\n         * @param {object} args The request arguments\n         * @return {promise} Resolved with an array of the calendar events\n         */\n        setUsers: function (users) {\n            // console.log(\"config -> setUsers() -> Storing users in localCache\");\n            this.myadmin_users = users;\n            localStorage[\"myadmin_users\"] = JSON.stringify(users);\n        },\n\n        /**\n         * Description Here\n         *\n         * Valid args are:\n         * int example 1     Only get events for this course\n         * int example 2     Only get events after this time\n         *\n         * @method fetchSWE\n         * @param {object} args The request arguments\n         * @return {promise} Resolved with an array of the calendar events\n         */\n        setUserHash: function (hash) {\n            // console.log(\"config -> setUserHash() -> Storing user hash in localCache\");\n            this.myadmin_user_hash = hash;\n            localStorage[\"myadmin_user_hash\"] = hash;\n        },\n\n        /**\n         * Description Here\n         *\n         * Valid args are:\n         * int example 1     Only get events for this course\n         * int example 2     Only get events after this time\n         *\n         * @method fetchSWE\n         * @param {object} args The request arguments\n         * @return {promise} Resolved with an array of the calendar events\n         */\n        processUserStore: function(user_hash) {\n            // console.log(\"processUserStore() -> What is the user hash: \" + user_hash);\n            var stored_user_hash = localStorage.getItem('myadmin_user_hash'),\n                call_ajax = false,\n                stored_users = false,\n                that = this;\n\n            if (stored_user_hash) {\n                // console.log(\"processUserStore() -> user hash was stored\");\n                // TODO: check if this hash is the same as passed in hash\n                if (user_hash != stored_user_hash) {\n                    // console.log(\"processUserStore() -> stored user hash DOES NOT EQUAL passed in hash\");\n                    // Must get new fresh students\n                    call_ajax = true;\n                } else {\n                    // users are stored so let's load them up\n                    stored_users = localStorage.getItem('myadmin_users');\n                    if (stored_users) {\n                        // store the users in config\n                        this.myadmin_users = JSON.parse(stored_users);\n                        autocomp.initiateAutoComp(this.myadmin_users);\n                    } else {\n                        // TODO: Make Ajax call to get users\n                        call_ajax = true;\n                    }\n                }\n            } else {\n                call_ajax = true;\n            }\n\n            if (call_ajax) {\n                jaxy.myadminAjax(JSON.stringify({\n                    'call': 'loadUsers',\n                    'params': {\n                        'ax': true,\n                        // 'ax': false,\n                        'page': 0,\n                        'total': 0\n                    },\n                    'class': 'StudentListAjax',\n                })).then(function(response) {\n                    // console.log(\"freshProm THEN **************************************************\");\n                    // console.log(\"processUserStore() -> returned from ajax AND PROMISE, what is response: \", response);\n                    // console.log(\"freshProm THEN **************************************************\");\n                    that.setUsers(response.users);\n                    that.setUserHash(response.hash);\n                    // TODO: this will need to be loaded into the autocomplete library\n                    autocomp.initiateAutoComp(response.users);\n                });\n            }\n        },\n\n\n        /**\n         * Description Here\n         *\n         * Valid args are:\n         * int example 1     Only get events for this course\n         * int example 2     Only get events after this time\n         *\n         * @method fetchSWE\n         * @param {object} args The request arguments\n         * @return {promise} Resolved with an array of the calendar events\n         */\n        preLoadConfig: function() {\n\n            // first let's unload the global vars to js from PHP\n            var temp_state = {sideBarShow: \"in\"},\n                final_state = {},\n                window_stat = {};\n                // big_dump = \"\",\n                // stored_templates = \"\";\n\n            if (window.__SERVER__ === \"true\" || window.__SERVER__ === true) {\n                if (typeof (window.__INITIAL_STATE__) === 'string') {\n                    try {\n                        // console.log(\"preLoadConfig() -> What is the __INITIAL_STATE__: \", __INITIAL_STATE__);\n                        // console.log(\"store_general -> What is the __INITIAL_STATE__.table: \", __INITIAL_STATE__.table_data);\n\n                        window_stat = JSON.parse(window.__INITIAL_STATE__);\n                        final_state = Object.assign(temp_state, window_stat);\n                        // console.log(\"store_general -> What is the final state here: \", final_state);\n                        delete window.__INITIAL_STATE__;\n                        window.__SERVER__ = false;\n                    } catch (error) {\n                        console.log(\"ERROR, __INITIAL_STATE__ couldn't parse.\");\n                        console.log(error);\n                    }\n                }\n            } else {\n                console.log(\"WARNING: window.__SERVER__ was not set\");\n            }\n\n\n            // ----------- Store Hash Tokens Here ---------------\n            // console.log(\"myadmin_init -> going to save the hashes.\");\n            myadmin_user_hash = final_state.user_hash['t_value'];\n            myadmin_dash_hash = final_state.dash_hash['t_value'];\n            // myadmin_s_table_hash = final_state.s_table_hash['t_value'];\n\n            localStorage[\"enter_to_finish\"] = final_state.enter_to_finish;\n            localStorage[\"dash_refresh_rate\"] = final_state.dash_refresh_rate;\n            localStorage[\"myadmin_dash_hash\"] = myadmin_dash_hash;\n\n\n            // ----------- Get Admin Status ---------------\n            // is the user admin?\n            localStorage[\"myadmin_admin_user\"] = final_state.is_admin == true ? true : false;\n            // console.log(\"myadmin INIT -> Is the user admin: \" + localStorage[\"myadmin_admin_user\"]);\n\n            // if (final_state.is_admin == true) {\n            //     console.log(\"myadmin INIT -> YES, they are admin \" + final_state.is_admin);\n            //     localStorage[\"myadmin_admin_user\"] = true;\n            // } else {\n            //     console.log(\"myadmin INIT -> NOOOOOOO, they are NOT admin \" + final_state.is_admin);\n            //     localStorage[\"myadmin_admin_user\"] = false;\n            // }\n\n\n            localStorage[\"myadmin_tc_admin_user\"] = final_state.is_tc_admin == true ? true : false;\n            // console.log(\"myadmin INIT -> Is the user TC admin: \" + localStorage[\"myadmin_tc_admin_user\"]);\n\n\n            // console.log(\"What is admin type: \" + typeof localStorage[\"myadmin_admin_user\"]);\n            // console.log(\"What is tc admin type: \" + typeof localStorage[\"myadmin_tc_admin_user\"]);\n            // if (final_state.is_tc_admin == true) {\n            //     console.log(\"myadmin INIT -> YES, they are admin \" + final_state.is_tc_admin);\n            // } else {\n            //     console.log(\"myadmin INIT -> NOOOOOOO, they are NOT admin \" + final_state.is_tc_admin);\n            // }\n\n            // localStorage[\"myadmin_s_table_hash\"] = myadmin_s_table_hash;\n            // check user hash, fetch users from local or ajax and store in config\n            // console.log(\"preLoadConfig() -> Going to process User Store Now\");\n\n            if (localStorage[\"myadmin_admin_user\"] == \"true\" || localStorage[\"myadmin_tc_admin_user\"] == \"true\") {\n                console.log(\"Going to initiate the auto complete for users\");\n                this.processUserStore(myadmin_user_hash);\n            } else {\n                console.log(\"WARNING - User is not admin or tc admin, going to skip fetching users.\");\n            }\n\n            // check SWE - Students Writing Exams table, fetch from local or ajax and store hash\n            // OK, for now we are going to just store if the template has loaded or not\n            // by default dashboard is always loaded at start.\n            // FIXME: ALSO NOTE this list is in index.php.......can't remember why\n\n            localStorage['page_dashboard'] = false;\n            localStorage['page_examlist'] = false;\n            localStorage['page_scheduler'] = false;\n            localStorage['page_examreqs'] = false;\n            localStorage['page_useroverride'] = false;\n            localStorage['page_examlogs'] = false;\n            localStorage['page_settings'] = false;\n            localStorage['page_stats'] = false;\n            localStorage['page_printpass'] = false;\n            localStorage['page_useradmin'] = false;\n\n            // Any change here must reflect the comp_sidebar.mustache titles\n            localStorage['page_dashboard_title'] = \"Dashboard\";\n            localStorage['page_examlist_title'] = \"Exam List\";\n            localStorage['page_scheduler_title'] = \"Scheduler\";\n            localStorage['page_examreqs_title'] = \"Exam Requests\";\n            localStorage['page_useroverride_title'] = \"User Overrides\";\n            localStorage['page_examlogs_title'] = \"Exam Logs\";\n            localStorage['page_settings_title'] = \"Settings\";\n            localStorage['page_stats_title'] = \"Stats\";\n            localStorage['page_printpass_title'] = \"Print Pretty Passwords\";\n            localStorage['page_useradmin_title'] = \"User Admins\";\n            localStorage['page_builder_title'] = \"Builder\";\n            localStorage['page_moodle_title'] = \"Back To Moodle\";\n\n            var this_pager = window_stat.redirect_page;\n            localStorage[this_pager] = true;\n\n            // Here is where the page may NOT be dashboard, show the page and then clean the URL\n            // console.log(\"myadmin_init -> preLoadConfig() -> What is the page to load (from PHP): \" + this_pager);\n            if (this_pager != \"page_dashboard\") {\n                // console.log(\"myadmin_init -> preLoadConfig() -> going to show \" + this_pager + \" now.\");\n                rendy.showPage(this_pager);\n                this.cleanURL(this_pager);\n            // } else {\n                // console.log(\"myadmin_init -> preLoadConfig() -> Dashboard is the page, carry on\");\n            }\n\n            this.loadEventListeners();\n            // console.log(\"preLoadConfig() ========================>>>> FINISHED <<<<========================\");\n            return this_pager;\n        },\n\n        /**\n         * Description Here\n         *\n         * Valid args are:\n         * int example 1     Only get events for this course\n         * int example 2     Only get events after this time\n         *\n         * @method postLoadConfig\n         * @param {object} args The request arguments\n         * @return {promise} Resolved with an array of the calendar events\n         */\n        postLoadConfig: function() {\n            // console.log(\"postLoadConfig() ========================>>>> START <<<<========================\");\n            // this.fetchSWE();\n        },\n    };\n});\n\n/*\nneed to store users\nneed to store pages in localCache\n\n*/\n\n"],"mappings":"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"}