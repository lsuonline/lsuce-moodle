{"version":3,"file":"myadmin_lib.min.js","names":["define","$","jaxy","iziToast","moment","format","getHash","hash","localStorage","getItem","setHash","obj","setItem","name","value","processHash","isAdmin","showMessage","data","msg_type","success","show_msg","error","show","info","warning","updateStats","forEach","msg","action","temp","parseInt","class","text","over","jaxyPromise","promiseObj","Promise","resolve","myadminAjax","JSON","stringify","then","response","unixToDate","unix_time","unix","getCurrentDate","with_clock","add_clock","dateToUnix","date_time"],"sources":["../src/myadmin_lib.js"],"sourcesContent":["define([\n    'jquery',\n    'local_myadmin/jaxy',\n    'local_myadmin/_libs/iziToast',\n    'local_myadmin/_libs/moment',\n], function ($, jaxy, iziToast, moment) {\n    'use strict';\n\n    // Set the format for Moment JS\n    moment().format('dddd, MMMM Do, YYYY - h:mma');\n\n    return {\n\n        /* ====================================================================== */\n        /* ================      Local Storage Functions      =================== */\n        /* ====================================================================== */\n\n        /**\n         * Get the hash from local storage\n         * Hash could be user hash, student table hash, stat card update hash, etc.\n         * @method getHash\n         * @param string - name of the hash you want\n         * @return string - the hash\n         */\n        getHash: function(hash) {\n            if (typeof localStorage[hash] !== 'undefined') {\n                return localStorage.getItem(hash);\n            } else {\n                return \"no_hash\";\n            }\n        },\n\n        /**\n         * Set the hash in local storage\n         * @method setHash\n         * @param obj - will have name of hash and new value {name:xx, value:xx}\n         * @return\n         */\n        setHash: function(obj) {\n            // console.log(\"Going to set this item: \" + obj.name + \" and it's value: \" + obj.value);\n            localStorage.setItem(obj.name, obj.value);\n        },\n\n        /**\n         * This will get the hash, check if it's the same and if NOT update it\n         * @method processHash\n         * @param obj - will have name of hash and new value {name:xx, value:xx}\n         * @return\n         */\n        processHash: function(obj) {\n            if (this.getHash(obj.hash) == obj.value) {\n                return false;\n            } else {\n                localStorage.setItem(obj.name, obj.value);\n                return true;\n            }\n        },\n\n        /**\n         * Check if the user is admin or not. This is used for certain AJAX calls\n         * @method isAdmin\n         * @param none\n         * @return bool\n         */\n        isAdmin: function() {\n\n            if (localStorage.getItem(\"myadmin_admin_user\") == \"true\" || localStorage.getItem(\"myadmin_tc_admin_user\") == \"true\") {\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        /* ====================================================================== */\n        /* ==================      Message Functions      ======================= */\n        /* ====================================================================== */\n\n        /** Description: All message requests for iziToastk come here to be displayed.\n         * @param {object} all the settings for the message to be shown\n         * @return nothing\n         */\n        showMessage: function (data) {\n            // console.log(\"showMessage() -> What is the data to show: \", data);\n                if (data.msg_type == \"success\") {\n                    iziToast.success(data.show_msg);\n                } else if (data.msg_type == \"error\") {\n                    iziToast.error(data.show_msg);\n                } else if (data.msg_type == \"show\") {\n                    iziToast.show(data);\n                } else if (data.msg_type == \"info\") {\n                    iziToast.info(data.show_msg);\n                } else if (data.msg_type == \"warning\") {\n                    iziToast.warning(data.show_msg);\n                }\n        },\n\n        /* ====================================================================== */\n        /* =================      UI Update Functions      ====================== */\n        /* ====================================================================== */\n\n        /** Description: Update one of the stat cards immediately\n         * @param {object} has 3 keys\n         *      1. class - name of class to update\n         *      2. action - one of add/sub/over\n         *      3. over - override the number with this value\n         * @return nothing\n         */\n        updateStats: function (data) {\n            // console.log(\"MyAdminLib -> updateStats() -> START, what is data: \", data);\n            data.forEach(function (msg) {\n\n                // console.log(\"MyAdminLib -> updateStats() -> what is msg: \", msg);\n                if (msg.action == \"add\") {\n                    var temp = parseInt($('.' + msg.class).text());\n                    temp = temp + 1;\n\n                    $('.' + msg.class).text(temp);\n                } else if (msg.action == \"sub\") {\n                    var temp = parseInt($('.' + msg.class).text());\n                    // make sure we don't go below zero\n                    if (temp === 0) {\n                        return;\n                    } else {\n                        temp = temp - 1;\n                        $('.' + msg.class).text(temp);\n                    }\n                } else if (msg.action == \"over\") {\n                    $('.' + msg.class).text(msg.over);\n                }\n\n            });\n        },\n\n        /* ====================================================================== */\n        /* ===================      AJAX Functions      ========================= */\n        /* ====================================================================== */\n\n        /** Description: Get the current date and return a readable format.\n         * @param - None\n         * @return Date\n         */\n        jaxyPromise: function (data) {\n            // console.log(\"jaxyPromise -> Going to pass this to the jaxy function: \", data);\n            // var promiseObj = new Promise(function (resolve, reject) {\n            var promiseObj = new Promise(function (resolve) {\n                jaxy.myadminAjax(JSON.stringify(data)).then(function (response) {\n                    resolve(response);\n                });\n            });\n            return promiseObj;\n        },\n\n        /* ====================================================================== */\n        /* ===================      DATE Functions      ========================= */\n        /* ====================================================================== */\n\n        /** Date Modifier UNIX to DATE\n         * Description: This function uses moment.js to change the epoch unix timestamp to a\n         * human readable date. According to American English the date will be as follows:\n         * Monday, September 6, 2019 - 4:30pm\n         * @param {int} - unix timestamp\n         * @return {string} - ex: Monday, September 6, 2019 - 4:30pm\n         */\n        unixToDate: function (unix_time) {\n            return moment.unix(unix_time).format('dddd, MMMM Do, YYYY - h:mma');\n        },\n\n        /** Get Date\n         * Description: This function get's the date in a human readable format.\n         *      According to American English the date will be as follows:\n         *      Monday, September 6, 2019 - 4:30pm\n         * @param {int} - unix timestamp\n         * @return {string} - ex: Monday, September 6, 2019 - 4:30pm\n         */\n        getCurrentDate: function (with_clock) {\n\n            var add_clock = \"\";\n            if (with_clock) {\n                add_clock = ' - h:mma';\n            }\n            return moment().format('dddd, MMMM Do, YYYY' + add_clock);\n        },\n        /** Date Modifier DATE to UNIX\n         * Description: This function uses moment.js to change the human readable date to a\n         *      epoch unix timestamp .\n         * @param {string} - unix timestamp\n         * @return {int} - 123412341\n         */\n        dateToUnix: function (date_time) {\n            return moment(date_time).format('X');\n        }\n\n        /** Description: Get the current date and return a readable format.\n         * @param - None\n         * @return Date\n        getCurrentDate2: function () {\n            var now = new Date();\n            var day = (\"0\" + now.getDate()).slice(-2);\n            var month = (\"0\" + (now.getMonth() + 1)).slice(-2);\n            var today = now.getFullYear() + \"-\" + (month) + \"-\" + (day);\n            return today;\n        },\n         */\n    };\n});"],"mappings":"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"}