{"version":3,"file":"scalecolorconfiguration.min.js","sources":["../src/scalecolorconfiguration.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Scale color configuration.\n *\n * @module     report_lpmonitoring/scalecolorconfiguration\n * @author     Issam Taboubi <issam.taboubi@umontreal.ca>\n * @copyright  2016 Université de Montréal\n */\n\ndefine(['jquery',\n    'core/templates',\n    'core/ajax',\n    'core/notification',\n    'core/str',\n    'report_lpmonitoring/fieldsettoggler'],\n    function($, templates, ajax, notification, str, fieldsettoggler) {\n\n        /**\n         * Scale color config object.\n         * @param {String} frameworkSelector The framework select box selector.\n         * @param {String} scaleSelector The scale select box selector.\n         * @param {String} scaleValuesSelector The scaleValuesSelector selector.\n         */\n        var ScaleColorConfiguration = function(frameworkSelector, scaleSelector, scaleValuesSelector) {\n            this.frameworkSelector = frameworkSelector;\n            this.scaleSelector = scaleSelector;\n            this.scaleValuesSelector = scaleValuesSelector;\n\n            $(frameworkSelector).on('change', this.frameworkChangeHandler.bind(this)).change();\n            $(scaleSelector).on('change', this.scaleChangeHandler.bind(this)).change();\n            $(document).on('submit', '#savecolor', this.saveHandler.bind(this));\n\n            // Allow collapse of block panels.\n            fieldsettoggler.init();\n        };\n\n        /** @var {Number} The framework ID. */\n        ScaleColorConfiguration.prototype.frameworkid = null;\n        /** @var {Number} The scale. */\n        ScaleColorConfiguration.prototype.scaleid = null;\n\n        /** @var {String} The framework select box selector. */\n        ScaleColorConfiguration.prototype.frameworkSelector = null;\n        /** @var {String} The scale select box selector. */\n        ScaleColorConfiguration.prototype.scaleSelector = null;\n        /** @var {String} The scaleValuesSelector selector. */\n        ScaleColorConfiguration.prototype.scaleValuesSelector = null;\n\n        /**\n         * Triggered when a frameworkid is selected.\n         *\n         * @name   frameworkChangeHandler\n         * @param  {Event} e\n         * @return {Void}\n         * @function\n         */\n        ScaleColorConfiguration.prototype.frameworkChangeHandler = function(e) {\n            var self = this,\n                    requests;\n\n            self.frameworkid = $(e.target).val();\n            if (self.frameworkid !== '') {\n                $(self.scaleSelector).prop('disabled', false);\n                self.updateScaleHeader();\n                $('#loaderscale').show();\n                requests = ajax.call([{\n                    methodname: 'report_lpmonitoring_get_scales_from_framework',\n                    args: {competencyframeworkid: self.frameworkid}\n                }]);\n\n                requests[0].done(function(context) {\n                    self.buildScaleOptions(context);\n                    self.updateScaleHeader();\n                    self.loadScaleConfiguration();\n                    $('#loaderscale').hide();\n                    $('#id_scale').show();\n                }).fail(notification.exception);\n            } else {\n                str.get_string('noscaleavailable', 'report_lpmonitoring').done(\n                    function(noscaleavailable) {\n                        $(self.scaleSelector).prop('disabled', true);\n                        $(self.scaleSelector + ' option').remove();\n                        $(self.scaleSelector).append($('<option>').text(noscaleavailable).val(''));\n                        self.updateScaleHeader();\n                        $('#loaderscale').hide();\n                        $('#id_scale').hide();\n                    }\n                );\n            }\n        };\n\n        /**\n         * Update scale header.\n         *\n         * @name   updateScaleHeader\n         * @return {Void}\n         * @function\n         */\n        ScaleColorConfiguration.prototype.updateScaleHeader = function() {\n            var selector = document.getElementById('scaleselector'),\n                    scale = selector.options[selector.selectedIndex].text;\n            str.get_string('colorsforscale', 'report_lpmonitoring', scale).done(function(s) {\n                $('#scaleheader').text(s);\n            });\n        };\n\n        /**\n         * Build options from scale.\n         *\n         * @name   buildScaleOptions\n         * @param  {Array} options\n         * @return {Void}\n         * @function\n         */\n        ScaleColorConfiguration.prototype.buildScaleOptions = function(options) {\n            var self = this;\n\n            // Reset options scales.\n            $(self.scaleSelector + ' option').remove();\n\n            $.each(options, function(key, value) {\n                $(self.scaleSelector).append($('<option>').text(value.name).val(value.id));\n            });\n\n            self.scaleid = $(self.scaleSelector + ' option:first-child').attr('value');\n        };\n\n        /**\n         * Triggered when a scale is selected.\n         *\n         * @name   scaleChangeHandler\n         * @param  {Event} e\n         * @return {Void}\n         * @function\n         */\n        ScaleColorConfiguration.prototype.scaleChangeHandler = function(e) {\n            var self = this;\n\n            self.scaleid = $(e.target).val();\n\n            if (self.scaleid) {\n                $(self.scaleSelector).prop('disabled', false);\n                self.updateScaleHeader();\n                $(\"#loaderscalevalues\").show();\n                self.loadScaleConfiguration();\n            } else {\n                $(self.scaleValuesSelector).hide();\n                $(\"#loaderscalevalues\").hide();\n            }\n        };\n\n        /**\n         * Triggered when a scale is selected.\n         *\n         * @name   scaleChangeHandler\n         * @return {Void}\n         * @function\n         */\n        ScaleColorConfiguration.prototype.loadScaleConfiguration = function() {\n            var self = this,\n                requests;\n            $(\"#loaderscalevalues\").show();\n            $('#submitScaleColorButton').prop('disabled', true);\n            $(self.scaleValuesSelector).hide();\n            requests = ajax.call([{\n                methodname: 'report_lpmonitoring_read_report_competency_config',\n                args: {competencyframeworkid: self.frameworkid,\n                    scaleid: self.scaleid}\n            }]);\n\n            requests[0].done(function(context) {\n                return templates.render('report_lpmonitoring/scalecolorconfigurationdetail', context).done(function(html, js) {\n                    $(self.scaleValuesSelector).html(html);\n                    templates.runTemplateJS(js);\n                    $(\"#loaderscalevalues\").hide();\n                    $(self.scaleValuesSelector).show();\n                    $('#submitScaleColorButton').prop('disabled', false);\n                });\n            }).fail(notification.exception);\n        };\n\n        /**\n         * Triggered when a scale is selected.\n         *\n         * @name   scaleChangeHandler\n         * @return {Void}\n         * @function\n         */\n        ScaleColorConfiguration.prototype.saveHandler = function() {\n            var colors = [], valuescaleid = 0, configid = '0';\n            var methodname;\n            var self = this,\n                requests;\n\n            valuescaleid = 1;\n            $('#savecolor input[type=color]').each(function () {\n                if ($(this).val() !== '') {\n                    colors.push({id : valuescaleid, color : $(this).val()});\n                    valuescaleid++;\n                }\n            });\n            colors = JSON.stringify(colors);\n\n            configid = $('#savecolor input[name=configid]').val();\n            if (configid === '0') {\n                methodname = 'report_lpmonitoring_create_report_competency_config';\n            } else {\n                methodname = 'report_lpmonitoring_update_report_competency_config';\n            }\n\n            requests = ajax.call([{\n                methodname: methodname,\n                args: {competencyframeworkid: self.frameworkid,\n                    scaleid: self.scaleid,\n                    scaleconfiguration: colors}\n            }]);\n\n            requests[0].done(function(context) {\n                if (configid === '0') {\n                    $('#savecolor input[name=configid]').val(context.id);\n                }\n                var selector = document.getElementById('scaleselector'),\n                    scale = selector.options[selector.selectedIndex].text;\n                str.get_string('colorsforscalesaved', 'report_lpmonitoring', scale).done(function(s) {\n                    $('.alert-success .close').trigger('click');\n                    notification.addNotification({\n                        message: s,\n                        type: \"success\"\n                    });\n                    $('html, body').animate({scrollTop : 0}, 500);\n                }).fail(notification.exception);\n            }).fail(notification.exception);\n\n            return false;\n        };\n\n        return {\n            /**\n             * Main initialisation.\n             *\n             * @param {String} frameworkSelector The framework select box selector.\n             * @param {String} scaleSelector The scale select box selector.\n             * @param {String} scaleValuesSelector The scaleValuesSelector selector.\n             * @return {ScaleColorConfiguration} A new instance of ScaleConfig.\n             * @method init\n             */\n            init: function(frameworkSelector, scaleSelector, scaleValuesSelector) {\n                return new ScaleColorConfiguration(frameworkSelector, scaleSelector, scaleValuesSelector);\n            }\n        };\n\n    });\n"],"names":["define","$","templates","ajax","notification","str","fieldsettoggler","ScaleColorConfiguration","frameworkSelector","scaleSelector","scaleValuesSelector","on","this","frameworkChangeHandler","bind","change","scaleChangeHandler","document","saveHandler","init","prototype","frameworkid","scaleid","e","self","target","val","prop","updateScaleHeader","show","call","methodname","args","competencyframeworkid","done","context","buildScaleOptions","loadScaleConfiguration","hide","fail","exception","get_string","noscaleavailable","remove","append","text","selector","getElementById","scale","options","selectedIndex","s","each","key","value","name","id","attr","render","html","js","runTemplateJS","configid","colors","valuescaleid","push","color","JSON","stringify","scaleconfiguration","trigger","addNotification","message","type","animate","scrollTop"],"mappings":"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"}